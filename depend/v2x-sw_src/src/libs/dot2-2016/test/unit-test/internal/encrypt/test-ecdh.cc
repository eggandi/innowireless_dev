/** 
  * @file 
  * @brief ECDH 동작(dot2_ECDH())에 대한 단위테스트
  * @date 2022-04-28 
  * @author gyun 
  */


#include "gtest/gtest.h"

// 라이브러리 헤더 파일
#include "dot2/dot2.h"

// 라이브러리 내부 헤더 파일
#include "dot2-internal.h"
#include "encrypt/dot2-encrypt.h"


/// 테스트벡터 수
#define ECDH_TEST_VECTOR_NUM (8)


/**
 * @brief 테스트벡터 구조체
 */
struct TestVector_ECDH
{
  uint8_t privkey_a[DOT2_EC_256_KEY_LEN]; ///< A의 개인키 바이트열
  uint8_t pubkey_B[DOT2_EC_256_PUB_KEY_LEN]; ///< B의 공개키 바이트열
  uint8_t ss_x[DOT2_EC_256_KEY_LEN]; ///< 생성된 Shared secret의 X좌표 바이트열
};


/**
 * @brief 테스트벡터
 *
 * https://stash.campllc.org/projects/SCMS/repos/crypto-test-vectors/browse/ecdh.txt
 */
static struct TestVector_ECDH tv[ECDH_TEST_VECTOR_NUM] = {
  // Test vector #1
  {
    // privkey_a
    { 0x7D, 0x7D, 0xC5, 0xF7, 0x1E, 0xB2, 0x9D, 0xDA, 0xF8, 0x0D, 0x62, 0x14, 0x63, 0x2E, 0xEA, 0xE0,
      0x3D, 0x90, 0x58, 0xAF, 0x1F, 0xB6, 0xD2, 0x2E, 0xD8, 0x0B, 0xAD, 0xB6, 0x2B, 0xC1, 0xA5, 0x34 },
    // pubkey_B
    { 0x04, // Uncompressed
      0x70, 0x0C, 0x48, 0xF7, 0x7F, 0x56, 0x58, 0x4C, 0x5C, 0xC6, 0x32, 0xCA, 0x65, 0x64, 0x0D, 0xB9,
      0x1B, 0x6B, 0xAC, 0xCE, 0x3A, 0x4D, 0xF6, 0xB4, 0x2C, 0xE7, 0xCC, 0x83, 0x88, 0x33, 0xD2, 0x87,
      0xDB, 0x71, 0xE5, 0x09, 0xE3, 0xFD, 0x9B, 0x06, 0x0D, 0xDB, 0x20, 0xBA, 0x5C, 0x51, 0xDC, 0xC5,
      0x94, 0x8D, 0x46, 0xFB, 0xF6, 0x40, 0xDF, 0xE0, 0x44, 0x17, 0x82, 0xCA, 0xB8, 0x5F, 0xA4, 0xAC },
    // ss_x
    { 0x46, 0xFC, 0x62, 0x10, 0x64, 0x20, 0xFF, 0x01, 0x2E, 0x54, 0xA4, 0x34, 0xFB, 0xDD, 0x2D, 0x25,
      0xCC, 0xC5, 0x85, 0x20, 0x60, 0x56, 0x1E, 0x68, 0x04, 0x0D, 0xD7, 0x77, 0x89, 0x97, 0xBD, 0x7B }
  },
  // Test vector #2
  {
    // privkey_a
    { 0x38, 0xF6, 0x5D, 0x6D, 0xCE, 0x47, 0x67, 0x60, 0x44, 0xD5, 0x8C, 0xE5, 0x13, 0x95, 0x82, 0xD5,
      0x68, 0xF6, 0x4B, 0xB1, 0x60, 0x98, 0xD1, 0x79, 0xDB, 0xAB, 0x07, 0x74, 0x1D, 0xD5, 0xCA, 0xF5 },
    // pubkey_B
    { 0x04, // Uncompressed
      0x80, 0x9F, 0x04, 0x28, 0x9C, 0x64, 0x34, 0x8C, 0x01, 0x51, 0x5E, 0xB0, 0x3D, 0x5C, 0xE7, 0xAC,
      0x1A, 0x8C, 0xB9, 0x49, 0x8F, 0x5C, 0xAA, 0x50, 0x19, 0x7E, 0x58, 0xD4, 0x3A, 0x86, 0xA7, 0xAE,
      0xB2, 0x9D, 0x84, 0xE8, 0x11, 0x19, 0x7F, 0x25, 0xEB, 0xA8, 0xF5, 0x19, 0x40, 0x92, 0xCB, 0x6F,
      0xF4, 0x40, 0xE2, 0x6D, 0x44, 0x21, 0x01, 0x13, 0x72, 0x46, 0x1F, 0x57, 0x92, 0x71, 0xCD, 0xA3 },
    // ss_x
    { 0x05, 0x7D, 0x63, 0x60, 0x96, 0xCB, 0x80, 0xB6, 0x7A, 0x8C, 0x03, 0x8C, 0x89, 0x0E, 0x88, 0x7D,
      0x1A, 0xDF, 0xA4, 0x19, 0x5E, 0x9B, 0x3C, 0xE2, 0x41, 0xC8, 0xA7, 0x78, 0xC5, 0x9C, 0xDA, 0x67 }
  },
  // Test vector #3
  {
    // privkey_a
    { 0x1A, 0xCC, 0xFA, 0xF1, 0xB9, 0x77, 0x12, 0xB8, 0x5A, 0x6F, 0x54, 0xB1, 0x48, 0x98, 0x5A, 0x1B,
      0xDC, 0x4C, 0x9B, 0xEC, 0x0B, 0xD2, 0x58, 0xCA, 0xD4, 0xB3, 0xD6, 0x03, 0xF4, 0x9F, 0x32, 0xC8 },
    // pubkey_B
    { 0x04, // Uncompressed
      0xA2, 0x33, 0x9C, 0x12, 0xD4, 0xA0, 0x3C, 0x33, 0x54, 0x6D, 0xE5, 0x33, 0x26, 0x8B, 0x4A, 0xD6,
      0x67, 0xDE, 0xBF, 0x45, 0x8B, 0x46, 0x4D, 0x77, 0x44, 0x36, 0x36, 0x44, 0x0E, 0xE7, 0xFE, 0xC3,
      0xEF, 0x48, 0xA3, 0xAB, 0x26, 0xE2, 0x02, 0x20, 0xBC, 0xDA, 0x2C, 0x18, 0x51, 0x07, 0x68, 0x39,
      0xDA, 0xE8, 0x8E, 0xAE, 0x96, 0x28, 0x69, 0xA4, 0x97, 0xBF, 0x73, 0xCB, 0x66, 0xFA, 0xF5, 0x36 },
    // ss_x
    { 0x2D, 0x45, 0x7B, 0x78, 0xB4, 0x61, 0x41, 0x32, 0x47, 0x76, 0x18, 0xA5, 0xB0, 0x77, 0x96, 0x5E,
      0xC9, 0x07, 0x30, 0xA8, 0xC8, 0x1A, 0x1C, 0x75, 0xD6, 0xD4, 0xEC, 0x68, 0x00, 0x5D, 0x67, 0xEC }
  },
  // Test vector #4
  {
    // privkey_a
    { 0x20, 0x7C, 0x43, 0xA7, 0x9B, 0xFE, 0xE0, 0x3D, 0xB6, 0xF4, 0xB9, 0x44, 0xF5, 0x3D, 0x2F, 0xB7,
      0x6C, 0xC4, 0x9E, 0xF1, 0xC9, 0xC4, 0xD3, 0x4D, 0x51, 0xB6, 0xC6, 0x5C, 0x4D, 0xB6, 0x93, 0x2D },
    // pubkey_B
    { 0x04, // Uncompressed
      0xDF, 0x39, 0x89, 0xB9, 0xFA, 0x55, 0x49, 0x57, 0x19, 0xB3, 0xCF, 0x46, 0xDC, 0xCD, 0x28, 0xB5,
      0x15, 0x3F, 0x78, 0x08, 0x19, 0x1D, 0xD5, 0x18, 0xEF, 0xF0, 0xC3, 0xCF, 0xF2, 0xB7, 0x05, 0xED,
      0x42, 0x22, 0x94, 0xFF, 0x46, 0x00, 0x34, 0x29, 0xD7, 0x39, 0xA3, 0x32, 0x06, 0xC8, 0x75, 0x25,
      0x52, 0xC8, 0xBA, 0x54, 0xA2, 0x70, 0xDE, 0xFC, 0x06, 0xE2, 0x21, 0xE0, 0xFE, 0xAF, 0x6A, 0xC4 },
    // ss_x
    { 0x96, 0x44, 0x12, 0x59, 0x53, 0x4B, 0x80, 0xF6, 0xAE, 0xE3, 0xD2, 0x87, 0xA6, 0xBB, 0x17, 0xB5,
      0x09, 0x4D, 0xD4, 0x27, 0x7D, 0x9E, 0x29, 0x4F, 0x8F, 0xE7, 0x3E, 0x48, 0xBF, 0x2A, 0x00, 0x24 }
  },
  // Test vector #5
  {
    // privkey_a
    { 0xFE, 0xFB, 0x1D, 0xDA, 0x18, 0x45, 0x31, 0x2B, 0x5F, 0xCE, 0x6B, 0x81, 0xB2, 0xBE, 0x20, 0x5A,
      0xF2, 0xF3, 0xA2, 0x74, 0xF5, 0xA2, 0x12, 0xF6, 0x6C, 0x0D, 0x9F, 0xC3, 0x3D, 0x7A, 0xE5, 0x35 },
    // pubkey_B
    { 0x04, // Uncompressed
      0x31, 0x7E, 0x10, 0x20, 0xFF, 0x53, 0xFC, 0xCE, 0xF1, 0x8B, 0xF4, 0x7B, 0xB7, 0xF2, 0xDD, 0x77,
      0x07, 0xFB, 0x7B, 0x7A, 0x75, 0x78, 0xE0, 0x4F, 0x35, 0xB3, 0xBE, 0xED, 0x22, 0x2A, 0x0E, 0xB6,
      0x09, 0x42, 0x0C, 0xE5, 0xA1, 0x9D, 0x77, 0xC6, 0xFE, 0x1E, 0xE5, 0x87, 0xE6, 0xA4, 0x9F, 0xBA,
      0xF8, 0xF2, 0x80, 0xE8, 0xDF, 0x03, 0x3D, 0x75, 0x40, 0x33, 0x02, 0xE5, 0xA2, 0x7D, 0xB2, 0xAE },
    // ss_x
    { 0x30, 0xC2, 0x26, 0x1B, 0xD0, 0x00, 0x4E, 0x61, 0xFE, 0xDA, 0x2C, 0x16, 0xAA, 0x5E, 0x21, 0xFF,
      0xA8, 0xD7, 0xE7, 0xF7, 0xDB, 0xF6, 0xEC, 0x37, 0x9A, 0x43, 0xB4, 0x8E, 0x4B, 0x36, 0xAE, 0xB0 }
  },
  // Test vector #6
  {
    // privkey_a
    { 0x33, 0x4A, 0xE0, 0xC4, 0x69, 0x3D, 0x23, 0x93, 0x5A, 0x7E, 0x8E, 0x04, 0x3E, 0xBB, 0xDE, 0x21,
      0xE1, 0x68, 0xA7, 0xCB, 0xA3, 0xFA, 0x50, 0x7C, 0x9B, 0xE4, 0x1D, 0x76, 0x81, 0xE0, 0x49, 0xCE },
    // pubkey_B
    { 0x04, // Uncompressed
      0x45, 0xFB, 0x02, 0xB2, 0xCE, 0xB9, 0xD7, 0xC7, 0x9D, 0x9C, 0x2F, 0xA9, 0x3E, 0x9C, 0x79, 0x67,
      0xC2, 0xFA, 0x4D, 0xF5, 0x78, 0x9F, 0x96, 0x40, 0xB2, 0x42, 0x64, 0xB1, 0xE5, 0x24, 0xFC, 0xB1,
      0x5C, 0x6E, 0x8E, 0xCF, 0x1F, 0x7D, 0x30, 0x23, 0x89, 0x3B, 0x7B, 0x1C, 0xA1, 0xE4, 0xD1, 0x78,
      0x97, 0x2E, 0xE2, 0xA2, 0x30, 0x75, 0x7D, 0xDC, 0x56, 0x4F, 0xFE, 0x37, 0xF5, 0xC5, 0xA3, 0x21 },
    // ss_x
    { 0x2A, 0xDA, 0xE4, 0xA1, 0x38, 0xA2, 0x39, 0xDC, 0xD9, 0x3C, 0x24, 0x3A, 0x38, 0x03, 0xC3, 0xE4,
      0xCF, 0x96, 0xE3, 0x7F, 0xE1, 0x4E, 0x6A, 0x9B, 0x71, 0x7B, 0xE9, 0x59, 0x99, 0x59, 0xB1, 0x1C }
  },
  // Test vector #7
  {
    // privkey_a
    { 0x2C, 0x4B, 0xDE, 0x40, 0x21, 0x4F, 0xCC, 0x3B, 0xFC, 0x47, 0xD4, 0xCF, 0x43, 0x4B, 0x62, 0x9A,
      0xCB, 0xE9, 0x15, 0x7F, 0x8F, 0xD0, 0x28, 0x25, 0x40, 0x33, 0x1D, 0xE7, 0x94, 0x2C, 0xF0, 0x9D },
    // pubkey_B
    { 0x04, // Uncompressed
      0xA1, 0x9E, 0xF7, 0xBF, 0xF9, 0x8A, 0xDA, 0x78, 0x18, 0x42, 0xFB, 0xFC, 0x51, 0xA4, 0x7A, 0xFF,
      0x39, 0xB5, 0x93, 0x5A, 0x1C, 0x7D, 0x96, 0x25, 0xC8, 0xD3, 0x23, 0xD5, 0x11, 0xC9, 0x2D, 0xE6,
      0xE9, 0xC1, 0x84, 0xDF, 0x75, 0xC9, 0x55, 0xE0, 0x2E, 0x02, 0xE4, 0x00, 0xFF, 0xE4, 0x5F, 0x78,
      0xF3, 0x39, 0xE1, 0xAF, 0xE6, 0xD0, 0x56, 0xFB, 0x32, 0x45, 0xF4, 0x70, 0x0C, 0xE6, 0x06, 0xEF },
    // ss_x
    { 0x2E, 0x27, 0x7E, 0xC3, 0x0F, 0x5E, 0xA0, 0x7D, 0x6C, 0xE5, 0x13, 0x14, 0x9B, 0x94, 0x79, 0xB9,
      0x6E, 0x07, 0xF4, 0xB6, 0x91, 0x3B, 0x1B, 0x5C, 0x11, 0x30, 0x5C, 0x14, 0x44, 0xA1, 0xBC, 0x0B }
  },
  // Test vector #8
  {
    // privkey_a
    { 0x85, 0xA2, 0x68, 0xF9, 0xD7, 0x77, 0x2F, 0x99, 0x0C, 0x36, 0xB4, 0x2B, 0x0A, 0x33, 0x1A, 0xDC,
      0x92, 0xB5, 0x94, 0x1D, 0xE0, 0xB8, 0x62, 0xD5, 0xD8, 0x9A, 0x34, 0x7C, 0xBF, 0x8F, 0xAA, 0xB0 },
    // pubkey_B
    { 0x04, // Uncompressed
      0x35, 0x6C, 0x5A, 0x44, 0x4C, 0x04, 0x9A, 0x52, 0xFE, 0xE0, 0xAD, 0xEB, 0x7E, 0x5D, 0x82, 0xAE,
      0x5A, 0xA8, 0x30, 0x30, 0xBF, 0xFF, 0x31, 0xBB, 0xF8, 0xCE, 0x20, 0x96, 0xCF, 0x16, 0x1C, 0x4B,
      0x57, 0xD1, 0x28, 0xDE, 0x8B, 0x2A, 0x57, 0xA0, 0x94, 0xD1, 0xA0, 0x01, 0xE5, 0x72, 0x17, 0x3F,
      0x96, 0xE8, 0x86, 0x6A, 0xE3, 0x52, 0xBF, 0x29, 0xCD, 0xDA, 0xF9, 0x2F, 0xC8, 0x5B, 0x2F, 0x92 },
    // ss_x
    { 0x1E, 0x51, 0x37, 0x3B, 0xD2, 0xC6, 0x04, 0x4C, 0x12, 0x9C, 0x43, 0x6E, 0x74, 0x2A, 0x55, 0xBE,
      0x2A, 0x66, 0x8A, 0x85, 0xAE, 0x08, 0x44, 0x1B, 0x67, 0x56, 0x44, 0x5D, 0xF5, 0x49, 0x38, 0x57 }
  }
};


/**
 * @brief ECDH 함수가 정상적으로 shared secret 값을 생성하는 것을 확인한다.
 */
TEST(ECDH, NORMAL)
{
  ASSERT_EQ(Dot2_Init(kDot2LogLevel_Err, kDot2SigningParamsPrecomputeInterval_Default, "/dev/urandom", kDot2LeapSeconds_Default), kDot2Result_Success);

  uint8_t ss_x[DOT2_EC_256_KEY_LEN];
  struct Dot2ECPrivateKey priv_key_a{};
  struct Dot2ECPublicKey pub_key_B{};
  for (int i = 0; i < ECDH_TEST_VECTOR_NUM; i++) {
    memcpy(priv_key_a.octs, tv[i].privkey_a, DOT2_EC_256_KEY_LEN);
    memcpy(pub_key_B.u.octs, tv[i].pubkey_B, DOT2_EC_256_PUB_KEY_LEN);
    ASSERT_EQ(dot2_ECDH(&priv_key_a, &pub_key_B, ss_x), kDot2Result_Success);
    ASSERT_TRUE(0 == memcmp(ss_x, tv[i].ss_x, sizeof(ss_x)));
  }

  Dot2_Release();
}
