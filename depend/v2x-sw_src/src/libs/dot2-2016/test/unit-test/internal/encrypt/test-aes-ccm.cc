/** 
  * @file 
  * @brief AES-CCM-128 암복호화(dot2_AES_CCM_128_Encrypt()/dot2_AES_CCM_128_Decrypt()) 동작에 대한 단위테스트
  * @date 2022-04-28 
  * @author gyun 
  */



#include "gtest/gtest.h"

// 라이브러리 헤더 파일
#include "dot2/dot2.h"

// 라이브러리 내부 헤더 파일
#include "dot2-internal.h"
#include "encrypt/dot2-encrypt.h"


/// 테스트벡터 수
#define TEST_VECTOR_NUM (6)
/// 테스트용 평문/암호문 최대길이
#define TEST_TEXT_MAX_LEN (300)


/**
 * @brief 테스트벡터 구조체
 */
struct TestVector_AES_CCM
{
  uint8_t key[DOT2_AES_128_LEN];
  uint8_t nonce[DOT2_AES_128_NONCE_LEN];
  uint8_t plaintext[TEST_TEXT_MAX_LEN];
  size_t plaintext_len;
  uint8_t c_t[TEST_TEXT_MAX_LEN];
  size_t c_t_len;
};


/**
 * @brief 테스트벡터
 *
 * https://stash.campllc.org/projects/SCMS/repos/crypto-test-vectors/browse/aesccm.txt
 */
static struct TestVector_AES_CCM tv[TEST_VECTOR_NUM] = {
  // Test vector #1
  {
    // key
    { 0xE5, 0x8D, 0x5C, 0x8F, 0x8C, 0x9E, 0xD9, 0x78, 0x56, 0x79, 0xE0, 0x8A, 0xBC, 0x7C, 0x81, 0x16 },
    // nonce
    { 0xA9, 0xF5, 0x93, 0xC0, 0x9E, 0xAE, 0xEA, 0x8B, 0xF0, 0xC1, 0xCF, 0x6A },
    // plaintext
    { 0x06, 0x53, 0xB5, 0x71, 0x4D, 0x13, 0x57, 0xF4, 0x99, 0x5B, 0xDD, 0xAC, 0xBE, 0x10, 0x87, 0x39,
      0x51, 0xA1, 0xEB, 0xA6, 0x63, 0x71, 0x8D, 0x1A, 0xF3, 0x5D, 0x2F, 0x0D, 0x52, 0xC7, 0x9D, 0xE4,
      0x9B, 0xE6, 0x22, 0xC4, 0xA6, 0xD9, 0x06, 0x47, 0xBA, 0x2B, 0x00, 0x4C, 0x3E, 0x8A, 0xE4, 0x22,
      0xFD, 0x27, 0x06, 0x3A, 0xFA, 0x19, 0xAD, 0x88, 0x3D, 0xCC, 0xBD, 0x97, 0xD9, 0x8B, 0x8B, 0x04,
      0x61, 0xB5, 0x67, 0x1E, 0x75, 0xF1, 0x97, 0x01, 0xC2, 0x40, 0x42, 0xB8, 0xD3, 0xAF, 0x79, 0xB9,
      0xFF, 0x62, 0xBC, 0x44, 0x8E, 0xF9, 0x44, 0x0B, 0x1E, 0xA3, 0xF7, 0xE5, 0xC0, 0xF4, 0xBF, 0xEF,
      0xE3, 0xE3, 0x26, 0xE6, 0x2D, 0x5E, 0xE4, 0xCB, 0x4B, 0x4C, 0xFF, 0xF3, 0x0A, 0xD5, 0xF4, 0x9A,
      0x79, 0x81, 0xAB, 0xF7, 0x16, 0x17, 0x24, 0x5B, 0x96, 0xE5, 0x22, 0xE1, 0xAD, 0xD7, 0x8A
    },
    // plaintext length
    127,
    // Ciphertext || Tag
    { 0x5F, 0x82, 0xB9, 0xFC, 0xE3, 0x4B, 0x94, 0x83, 0x53, 0x95, 0xDD, 0x89, 0xD7, 0x1F, 0xB7, 0x58,
      0xD2, 0xA3, 0x90, 0x7F, 0xBF, 0x2F, 0xD5, 0x89, 0x94, 0xA2, 0xB9, 0xCF, 0x87, 0x25, 0xAF, 0x26,
      0xF0, 0xB2, 0x38, 0x53, 0xC2, 0x7A, 0x06, 0xE3, 0x5E, 0xE7, 0x2C, 0xAD, 0x82, 0x77, 0x13, 0xC1,
      0x8F, 0xA5, 0xDD, 0xA9, 0x71, 0xD9, 0xBA, 0xA7, 0xB4, 0x2A, 0x30, 0x1F, 0xF6, 0x0C, 0x6E, 0x4A,
      0xD6, 0x51, 0xC1, 0xBB, 0x6E, 0xD4, 0xF2, 0x5F, 0x7D, 0x0F, 0xF3, 0x87, 0xA1, 0x16, 0x27, 0x93,
      0x4C, 0xD1, 0x1F, 0x86, 0x98, 0x4E, 0xA3, 0xAC, 0x96, 0x9D, 0xDA, 0x9A, 0x02, 0x0A, 0xD6, 0x42,
      0x4B, 0x0D, 0x39, 0x3E, 0x3F, 0xB4, 0xB1, 0x11, 0x9A, 0xDF, 0x5C, 0xDB, 0x01, 0x2A, 0x59, 0x75,
      0x3E, 0x41, 0xD4, 0x7E, 0x5E, 0x5A, 0x8C, 0x3A, 0x11, 0x8E, 0xD4, 0x07, 0x04, 0x9B, 0x56, 0xD5,
      0x3B, 0xF5, 0x6C, 0xB3, 0x8C, 0x0B, 0x20, 0xA2, 0x50, 0x2D, 0x1D, 0xA7, 0x0B, 0x97, 0x61
    },
    // "Ciphertext || Tag" length
    143
  },
  // Test vector #2
  {
    // key
    { 0xE5, 0x8D, 0x5C, 0x8F, 0x8C, 0x9E, 0xD9, 0x78, 0x56, 0x79, 0xE0, 0x8A, 0xBC, 0x7C, 0x81, 0x16 },
    // nonce
    { 0xA9, 0xF5, 0x93, 0xC0, 0x9E, 0xAE, 0xEA, 0x8B, 0xF0, 0xC1, 0xCF, 0x6A },
    // plaintext
    { 0xAC, 0xA6, 0x50, 0xCC, 0xCC, 0xDA, 0x60, 0x4E, 0x16, 0xA8, 0xB5, 0x4A, 0x33, 0x35, 0xE0, 0xBC,
      0x2F, 0xD9, 0x44, 0x4F, 0x33, 0xE3, 0xD9, 0xB8, 0x2A, 0xFE, 0x6F, 0x44, 0x53, 0x57, 0x63, 0x49,
      0x74, 0xF0, 0xF1, 0x72, 0x8C, 0xF1, 0x13, 0x45, 0x23, 0x21, 0xCB, 0xE5, 0x85, 0x83, 0x04, 0xB0,
      0x1D, 0x4A, 0x14, 0xAE, 0x7F, 0x3B, 0x45, 0x98, 0x0E, 0xE8, 0x03, 0x3A, 0xD2, 0xA8, 0x59, 0x9B,
      0x78, 0xC2, 0x94, 0x94, 0xC9, 0xE5, 0xF8, 0x94, 0x5A, 0x8C, 0xAD, 0xE3, 0xEB, 0x5A, 0x30, 0xD1,
      0x56, 0xC0, 0xD8, 0x32, 0x71, 0x62, 0x6D, 0xAD, 0xDB, 0x65, 0x09, 0x54, 0x09, 0x34, 0x43, 0xFB,
      0xAC, 0x97, 0x01, 0xC0, 0x2E, 0x5A, 0x97, 0x3F, 0x39, 0xC2, 0xE1, 0x76, 0x1A, 0x4B, 0x48, 0xC7,
      0x64, 0xBF, 0x6D, 0xB2, 0x15, 0xA5, 0x4B, 0x28, 0x5A, 0x06, 0xEC, 0xA3, 0xAF, 0x0A, 0x83, 0xF7
    },
    // plaintext length
    128,
    // Ciphertext || Tag
    { 0xF5, 0x77, 0x5C, 0x41, 0x62, 0x82, 0xA3, 0x39, 0xDC, 0x66, 0xB5, 0x6F, 0x5A, 0x3A, 0xD0, 0xDD,
      0xAC, 0xDB, 0x3F, 0x96, 0xEF, 0xBD, 0x81, 0x2B, 0x4D, 0x01, 0xF9, 0x86, 0x86, 0xB5, 0x51, 0x8B,
      0x1F, 0xA4, 0xEB, 0xE5, 0xE8, 0x52, 0x13, 0xE1, 0xC7, 0xED, 0xE7, 0x04, 0x39, 0x7E, 0xF3, 0x53,
      0x6F, 0xC8, 0xCF, 0x3D, 0xF4, 0xFB, 0x52, 0xB7, 0x87, 0x0E, 0x8E, 0xB2, 0xFD, 0x2F, 0xBC, 0xD5,
      0xCF, 0x26, 0x32, 0x31, 0xD2, 0xC0, 0x9D, 0xCA, 0xE5, 0xC3, 0x1C, 0xDC, 0x99, 0xE3, 0x6E, 0xFB,
      0xE5, 0x73, 0x7B, 0xF0, 0x67, 0xD5, 0x8A, 0x0A, 0x53, 0x5B, 0x24, 0x2B, 0xCB, 0xCA, 0x2A, 0x56,
      0x04, 0x79, 0x1E, 0x18, 0x3C, 0xB0, 0xC2, 0xE5, 0xE8, 0x51, 0x42, 0x5E, 0x11, 0xB4, 0xE5, 0x28,
      0x23, 0x7F, 0x12, 0x3B, 0x5D, 0xE8, 0xE3, 0x49, 0xDD, 0x6D, 0x1A, 0x45, 0x06, 0x46, 0x5F, 0x72,
      0x57, 0x00, 0x10, 0x80, 0x00, 0x38, 0x72, 0x27, 0x19, 0x00, 0xD3, 0xF3, 0x9C, 0x96, 0x61, 0xFD
    },
    // "Ciphertext || Tag" length
    144
  },
  // Test vector #3
  {
    // key
    { 0xE5, 0x8D, 0x5C, 0x8F, 0x8C, 0x9E, 0xD9, 0x78, 0x56, 0x79, 0xE0, 0x8A, 0xBC, 0x7C, 0x81, 0x16 },
    // nonce
    { 0xA9, 0xF5, 0x93, 0xC0, 0x9E, 0xAE, 0xEA, 0x8B, 0xF0, 0xC1, 0xCF, 0x6A },
    // plaintext
    { 0xD1, 0xAA, 0x8B, 0xBC, 0x04, 0xDF, 0xC9, 0x2F, 0xFE, 0x2C, 0xB7, 0x74, 0x8E, 0x70, 0xB0, 0x2F,
      0x5A, 0x91, 0xDA, 0x14, 0x78, 0x12, 0x23, 0xA7, 0x12, 0xD4, 0x4C, 0x4B, 0xA1, 0x4A, 0x1C, 0x78,
      0xEB, 0x02, 0x38, 0x7F, 0xE7, 0x3F, 0xDC, 0xBC, 0xA8, 0x44, 0x70, 0x56, 0xAC, 0xAA, 0x9B, 0x5F,
      0x94, 0xD5, 0x20, 0x89, 0x72, 0xB7, 0x06, 0xDF, 0x9F, 0xC4, 0xC8, 0x03, 0xEA, 0xBB, 0x2B, 0xC5,
      0x8C, 0x3D, 0x8D, 0xF4, 0xAC, 0x49, 0x6C, 0x34, 0xCB, 0x6B, 0xAB, 0x93, 0x94, 0x78, 0xCB, 0x41,
      0x79, 0x95, 0xB2, 0x31, 0x4D, 0xAF, 0x7A, 0xF3, 0xF4, 0xC8, 0xA8, 0xD5, 0xD5, 0x7A, 0x03, 0xF0,
      0xEB, 0x2B, 0x7B, 0xBD, 0x2D, 0x16, 0xBA, 0xBB, 0xF2, 0x2C, 0x5B, 0x1E, 0xEB, 0xFF, 0x72, 0xC7,
      0xDD, 0x4F, 0x91, 0x2D, 0x58, 0x21, 0xF9, 0xA6, 0xBF, 0xA2, 0xD0, 0x63, 0xCE, 0x6F, 0x66, 0x48,
      0xDF
    },
    // plaintext length
    129,
    // Ciphertext || Tag
    { 0x88, 0x7B, 0x87, 0x31, 0xAA, 0x87, 0x0A, 0x58, 0x34, 0xE2, 0xB7, 0x51, 0xE7, 0x7F, 0x80, 0x4E,
      0xD9, 0x93, 0xA1, 0xCD, 0xA4, 0x4C, 0x7B, 0x34, 0x75, 0x2B, 0xDA, 0x89, 0x74, 0xA8, 0x2E, 0xBA,
      0x80, 0x56, 0x22, 0xE8, 0x83, 0x9C, 0xDC, 0x18, 0x4C, 0x88, 0x5C, 0xB7, 0x10, 0x57, 0x6C, 0xBC,
      0xE6, 0x57, 0xFB, 0x1A, 0xF9, 0x77, 0x11, 0xF0, 0x16, 0x22, 0x45, 0x8B, 0xC5, 0x3C, 0xCE, 0x8B,
      0x3B, 0xD9, 0x2B, 0x51, 0xB7, 0x6C, 0x09, 0x6A, 0x74, 0x24, 0x1A, 0xAC, 0xE6, 0xC1, 0x95, 0x6B,
      0xCA, 0x26, 0x11, 0xF3, 0x5B, 0x18, 0x9D, 0x54, 0x7C, 0xF6, 0x85, 0xAA, 0x17, 0x84, 0x6A, 0x5D,
      0x43, 0xC5, 0x64, 0x65, 0x3F, 0xFC, 0xEF, 0x61, 0x23, 0xBF, 0xF8, 0x36, 0xE0, 0x00, 0xDF, 0x28,
      0x9A, 0x8F, 0xEE, 0xA4, 0x10, 0x6C, 0x51, 0xC7, 0x38, 0xC9, 0x26, 0x85, 0x67, 0x23, 0xBA, 0xCD,
      0xB3, 0xF5, 0xD0, 0xF8, 0x7F, 0x7E, 0x29, 0xD9, 0x4B, 0xF1, 0xB4, 0x1D, 0xE8, 0x06, 0x3E, 0x10,
      0x71
    },
    // "Ciphertext || Tag" length
    145
  },
  // Test vector #4
  {
    // key
    { 0xB8, 0x45, 0x3A, 0x72, 0x80, 0x60, 0xF8, 0xD5, 0x17, 0xBA, 0xCE, 0xED, 0x38, 0x29, 0xF4, 0xD9 },
    // nonce
    { 0xCF, 0xBC, 0xE6, 0x9C, 0x88, 0x4D, 0x5B, 0xAB, 0xBB, 0xAA, 0xF9, 0xA3 },
    // plaintext
    { 0xF7, 0x62, 0x9B, 0x73, 0xDA, 0xE8, 0x5A, 0x9B, 0xCA, 0x45, 0xC4, 0x2E, 0xB7, 0xFC, 0x18, 0x18,
      0xDC, 0x74, 0xA6, 0x0E, 0x13, 0xAE, 0x65, 0xA0, 0x43, 0xE2, 0x4B, 0x5A, 0x4D, 0x3A, 0xE0, 0x4C,
      0x27, 0x3E, 0x7D, 0x6F, 0x42, 0x71, 0x0F, 0x2D, 0x22, 0x3D, 0x09, 0xEB, 0x7C, 0x13, 0x15, 0x71,
      0x8A, 0x5A, 0x12, 0x93, 0xD4, 0x82, 0xE4, 0xC4, 0x5C, 0x3E, 0x85, 0x2E, 0x51, 0x06, 0xAA, 0xD7,
      0xB6, 0x95, 0xA0, 0x2C, 0x48, 0x54, 0x80, 0x1A, 0x5E, 0xFE, 0x93, 0x7A, 0x65, 0x40, 0xBC, 0xE8,
      0x73, 0x4E, 0x81, 0x41, 0x55, 0x8C, 0x34, 0x33, 0xB1, 0xD4, 0xC7, 0x33, 0xDC, 0x5E, 0xF9, 0xC4,
      0x7B, 0x52, 0x79, 0xAA, 0x46, 0xEE, 0x3D, 0x8B, 0xD3, 0x3B, 0x09, 0x50, 0xBE, 0x5C, 0x9E, 0xBD,
      0xF1, 0x8B, 0xCF, 0x06, 0x9B, 0x6D, 0xAF, 0x82, 0xFF, 0x11, 0x86, 0x91, 0x2F, 0x0A, 0xBA
    },
    // plaintext length
    127,
    // Ciphertext || Tag
    { 0xDE, 0xDE, 0x57, 0x5B, 0x6E, 0xFE, 0x39, 0x0F, 0x2C, 0xBB, 0x4F, 0x36, 0x8A, 0x71, 0x1F, 0x6C,
      0xDF, 0x69, 0xAB, 0xD1, 0x1A, 0xF5, 0x80, 0xB2, 0xBF, 0x40, 0x29, 0xF8, 0x5E, 0xB8, 0x35, 0xD1,
      0xAB, 0xDD, 0xB3, 0x0E, 0x9E, 0x9C, 0xF3, 0xF1, 0x3C, 0xBA, 0x3B, 0xCC, 0x2E, 0x91, 0x87, 0x13,
      0xD2, 0x18, 0xAF, 0x0D, 0x07, 0xCC, 0x61, 0x4A, 0xF6, 0x98, 0x92, 0xAF, 0xA9, 0x86, 0xAF, 0x2D,
      0x5E, 0x60, 0xED, 0xB0, 0x5D, 0x09, 0xD3, 0xB2, 0x9E, 0x2A, 0x65, 0xB5, 0x43, 0xAD, 0x6F, 0x26,
      0xE5, 0xD7, 0x6B, 0x66, 0x0F, 0xE9, 0x18, 0x49, 0x06, 0xA6, 0x31, 0x5C, 0xD6, 0xB5, 0x35, 0x5F,
      0xA2, 0x91, 0xA1, 0xE9, 0x0C, 0x51, 0x0D, 0xF2, 0x0E, 0x46, 0xC1, 0x16, 0xE2, 0x18, 0x00, 0x09,
      0xC2, 0x87, 0x65, 0x9D, 0xB8, 0xD4, 0x5C, 0xC3, 0x96, 0x80, 0x49, 0xFA, 0x29, 0xF0, 0x8D, 0xE5,
      0xD1, 0x56, 0xED, 0xF7, 0xB0, 0xDB, 0xC8, 0x4E, 0x41, 0x0F, 0x29, 0x28, 0x68, 0xC4, 0xBE
    },
    // "Ciphertext || Tag" length
    143
  },
  // Test vector #5
  {
    // key
    { 0xB8, 0x45, 0x3A, 0x72, 0x80, 0x60, 0xF8, 0xD5, 0x17, 0xBA, 0xCE, 0xED, 0x38, 0x29, 0xF4, 0xD9 },
    // nonce
    { 0xCF, 0xBC, 0xE6, 0x9C, 0x88, 0x4D, 0x5B, 0xAB, 0xBB, 0xAA, 0xF9, 0xA3 },
    // plaintext
    { 0x29, 0xB4, 0x01, 0x3F, 0x55, 0x2F, 0xBC, 0xE9, 0x93, 0x54, 0x4C, 0xC6, 0x60, 0x5C, 0xB0, 0x5C,
      0x62, 0xA7, 0x89, 0x4C, 0x4C, 0x99, 0xE6, 0xA1, 0x2C, 0x5F, 0x9F, 0x2E, 0xE4, 0xDF, 0xBE, 0xBA,
      0xD7, 0x0C, 0xDD, 0x08, 0x93, 0x54, 0x22, 0x40, 0xF2, 0x8B, 0xB5, 0xFB, 0xB9, 0x09, 0x03, 0x32,
      0xED, 0x11, 0x0A, 0xBF, 0xAE, 0x6C, 0x4C, 0x64, 0x60, 0xD9, 0x16, 0xF8, 0x99, 0x41, 0x36, 0x57,
      0x5B, 0x5A, 0x6F, 0xD8, 0xDB, 0x60, 0x5F, 0xDF, 0x14, 0xCB, 0x81, 0x97, 0x7A, 0xFF, 0x7F, 0x99,
      0xB5, 0x27, 0x25, 0x80, 0xBF, 0x22, 0x01, 0x33, 0xC6, 0x91, 0xB0, 0x9B, 0xAD, 0xC4, 0xD1, 0xFE,
      0x71, 0x25, 0xFD, 0x17, 0xFD, 0xBF, 0xC1, 0x03, 0xE3, 0xF0, 0x0A, 0x4D, 0x8E, 0x5A, 0x6F, 0x1E,
      0x3D, 0x3A, 0xF2, 0xA9, 0x08, 0x53, 0x5D, 0xE8, 0x58, 0xE1, 0xCC, 0xD3, 0xDB, 0x4D, 0x18, 0x35
    },
    // plaintext length
    128,
    // Ciphertext || Tag
    { 0x00, 0x08, 0xCD, 0x17, 0xE1, 0x39, 0xDF, 0x7D, 0x75, 0xAA, 0xC7, 0xDE, 0x5D, 0xD1, 0xB7, 0x28,
      0x61, 0xBA, 0x84, 0x93, 0x45, 0xC2, 0x03, 0xB3, 0xD0, 0xFD, 0xFD, 0x8C, 0xF7, 0x5D, 0x6B, 0x27,
      0x5B, 0xEF, 0x13, 0x69, 0x4F, 0xB9, 0xDE, 0x9C, 0xEC, 0x0C, 0x87, 0xDC, 0xEB, 0x8B, 0x91, 0x50,
      0xB5, 0x53, 0xB7, 0x21, 0x7D, 0x22, 0xC9, 0xEA, 0xCA, 0x7F, 0x01, 0x79, 0x61, 0xC1, 0x33, 0xAD,
      0xB3, 0xAF, 0x22, 0x44, 0xCE, 0x3D, 0x0C, 0x77, 0xD4, 0x1F, 0x77, 0x58, 0x5C, 0x12, 0xAC, 0x57,
      0x23, 0xBE, 0xCF, 0xA7, 0xE5, 0x47, 0x2D, 0x49, 0x71, 0xE3, 0x46, 0xF4, 0xA7, 0x2F, 0x1D, 0x65,
      0xA8, 0xE6, 0x25, 0x54, 0xB7, 0x00, 0xF1, 0x7A, 0x3E, 0x8D, 0xC2, 0x0B, 0xD2, 0x1E, 0xF1, 0xAA,
      0x0E, 0x36, 0x58, 0x32, 0x2B, 0xEA, 0xAE, 0xA9, 0x31, 0x70, 0x03, 0xB8, 0xDD, 0xB7, 0x2F, 0xFD,
      0xFA, 0x08, 0x34, 0x97, 0x41, 0x52, 0xB9, 0x5B, 0xAD, 0xE2, 0xDF, 0x83, 0xD7, 0xEE, 0xC4, 0x55
    },
    // "Ciphertext || Tag" length
    144
  },
  // Test vector #6
  {
    // key
    { 0xB8, 0x45, 0x3A, 0x72, 0x80, 0x60, 0xF8, 0xD5, 0x17, 0xBA, 0xCE, 0xED, 0x38, 0x29, 0xF4, 0xD9 },
    // nonce
    { 0xCF, 0xBC, 0xE6, 0x9C, 0x88, 0x4D, 0x5B, 0xAB, 0xBB, 0xAA, 0xF9, 0xA3 },
    // plaintext
    { 0x1D, 0x76, 0xBD, 0xF0, 0x62, 0x6A, 0x71, 0x34, 0xBE, 0xB2, 0x8A, 0x90, 0xD5, 0x4E, 0xD7, 0x79,
      0x6C, 0x4C, 0x95, 0x35, 0x46, 0x5C, 0x09, 0x0C, 0x4B, 0x58, 0x3A, 0x8C, 0xD4, 0x0E, 0xF0, 0xA3,
      0x86, 0x4E, 0x7C, 0x07, 0xCC, 0xAE, 0xD1, 0x40, 0xDF, 0x6B, 0x9D, 0x73, 0x23, 0x4E, 0x65, 0x2F,
      0x8F, 0xF4, 0x25, 0xFC, 0x20, 0x6F, 0x63, 0xDF, 0xAB, 0x7D, 0xCD, 0xBB, 0xBE, 0x30, 0x41, 0x1A,
      0x14, 0x69, 0x5E, 0x72, 0xA2, 0xBD, 0x8C, 0x4B, 0xFB, 0x1D, 0x69, 0x91, 0xDB, 0x4F, 0x99, 0xEE,
      0xA7, 0x43, 0x5E, 0x55, 0x26, 0x1E, 0x37, 0xFD, 0xF5, 0x7C, 0xE7, 0x9D, 0xF7, 0x25, 0xC8, 0x10,
      0x19, 0x2F, 0x5E, 0x6E, 0x03, 0x31, 0xED, 0x62, 0xEB, 0x8A, 0x72, 0xC5, 0xB9, 0xDA, 0x6D, 0xFD,
      0x97, 0x48, 0xB3, 0xD1, 0x68, 0xA6, 0x9B, 0xAB, 0x33, 0x31, 0x9E, 0xFD, 0x1E, 0x84, 0xEF, 0x25,
      0x70
    },
    // plaintext length
    129,
    // Ciphertext || Tag
    { 0x34, 0xCA, 0x71, 0xD8, 0xD6, 0x7C, 0x12, 0xA0, 0x58, 0x4C, 0x01, 0x88, 0xE8, 0xC3, 0xD0, 0x0D,
      0x6F, 0x51, 0x98, 0xEA, 0x4F, 0x07, 0xEC, 0x1E, 0xB7, 0xFA, 0x58, 0x2E, 0xC7, 0x8C, 0x25, 0x3E,
      0x0A, 0xAD, 0xB2, 0x66, 0x10, 0x43, 0x2D, 0x9C, 0xC1, 0xEC, 0xAF, 0x54, 0x71, 0xCC, 0xF7, 0x4D,
      0xD7, 0xB6, 0x98, 0x62, 0xF3, 0x21, 0xE6, 0x51, 0x01, 0xDB, 0xDA, 0x3A, 0x46, 0xB0, 0x44, 0xE0,
      0xFC, 0x9C, 0x13, 0xEE, 0xB7, 0xE0, 0xDF, 0xE3, 0x3B, 0xC9, 0x9F, 0x5E, 0xFD, 0xA2, 0x4A, 0x20,
      0x31, 0xDA, 0xB4, 0x72, 0x7C, 0x7B, 0x1B, 0x87, 0x42, 0x0E, 0x11, 0xF2, 0xFD, 0xCE, 0x04, 0x8B,
      0xC0, 0xEC, 0x86, 0x2D, 0x49, 0x8E, 0xDD, 0x1B, 0x36, 0xF7, 0xBA, 0x83, 0xE5, 0x9E, 0xF3, 0x49,
      0xA4, 0x44, 0x19, 0x4A, 0x4B, 0x1F, 0x68, 0xEA, 0x5A, 0xA0, 0x51, 0x96, 0x18, 0x7E, 0xD8, 0xED,
      0x68, 0x48, 0x26, 0xC0, 0xC3, 0x56, 0xA9, 0xB8, 0xED, 0xA5, 0x5B, 0xD9, 0x1C, 0x2B, 0xA1, 0x02,
      0x2B
    },
    // "Ciphertext || Tag" length
    145
  }
};


/*
 * AES-CCM-128 암호화 동작이 정상적으로 수행되는 것을 확인한다.
 */
TEST(AES_CCM_128, ENCRYPT_NORMAL)
{
  ASSERT_EQ(Dot2_Init(kDot2LogLevel_Err, kDot2SigningParamsPrecomputeInterval_Default, "/dev/urandom", kDot2LeapSeconds_Default), kDot2Result_Success);

  uint8_t *encrypted;
  int ret;
  struct Dot2AESKey key{};
  struct Dot2AESNonce nonce{};
  for (int i = 0; i < TEST_VECTOR_NUM; i++) {
    memcpy(key.octs, tv[i].key, sizeof(key.octs));
    memcpy(nonce.octs, tv[i].nonce, sizeof(nonce.octs));
    encrypted = dot2_AES_CCM_128_Encrypt(tv[i].plaintext, tv[i].plaintext_len, &key, &nonce, &ret);
    ASSERT_TRUE(encrypted != nullptr);
    ASSERT_EQ(ret, (int)tv[i].c_t_len);
    ASSERT_TRUE(0 == memcmp(encrypted, tv[i].c_t, tv[i].c_t_len));
    free(encrypted);
  }

  Dot2_Release();
}


/*
 * NULL 데이터 전달 시, AES-CCM-128 암호화 동작이 실패하는 것을 확인한다.
 */
TEST(AES_CCM_128, ENCRYPT_NULL_DATA)
{
  ASSERT_EQ(Dot2_Init(kDot2LogLevel_Err, kDot2SigningParamsPrecomputeInterval_Default, "/dev/urandom", kDot2LeapSeconds_Default), kDot2Result_Success);

  uint8_t *encrypted;
  int ret;

  struct Dot2AESKey key{};
  struct Dot2AESNonce nonce{};
  memcpy(key.octs, tv[0].key, sizeof(key.octs));
  memcpy(nonce.octs, tv[0].nonce, sizeof(nonce.octs));

  encrypted = dot2_AES_CCM_128_Encrypt(nullptr, tv[0].plaintext_len, &key, &nonce, &ret);
  ASSERT_TRUE(encrypted == nullptr);
  ASSERT_EQ(ret, -kDot2Result_FailAESEncrypt);

  encrypted = dot2_AES_CCM_128_Encrypt(tv[0].plaintext, tv[0].plaintext_len, nullptr, &nonce, &ret);
  ASSERT_TRUE(encrypted == nullptr);
  ASSERT_EQ(ret, -kDot2Result_FailAESEncrypt);

  encrypted = dot2_AES_CCM_128_Encrypt(tv[0].plaintext, tv[0].plaintext_len, &key, nullptr, &ret);
  ASSERT_TRUE(encrypted == nullptr);
  ASSERT_EQ(ret, -kDot2Result_FailAESEncrypt);

  Dot2_Release();
}


/*
 * AES-CCM-128 복호화 동작이 정상적으로 수행되는 것을 확인한다.
 */
TEST(AES_CCM_128, DECRYPT_NORMAL)
{
  ASSERT_EQ(Dot2_Init(kDot2LogLevel_Err, kDot2SigningParamsPrecomputeInterval_Default, "/dev/urandom", kDot2LeapSeconds_Default), kDot2Result_Success);

  uint8_t *decrypted;
  int ret;
  struct Dot2AESKey key{};
  struct Dot2AESNonce nonce{};
  for (int i = 0; i < TEST_VECTOR_NUM; i++) {
    memcpy(key.octs, tv[i].key, sizeof(key.octs));
    memcpy(nonce.octs, tv[i].nonce, sizeof(nonce.octs));
    decrypted = dot2_AES_CCM_128_Decrypt(tv[i].c_t, tv[i].c_t_len, &key, &nonce, &ret);
    ASSERT_TRUE(decrypted != nullptr);
    ASSERT_EQ(ret, (int)tv[i].plaintext_len);
    ASSERT_TRUE(0 == memcmp(decrypted, tv[i].plaintext, tv[i].plaintext_len));
    free(decrypted);
  }

  Dot2_Release();
}


/*
 * Null 데이터 전달 시, AES-CCM-128 복호화 동작이 실패하는 것을 확인한다.
 */
TEST(AES_CCM_128, DECRYPT_NULL_DATA)
{
  ASSERT_EQ(Dot2_Init(kDot2LogLevel_Err, kDot2SigningParamsPrecomputeInterval_Default, "/dev/urandom", kDot2LeapSeconds_Default), kDot2Result_Success);

  uint8_t *decrypted;
  int ret;

  struct Dot2AESKey key{};
  struct Dot2AESNonce nonce{};
  memcpy(key.octs, tv[0].key, sizeof(key.octs));
  memcpy(nonce.octs, tv[0].nonce, sizeof(nonce.octs));

  decrypted = dot2_AES_CCM_128_Decrypt(tv[0].c_t, tv[0].c_t_len, nullptr, &nonce, &ret);
  ASSERT_TRUE(decrypted == nullptr);
  ASSERT_EQ(ret, -kDot2Result_FailAESDecrypt);

  decrypted = dot2_AES_CCM_128_Decrypt(tv[0].c_t, tv[0].c_t_len, &key, nullptr, &ret);
  ASSERT_TRUE(decrypted == nullptr);
  ASSERT_EQ(ret, -kDot2Result_FailAESDecrypt);

  Dot2_Release();
}


/*
 * 암호문 변조 시 AES-CCM-128 복호화가 실패하는 것을 확인한다.
 */
TEST(AES_CCM_128, DECRYPT_ALTERED_CIPHERTEXT)
{
  ASSERT_EQ(Dot2_Init(kDot2LogLevel_Err, kDot2SigningParamsPrecomputeInterval_Default, "/dev/urandom", kDot2LeapSeconds_Default), kDot2Result_Success);

  uint8_t *decrypted;
  int ret;
  uint8_t ciphertext_and_tag[TEST_TEXT_MAX_LEN];
  struct Dot2AESKey key{};
  struct Dot2AESNonce nonce{};
  for (int i = 0; i < TEST_VECTOR_NUM; i++) {
    memcpy(key.octs, tv[i].key, sizeof(key.octs));
    memcpy(nonce.octs, tv[i].nonce, sizeof(nonce.octs));
    memcpy(ciphertext_and_tag, tv[i].c_t, tv[i].c_t_len);
    ciphertext_and_tag[0]++; // 암호문의 첫 바이트 변조
    decrypted = dot2_AES_CCM_128_Decrypt(ciphertext_and_tag, tv[i].c_t_len, &key, &nonce, &ret);
    ASSERT_TRUE(decrypted == nullptr);
    ASSERT_EQ(ret, -kDot2Result_FailAESDecrypt);
  }

  Dot2_Release();
}


/*
 * Tag 변조 시 AES-CCM-128 복호화가 실패하는 것을 확인한다.
 */
TEST(AES_CCM_128, DECRYPT_ALTERED_TAG)
{
  ASSERT_EQ(Dot2_Init(kDot2LogLevel_Err, kDot2SigningParamsPrecomputeInterval_Default, "/dev/urandom", kDot2LeapSeconds_Default), kDot2Result_Success);

  uint8_t *decrypted;
  int ret;
  uint8_t ciphertext_and_tag[TEST_TEXT_MAX_LEN];
  struct Dot2AESKey key{};
  struct Dot2AESNonce nonce{};
  for (int i = 0; i < TEST_VECTOR_NUM; i++) {
    memcpy(key.octs, tv[i].key, sizeof(key.octs));
    memcpy(nonce.octs, tv[i].nonce, sizeof(nonce.octs));
    memcpy(ciphertext_and_tag, tv[i].c_t, tv[i].c_t_len);
    ciphertext_and_tag[tv[i].c_t_len - 1]++; // Tag의 마지막 바이트 변조
    decrypted = dot2_AES_CCM_128_Decrypt(ciphertext_and_tag, tv[i].c_t_len, &key, &nonce, &ret);
    ASSERT_TRUE(decrypted == nullptr);
    ASSERT_EQ(ret, -kDot2Result_FailAESDecrypt);
  }

  Dot2_Release();
}


/*
 * Key 변조 시 AES-CCM-128 복호화가 실패하는 것을 확인한다.
 */
TEST(AES_CCM_128, DECRYPT_ALTERED_KEY)
{
  ASSERT_EQ(Dot2_Init(kDot2LogLevel_Err, kDot2SigningParamsPrecomputeInterval_Default, "/dev/urandom", kDot2LeapSeconds_Default), kDot2Result_Success);

  uint8_t *decrypted;
  int ret;
  struct Dot2AESKey key{};
  struct Dot2AESNonce nonce{};
  for (int i = 0; i < TEST_VECTOR_NUM; i++) {
    memcpy(key.octs, tv[i].key, sizeof(key.octs));
    memcpy(nonce.octs, tv[i].nonce, sizeof(nonce.octs));
    key.octs[0]++; // 키의 첫 바이트 변조
    decrypted = dot2_AES_CCM_128_Decrypt(tv[i].c_t, tv[i].c_t_len, &key, &nonce, &ret);
    ASSERT_TRUE(decrypted == nullptr);
    ASSERT_EQ(ret, -kDot2Result_FailAESDecrypt);
  }

  Dot2_Release();
}


/*
 * Nonce 변조 시 AES-CCM-128 복호화가 실패하는 것을 확인한다.
 */
TEST(AES_CCM_128, DECRYPT_ALTERED_NONCE)
{
  ASSERT_EQ(Dot2_Init(kDot2LogLevel_Err, kDot2SigningParamsPrecomputeInterval_Default, "/dev/urandom", kDot2LeapSeconds_Default), kDot2Result_Success);

  uint8_t *decrypted;
  int ret;
  struct Dot2AESKey key{};
  struct Dot2AESNonce nonce{};
  for (int i = 0; i < TEST_VECTOR_NUM; i++) {
    memcpy(key.octs, tv[i].key, sizeof(key.octs));
    memcpy(nonce.octs, tv[i].nonce, sizeof(nonce.octs));
    nonce.octs[0]++; // Nonce의 첫 바이트 변조
    decrypted = dot2_AES_CCM_128_Decrypt(tv[i].c_t, tv[i].c_t_len, &key, &nonce, &ret);
    ASSERT_TRUE(decrypted == nullptr);
    ASSERT_EQ(ret, -kDot2Result_FailAESDecrypt);
  }

  Dot2_Release();
}
