/** 
 * @file
 * @brief 서명 검증 단위테스트
 * @date 2020-05-02
 * @author gyun
 */


// 라이브러리 헤더 파일
#include "dot2/dot2.h"

// 라이브러리 내부 헤더 파일
#include "dot2-internal.h"
#include "sec-executer/openssl/dot2-openssl.h"

// 테스트 헤더 파일
#include "gtest/gtest.h"
#include "../../test-vectors/test-vectors.h"
#include "../../test-common-funcs/test-common-funcs.h"


/**
 * @brief 압축형식 서명검증 테스트
 */
TEST(SIGN_VERIFY, COMPRESSED)
{
  ASSERT_EQ(Dot2_Init(kDot2LogLevel_Err, kDot2SigningParamsPrecomputeInterval_Default, "/dev/urandom", kDot2LeapSeconds_Default), kDot2Result_Success);

#define TEST_VECTOR_NUM 5
  int ret;
  uint8_t tbs[TEST_VECTOR_NUM][kDot2CertSize_Max];
  size_t tbs_size[TEST_VECTOR_NUM];
  struct Dot2SHA256 signer_h[TEST_VECTOR_NUM];
  struct Dot2ECPublicKey pub_key[TEST_VECTOR_NUM];
  EC_KEY *eck_pub_key[TEST_VECTOR_NUM];
  struct Dot2Signature sign[TEST_VECTOR_NUM];

  /*
   * 준비 : 서명검증 입력 정보를 설정한다.
   */
  {
    // 테스트벡터 1
    int idx = 0;
    tbs_size[idx] = g_tv_comp_sign_tbs_size_1;
    ASSERT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_comp_sign_tbs_1, tbs[idx]), (int)tbs_size[idx]);
    ASSERT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_comp_sign_signer_h_1, signer_h[idx].octs), DOT2_SHA_256_LEN);
    ASSERT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_comp_sign_signer_pub_key_1, pub_key[idx].u.octs), DOT2_EC_256_COMPRESSED_PUB_KEY_LEN);
    ASSERT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_comp_sign_R_1, sign[idx].R_r.u.octs), DOT2_EC_256_COMPRESSED_SIGN_R_LEN);
    ASSERT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_comp_sign_s_1, sign[idx].s), DOT2_EC_256_SIGN_S_LEN);
    eck_pub_key[idx] = dot2_ossl_MakeECKEYfromPubKeyOcts(&pub_key[idx], &ret);
    ASSERT_TRUE(eck_pub_key[idx] != nullptr);
    // 테스트벡터 2
    idx++;
    tbs_size[idx] = g_tv_comp_sign_tbs_size_2;
    ASSERT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_comp_sign_tbs_2, tbs[idx]), (int)tbs_size[idx]);
    ASSERT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_comp_sign_signer_h_2, signer_h[idx].octs), DOT2_SHA_256_LEN);
    ASSERT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_comp_sign_signer_pub_key_2, pub_key[idx].u.octs), DOT2_EC_256_COMPRESSED_PUB_KEY_LEN);
    ASSERT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_comp_sign_R_2, sign[idx].R_r.u.octs), DOT2_EC_256_COMPRESSED_SIGN_R_LEN);
    ASSERT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_comp_sign_s_2, sign[idx].s), DOT2_EC_256_SIGN_S_LEN);
    eck_pub_key[idx] = dot2_ossl_MakeECKEYfromPubKeyOcts(&pub_key[idx], &ret);
    ASSERT_TRUE(eck_pub_key[idx] != nullptr);
    // 테스트벡터 3
    idx++;
    tbs_size[idx] = g_tv_comp_sign_tbs_size_3;
    ASSERT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_comp_sign_tbs_3, tbs[idx]), (int)tbs_size[idx]);
    ASSERT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_comp_sign_signer_h_3, signer_h[idx].octs), DOT2_SHA_256_LEN);
    ASSERT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_comp_sign_signer_pub_key_3, pub_key[idx].u.octs), DOT2_EC_256_COMPRESSED_PUB_KEY_LEN);
    ASSERT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_comp_sign_R_3, sign[idx].R_r.u.octs), DOT2_EC_256_COMPRESSED_SIGN_R_LEN);
    ASSERT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_comp_sign_s_3, sign[idx].s), DOT2_EC_256_SIGN_S_LEN);
    eck_pub_key[idx] = dot2_ossl_MakeECKEYfromPubKeyOcts(&pub_key[idx], &ret);
    ASSERT_TRUE(eck_pub_key[idx] != nullptr);
    // 테스트벡터 4
    idx++;
    tbs_size[idx] = g_tv_comp_sign_tbs_size_4;
    ASSERT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_comp_sign_tbs_4, tbs[idx]), (int)tbs_size[idx]);
    ASSERT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_comp_sign_signer_h_4, signer_h[idx].octs), DOT2_SHA_256_LEN);
    ASSERT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_comp_sign_signer_pub_key_4, pub_key[idx].u.octs), DOT2_EC_256_COMPRESSED_PUB_KEY_LEN);
    ASSERT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_comp_sign_R_4, sign[idx].R_r.u.octs), DOT2_EC_256_COMPRESSED_SIGN_R_LEN);
    ASSERT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_comp_sign_s_4, sign[idx].s), DOT2_EC_256_SIGN_S_LEN);
    eck_pub_key[idx] = dot2_ossl_MakeECKEYfromPubKeyOcts(&pub_key[idx], &ret);
    ASSERT_TRUE(eck_pub_key[idx] != nullptr);
    // 테스트벡터 5
    idx++;
    tbs_size[idx] = g_tv_comp_sign_tbs_size_5;
    ASSERT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_comp_sign_tbs_5, tbs[idx]), (int)tbs_size[idx]);
    ASSERT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_comp_sign_signer_h_5, signer_h[idx].octs), DOT2_SHA_256_LEN);
    ASSERT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_comp_sign_signer_pub_key_5, pub_key[idx].u.octs), DOT2_EC_256_COMPRESSED_PUB_KEY_LEN);
    ASSERT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_comp_sign_R_5, sign[idx].R_r.u.octs), DOT2_EC_256_COMPRESSED_SIGN_R_LEN);
    ASSERT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_comp_sign_s_5, sign[idx].s), DOT2_EC_256_SIGN_S_LEN);
    eck_pub_key[idx] = dot2_ossl_MakeECKEYfromPubKeyOcts(&pub_key[idx], &ret);
    ASSERT_TRUE(eck_pub_key[idx] != nullptr);
  }

  /*
   * 테스트 : 서명 검증이 성공하는 것을 확인한다.
   */
  {
    ASSERT_EQ(dot2_ossl_VerifySignature_1(tbs[0], tbs_size[0], &signer_h[0], eck_pub_key[0], &sign[0]), kDot2Result_Success);
    ASSERT_EQ(dot2_ossl_VerifySignature_1(tbs[1], tbs_size[1], &signer_h[1], eck_pub_key[1], &sign[1]), kDot2Result_Success);
    ASSERT_EQ(dot2_ossl_VerifySignature_1(tbs[2], tbs_size[2], &signer_h[2], eck_pub_key[2], &sign[2]), kDot2Result_Success);
    ASSERT_EQ(dot2_ossl_VerifySignature_1(tbs[3], tbs_size[3], &signer_h[3], eck_pub_key[3], &sign[3]), kDot2Result_Success);
    ASSERT_EQ(dot2_ossl_VerifySignature_1(tbs[4], tbs_size[4], &signer_h[4], eck_pub_key[4], &sign[4]), kDot2Result_Success);
  }

  /*
   * 테스트 : 데이터 변조 시 검증이 실패하는 것을 확인한다.
   */
  {
    tbs[0][0]++; // TBS 변조
    ASSERT_EQ(dot2_ossl_VerifySignature_1(tbs[0], tbs_size[0], &signer_h[0], eck_pub_key[0], &sign[0]), -kDot2Result_SignatureVerificationFailed);
    tbs[0][0]--; // TBS 원상복구

    pub_key[0].u.point.u.xy.x[1]++; // 서명자 공개키 변조
    EC_KEY *eck_pub_key_invalid = dot2_ossl_MakeECKEYfromPubKeyOcts(&pub_key[0], &ret);
    ASSERT_TRUE(eck_pub_key_invalid != nullptr);
    ASSERT_EQ(dot2_ossl_VerifySignature_1(tbs[0], tbs_size[0], &signer_h[0], eck_pub_key_invalid, &sign[0]), -kDot2Result_SignatureVerificationFailed);
    EC_KEY_free(eck_pub_key_invalid);

    signer_h[0].octs[0]++; // 서명자 해시 변조
    ASSERT_EQ(dot2_ossl_VerifySignature_1(tbs[0], tbs_size[0], &signer_h[0], eck_pub_key[0], &sign[0]), -kDot2Result_SignatureVerificationFailed);
    signer_h[0].octs[0]--; // 서명자  해시 원상복구

    sign[0].R_r.u.point.u.xy.x[0]++; // 서명 r 변조
    ASSERT_EQ(dot2_ossl_VerifySignature_1(tbs[0], tbs_size[0], &signer_h[0], eck_pub_key[0], &sign[0]), -kDot2Result_SignatureVerificationFailed);
    sign[0].R_r.u.point.u.xy.x[0]--; // 서명 r 원상복구

    sign[0].s[0]++; // 서명 s 변조
    ASSERT_EQ(dot2_ossl_VerifySignature_1(tbs[0], tbs_size[0], &signer_h[0], eck_pub_key[0], &sign[0]), -kDot2Result_SignatureVerificationFailed);
    sign[0].s[0]--; // 서명 s 원상 복구
  }

  EC_KEY_free(eck_pub_key[0]);
  EC_KEY_free(eck_pub_key[1]);
  EC_KEY_free(eck_pub_key[2]);
  EC_KEY_free(eck_pub_key[3]);
  EC_KEY_free(eck_pub_key[4]);

  Dot2_Release();
#undef TEST_VECTOR_NUM
}


/**
 * @brief 비압축형식 서명검증 테스트
 */
TEST(SIGN_VERIFY, UNCOMPRESSED)
{
  ASSERT_EQ(Dot2_Init(kDot2LogLevel_Err, kDot2SigningParamsPrecomputeInterval_Default, "/dev/urandom", kDot2LeapSeconds_Default), kDot2Result_Success);

#define TEST_VECTOR_NUM 5
  int ret;
  uint8_t tbs[TEST_VECTOR_NUM][kDot2CertSize_Max];
  size_t tbs_size[TEST_VECTOR_NUM];
  struct Dot2SHA256 signer_h[TEST_VECTOR_NUM];
  struct Dot2ECPublicKey pub_key[TEST_VECTOR_NUM];
  EC_KEY *eck_pub_key[TEST_VECTOR_NUM];
  struct Dot2Signature sign[TEST_VECTOR_NUM];

  /*
   * 준비 : 서명검증 입력 정보를 설정한다.
   */
  {
    // 테스트벡터 1
    int idx = 0;
    tbs_size[idx] = g_tv_uncomp_sign_tbs_size_1;
    ASSERT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_uncomp_sign_tbs_1, tbs[idx]), (int)tbs_size[idx]);
    ASSERT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_uncomp_sign_signer_h_1, signer_h[idx].octs), DOT2_SHA_256_LEN);
    ASSERT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_uncomp_sign_signer_pub_key_1, pub_key[idx].u.octs), DOT2_EC_256_COMPRESSED_PUB_KEY_LEN);
    ASSERT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_uncomp_sign_R_1, sign[idx].R_r.u.octs), DOT2_EC_256_SIGN_R_LEN);
    ASSERT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_uncomp_sign_s_1, sign[idx].s), DOT2_EC_256_SIGN_S_LEN);
    eck_pub_key[idx] = dot2_ossl_MakeECKEYfromPubKeyOcts(&pub_key[idx], &ret);
    ASSERT_TRUE(eck_pub_key[idx] != nullptr);
    // 테스트벡터 2
    idx++;
    tbs_size[idx] = g_tv_uncomp_sign_tbs_size_2;
    ASSERT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_uncomp_sign_tbs_2, tbs[idx]), (int)tbs_size[idx]);
    ASSERT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_uncomp_sign_signer_h_2, signer_h[idx].octs), DOT2_SHA_256_LEN);
    ASSERT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_uncomp_sign_signer_pub_key_2, pub_key[idx].u.octs), DOT2_EC_256_COMPRESSED_PUB_KEY_LEN);
    ASSERT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_uncomp_sign_R_2, sign[idx].R_r.u.octs), DOT2_EC_256_SIGN_R_LEN);
    ASSERT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_uncomp_sign_s_2, sign[idx].s), DOT2_EC_256_SIGN_S_LEN);
    eck_pub_key[idx] = dot2_ossl_MakeECKEYfromPubKeyOcts(&pub_key[idx], &ret);
    ASSERT_TRUE(eck_pub_key[idx] != nullptr);
    // 테스트벡터 3
    idx++;
    tbs_size[idx] = g_tv_uncomp_sign_tbs_size_3;
    ASSERT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_uncomp_sign_tbs_3, tbs[idx]), (int)tbs_size[idx]);
    ASSERT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_uncomp_sign_signer_h_3, signer_h[idx].octs), DOT2_SHA_256_LEN);
    ASSERT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_uncomp_sign_signer_pub_key_3, pub_key[idx].u.octs), DOT2_EC_256_COMPRESSED_PUB_KEY_LEN);
    ASSERT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_uncomp_sign_R_3, sign[idx].R_r.u.octs), DOT2_EC_256_SIGN_R_LEN);
    ASSERT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_uncomp_sign_s_3, sign[idx].s), DOT2_EC_256_SIGN_S_LEN);
    eck_pub_key[idx] = dot2_ossl_MakeECKEYfromPubKeyOcts(&pub_key[idx], &ret);
    ASSERT_TRUE(eck_pub_key[idx] != nullptr);
    // 테스트벡터 4
    idx++;
    tbs_size[idx] = g_tv_uncomp_sign_tbs_size_4;
    ASSERT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_uncomp_sign_tbs_4, tbs[idx]), (int)tbs_size[idx]);
    ASSERT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_uncomp_sign_signer_h_4, signer_h[idx].octs), DOT2_SHA_256_LEN);
    ASSERT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_uncomp_sign_signer_pub_key_4, pub_key[idx].u.octs), DOT2_EC_256_COMPRESSED_PUB_KEY_LEN);
    ASSERT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_uncomp_sign_R_4, sign[idx].R_r.u.octs), DOT2_EC_256_SIGN_R_LEN);
    ASSERT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_uncomp_sign_s_4, sign[idx].s), DOT2_EC_256_SIGN_S_LEN);
    eck_pub_key[idx] = dot2_ossl_MakeECKEYfromPubKeyOcts(&pub_key[idx], &ret);
    ASSERT_TRUE(eck_pub_key[idx] != nullptr);
    // 테스트벡터 5
    idx++;
    tbs_size[idx] = g_tv_uncomp_sign_tbs_size_5;
    ASSERT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_uncomp_sign_tbs_5, tbs[idx]), (int)tbs_size[idx]);
    ASSERT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_uncomp_sign_signer_h_5, signer_h[idx].octs), DOT2_SHA_256_LEN);
    ASSERT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_uncomp_sign_signer_pub_key_5, pub_key[idx].u.octs), DOT2_EC_256_COMPRESSED_PUB_KEY_LEN);
    ASSERT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_uncomp_sign_R_5, sign[idx].R_r.u.octs), DOT2_EC_256_SIGN_R_LEN);
    ASSERT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_uncomp_sign_s_5, sign[idx].s), DOT2_EC_256_SIGN_S_LEN);
    eck_pub_key[idx] = dot2_ossl_MakeECKEYfromPubKeyOcts(&pub_key[idx], &ret);
    ASSERT_TRUE(eck_pub_key[idx] != nullptr);
  }

  /*
   * 테스트 : 서명 검증이 성공하는 것을 확인한다.
   */
  {
    ASSERT_EQ(dot2_ossl_VerifySignature_1(tbs[0], tbs_size[0], &signer_h[0], eck_pub_key[0], &sign[0]), kDot2Result_Success);
    ASSERT_EQ(dot2_ossl_VerifySignature_1(tbs[1], tbs_size[1], &signer_h[1], eck_pub_key[1], &sign[1]), kDot2Result_Success);
    ASSERT_EQ(dot2_ossl_VerifySignature_1(tbs[2], tbs_size[2], &signer_h[2], eck_pub_key[2], &sign[2]), kDot2Result_Success);
    ASSERT_EQ(dot2_ossl_VerifySignature_1(tbs[3], tbs_size[3], &signer_h[3], eck_pub_key[3], &sign[3]), kDot2Result_Success);
    ASSERT_EQ(dot2_ossl_VerifySignature_1(tbs[4], tbs_size[4], &signer_h[4], eck_pub_key[4], &sign[4]), kDot2Result_Success);
  }

  /*
   * 테스트 : 데이터 변조 시 검증이 실패하는 것을 확인한다.
   */
  {
    tbs[0][0]++; // TBS 변조
    ASSERT_EQ(dot2_ossl_VerifySignature_1(tbs[0], tbs_size[0], &signer_h[0], eck_pub_key[0], &sign[0]), -kDot2Result_SignatureVerificationFailed);
    tbs[0][0]--; // TBS 원상복구

    pub_key[0].u.point.u.xy.x[1]++; // 서명자 공개키 변조
    EC_KEY *eck_pub_key_invalid = dot2_ossl_MakeECKEYfromPubKeyOcts(&pub_key[0], &ret);
    ASSERT_TRUE(eck_pub_key_invalid != nullptr);
    ASSERT_EQ(dot2_ossl_VerifySignature_1(tbs[0], tbs_size[0], &signer_h[0], eck_pub_key_invalid, &sign[0]), -kDot2Result_SignatureVerificationFailed);
    EC_KEY_free(eck_pub_key_invalid);

    signer_h[0].octs[0]++; // 서명자 해시 변조
    ASSERT_EQ(dot2_ossl_VerifySignature_1(tbs[0], tbs_size[0], &signer_h[0], eck_pub_key[0], &sign[0]), -kDot2Result_SignatureVerificationFailed);
    signer_h[0].octs[0]--; // 서명자  해시 원상복구

    sign[0].R_r.u.point.u.xy.x[0]++; // 서명 r 변조
    ASSERT_EQ(dot2_ossl_VerifySignature_1(tbs[0], tbs_size[0], &signer_h[0], eck_pub_key[0], &sign[0]), -kDot2Result_SignatureVerificationFailed);
    sign[0].R_r.u.point.u.xy.x[0]--; // 서명 r 원상복구

    sign[0].s[0]++; // 서명 s 변조
    ASSERT_EQ(dot2_ossl_VerifySignature_1(tbs[0], tbs_size[0], &signer_h[0], eck_pub_key[0], &sign[0]), -kDot2Result_SignatureVerificationFailed);
    sign[0].s[0]--; // 서명 s 원상 복구
  }

  EC_KEY_free(eck_pub_key[0]);
  EC_KEY_free(eck_pub_key[1]);
  EC_KEY_free(eck_pub_key[2]);
  EC_KEY_free(eck_pub_key[3]);
  EC_KEY_free(eck_pub_key[4]);

  Dot2_Release();
#undef TEST_VECTOR_NUM
}


/**
 * @brief X-only 형식 서명검증 테스트
 */
TEST(SIGN_VERIFY, X_ONLY)
{
  ASSERT_EQ(Dot2_Init(kDot2LogLevel_Err, kDot2SigningParamsPrecomputeInterval_Default, "/dev/urandom", kDot2LeapSeconds_Default), kDot2Result_Success);

#define TEST_VECTOR_NUM 5
  int ret;
  uint8_t tbs[TEST_VECTOR_NUM][kDot2CertSize_Max];
  size_t tbs_size[TEST_VECTOR_NUM];
  struct Dot2SHA256 signer_h[TEST_VECTOR_NUM];
  struct Dot2ECPublicKey pub_key[TEST_VECTOR_NUM];
  EC_KEY *eck_pub_key[TEST_VECTOR_NUM];
  struct Dot2Signature sign[TEST_VECTOR_NUM];

  /*
   * 준비 : 서명검증 입력 정보를 설정한다.
   */
  {
    // 테스트벡터 1 - Self-signed 인증서에 대한 테스트 벡터이므로 signer_h는 NULL이다.
    int idx = 0;
    tbs_size[idx] = g_tv_xonly_sign_tbs_size_1;
    ASSERT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_xonly_sign_tbs_1, tbs[idx]), (int)tbs_size[idx]);
    ASSERT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_xonly_sign_signer_pub_key_1, pub_key[idx].u.octs), DOT2_EC_256_COMPRESSED_PUB_KEY_LEN);
    ASSERT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_xonly_sign_R_1, sign[idx].R_r.u.octs), DOT2_EC_256_XONLY_SIGN_R_LEN);
    ASSERT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_xonly_sign_s_1, sign[idx].s), DOT2_EC_256_SIGN_S_LEN);
    eck_pub_key[idx] = dot2_ossl_MakeECKEYfromPubKeyOcts(&pub_key[idx], &ret);
    ASSERT_TRUE(eck_pub_key[idx] != nullptr);
    // 테스트벡터 2
    idx++;
    tbs_size[idx] = g_tv_xonly_sign_tbs_size_2;
    ASSERT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_xonly_sign_tbs_2, tbs[idx]), (int)tbs_size[idx]);
    ASSERT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_xonly_sign_signer_h_2, signer_h[idx].octs), DOT2_SHA_256_LEN);
    ASSERT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_xonly_sign_signer_pub_key_2, pub_key[idx].u.octs), DOT2_EC_256_COMPRESSED_PUB_KEY_LEN);
    ASSERT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_xonly_sign_R_2, sign[idx].R_r.u.octs), DOT2_EC_256_XONLY_SIGN_R_LEN);
    ASSERT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_xonly_sign_s_2, sign[idx].s), DOT2_EC_256_SIGN_S_LEN);
    eck_pub_key[idx] = dot2_ossl_MakeECKEYfromPubKeyOcts(&pub_key[idx], &ret);
    ASSERT_TRUE(eck_pub_key[idx] != nullptr);
    // 테스트벡터 3
    idx++;
    tbs_size[idx] = g_tv_xonly_sign_tbs_size_3;
    ASSERT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_xonly_sign_tbs_3, tbs[idx]), (int)tbs_size[idx]);
    ASSERT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_xonly_sign_signer_h_3, signer_h[idx].octs), DOT2_SHA_256_LEN);
    ASSERT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_xonly_sign_signer_pub_key_3, pub_key[idx].u.octs), DOT2_EC_256_COMPRESSED_PUB_KEY_LEN);
    ASSERT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_xonly_sign_R_3, sign[idx].R_r.u.octs), DOT2_EC_256_XONLY_SIGN_R_LEN);
    ASSERT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_xonly_sign_s_3, sign[idx].s), DOT2_EC_256_SIGN_S_LEN);
    eck_pub_key[idx] = dot2_ossl_MakeECKEYfromPubKeyOcts(&pub_key[idx], &ret);
    ASSERT_TRUE(eck_pub_key[idx] != nullptr);
    // 테스트벡터 4
    idx++;
    tbs_size[idx] = g_tv_xonly_sign_tbs_size_4;
    ASSERT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_xonly_sign_tbs_4, tbs[idx]), (int)tbs_size[idx]);
    ASSERT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_xonly_sign_signer_h_4, signer_h[idx].octs), DOT2_SHA_256_LEN);
    ASSERT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_xonly_sign_signer_pub_key_4, pub_key[idx].u.octs), DOT2_EC_256_COMPRESSED_PUB_KEY_LEN);
    ASSERT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_xonly_sign_R_4, sign[idx].R_r.u.octs), DOT2_EC_256_XONLY_SIGN_R_LEN);
    ASSERT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_xonly_sign_s_4, sign[idx].s), DOT2_EC_256_SIGN_S_LEN);
    eck_pub_key[idx] = dot2_ossl_MakeECKEYfromPubKeyOcts(&pub_key[idx], &ret);
    ASSERT_TRUE(eck_pub_key[idx] != nullptr);
    // 테스트벡터 5
    idx++;
    tbs_size[idx] = g_tv_xonly_sign_tbs_size_5;
    ASSERT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_xonly_sign_tbs_5, tbs[idx]), (int)tbs_size[idx]);
    ASSERT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_xonly_sign_signer_h_5, signer_h[idx].octs), DOT2_SHA_256_LEN);
    ASSERT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_xonly_sign_signer_pub_key_5, pub_key[idx].u.octs), DOT2_EC_256_COMPRESSED_PUB_KEY_LEN);
    ASSERT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_xonly_sign_R_5, sign[idx].R_r.u.octs), DOT2_EC_256_XONLY_SIGN_R_LEN);
    ASSERT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_xonly_sign_s_5, sign[idx].s), DOT2_EC_256_SIGN_S_LEN);
    eck_pub_key[idx] = dot2_ossl_MakeECKEYfromPubKeyOcts(&pub_key[idx], &ret);
    ASSERT_TRUE(eck_pub_key[idx] != nullptr);
  }

  /*
   * 테스트 : 서명 검증이 성공하는 것을 확인한다.
   *  - 테스트벡터1은 Self-signed 인증서에 대한 테스트 벡터이므로 signer_h는 NULL이다.
   */
  {
    ASSERT_EQ(dot2_ossl_VerifySignature_1(tbs[0], tbs_size[0], nullptr, eck_pub_key[0], &sign[0]), kDot2Result_Success);
    ASSERT_EQ(dot2_ossl_VerifySignature_1(tbs[1], tbs_size[1], &signer_h[1], eck_pub_key[1], &sign[1]), kDot2Result_Success);
    ASSERT_EQ(dot2_ossl_VerifySignature_1(tbs[2], tbs_size[2], &signer_h[2], eck_pub_key[2], &sign[2]), kDot2Result_Success);
    ASSERT_EQ(dot2_ossl_VerifySignature_1(tbs[3], tbs_size[3], &signer_h[3], eck_pub_key[3], &sign[3]), kDot2Result_Success);
    ASSERT_EQ(dot2_ossl_VerifySignature_1(tbs[4], tbs_size[4], &signer_h[4], eck_pub_key[4], &sign[4]), kDot2Result_Success);
  }

  /*
   * 테스트 : 데이터 변조 시 검증이 실패하는 것을 확인한다.
   */
  {
    tbs[1][0]++; // TBS 변조
    ASSERT_EQ(dot2_ossl_VerifySignature_1(tbs[1], tbs_size[1], &signer_h[1], eck_pub_key[1], &sign[1]), -kDot2Result_SignatureVerificationFailed);
    tbs[1][0]--; // TBS 원상복구

    pub_key[1].u.point.u.xy.x[1]++; // 서명자 공개키 변조
    EC_KEY *eck_pub_key_invalid = dot2_ossl_MakeECKEYfromPubKeyOcts(&pub_key[1], &ret);
    ASSERT_TRUE(eck_pub_key_invalid != nullptr);
    ASSERT_EQ(dot2_ossl_VerifySignature_1(tbs[1], tbs_size[1], &signer_h[1], eck_pub_key_invalid, &sign[1]), -kDot2Result_SignatureVerificationFailed);
    EC_KEY_free(eck_pub_key_invalid);

    signer_h[1].octs[0]++; // 서명자 해시 변조
    ASSERT_EQ(dot2_ossl_VerifySignature_1(tbs[1], tbs_size[1], &signer_h[1], eck_pub_key[1], &sign[1]), -kDot2Result_SignatureVerificationFailed);
    signer_h[1].octs[0]--; // 서명자  해시 원상복구

    sign[1].R_r.u.point.u.xy.x[0]++; // 서명 r 변조
    ASSERT_EQ(dot2_ossl_VerifySignature_1(tbs[1], tbs_size[1], &signer_h[1], eck_pub_key[1], &sign[1]), -kDot2Result_SignatureVerificationFailed);
    sign[1].R_r.u.point.u.xy.x[0]--; // 서명 r 원상복구

    sign[1].s[0]++; // 서명 s 변조
    ASSERT_EQ(dot2_ossl_VerifySignature_1(tbs[1], tbs_size[1], &signer_h[1], eck_pub_key[1], &sign[1]), -kDot2Result_SignatureVerificationFailed);
    sign[1].s[0]--; // 서명 s 원상 복구
  }

  EC_KEY_free(eck_pub_key[0]);
  EC_KEY_free(eck_pub_key[1]);
  EC_KEY_free(eck_pub_key[2]);
  EC_KEY_free(eck_pub_key[3]);
  EC_KEY_free(eck_pub_key[4]);

  Dot2_Release();
#undef TEST_VECTOR_NUM
}



#if 0


// 테스트벡터 개수
#define SAMPLE_TEST_VECTOR_NUM 5


/**
 * Compressed 형식 서명 검증에 대한 테스트벡터 모음 구조체
 */
struct FastVerificationCompressedTestVector
{
  uint8_t spdu[kDot2MsgSize_Max]; ///< 서명 SPDU (=인코딩된 Ieee1609Dot2Data)
  size_t spdu_size; ///< 서명 SPDU 의 길이
  uint8_t tbs[kDot2MsgSize_Max]; ///< 서명 SPDU 내 ToBeSignedData(서명계산에 사용되는 해시입력)
  size_t tbs_size; ///< ToBeSignedData 의 길이
  uint8_t R_compressed[DOT2_EC_256_COMPRESSED_PUB_KEY_LEN]; ///< 서명 R (압축형식)
  uint8_t s[DOT2_EC_256_KEY_LEN]; ///< 서명 s
  uint8_t signer_id[kDot2CertSize_Max]; ///< 서명을 생성한 상위인증서
  size_t signer_id_size; ///< 상위인증서 길이
  uint8_t h_signer[DOT2_SHA_256_LEN]; ///< 상위인증서 해시
  uint8_t signer_pub_key[DOT2_EC_256_PUB_KEY_LEN]; ///< 서명검증용(=상위인증서) 공개키
};


/**
 * 테스트 벡터(들)
 */
struct FastVerificationCompressedTestVector tv_compressed[SAMPLE_TEST_VECTOR_NUM] =
  {
    // 테스트 벡터#1 (condor3 에서 GHS rse-0/1AD2689A387D398D.cert 로 서명된 메시지 #1)
    {
      { // spdu
        0x03, 0x81, 0x00, 0x40, 0x03, 0x80, 0x28, 0x00, 0x14, 0x25, 0x12, 0x40, 0x00, 0x00, 0x00, 0x07,
        0x64, 0xA5, 0xF6, 0xBB, 0x26, 0x5B, 0x63, 0xC6, 0x52, 0x08, 0x7C, 0xFF, 0xFF, 0x80, 0x7F, 0xF0,
        0x01, 0x00, 0x00, 0xFD, 0xFA, 0x1F, 0xA1, 0x00, 0x7F, 0xFF, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01, 0x87, 0x81, 0x01, 0x02, 0x00, 0x03, 0x01, 0x80, 0x24, 0x80, 0xE4, 0x4B, 0xAB, 0x15, 0x6F,
        0xDA, 0x50, 0x83, 0xE3, 0x04, 0x91, 0x00, 0x03, 0x19, 0xE8, 0xD5, 0x6F, 0x84, 0x00, 0xA9, 0x83,
        0x01, 0x01, 0x80, 0x03, 0x48, 0x01, 0x01, 0x00, 0x01, 0x87, 0x81, 0x82, 0xDA, 0x96, 0xFF, 0x58,
        0x38, 0xA9, 0x04, 0x15, 0x8D, 0x72, 0x6A, 0x1E, 0xA8, 0x7D, 0x2B, 0xB5, 0xC0, 0x19, 0xB8, 0x41,
        0x7E, 0x37, 0x85, 0x61, 0x9D, 0x4F, 0x10, 0x88, 0x97, 0x04, 0x35, 0x44, 0x80, 0x03, 0x00, 0x80,
        0xB7, 0xCB, 0xD0, 0xF7, 0x9B, 0x96, 0x9B, 0xD4, 0x59, 0x81, 0x1A, 0x70, 0x63, 0x61, 0x2E, 0x70,
        0x72, 0x65, 0x70, 0x72, 0x6F, 0x64, 0x2E, 0x76, 0x32, 0x78, 0x2E, 0x69, 0x73, 0x73, 0x63, 0x6D,
        0x73, 0x2E, 0x63, 0x6F, 0x6D, 0xE3, 0x04, 0x91, 0x00, 0x02, 0x19, 0xD8, 0xD5, 0xDD, 0x86, 0x00,
        0x0A, 0x83, 0x01, 0x03, 0x80, 0x00, 0x7C, 0x80, 0x01, 0xE4, 0x80, 0x03, 0x48, 0x01, 0x01, 0x80,
        0x01, 0x23, 0x80, 0x03, 0x85, 0x00, 0x01, 0x01, 0x01, 0x00, 0x81, 0x00, 0x80, 0x82, 0xB0, 0xFF,
        0x2F, 0x29, 0x0F, 0x9E, 0x77, 0xFE, 0x94, 0x07, 0x59, 0xC8, 0x77, 0xB8, 0xF0, 0x51, 0x6D, 0x41,
        0x1E, 0x44, 0xBC, 0x58, 0xF6, 0x12, 0x61, 0x5A, 0x26, 0xD7, 0x26, 0xA0, 0xD7, 0x9F, 0x80, 0x80,
        0x82, 0xFF, 0x9B, 0x00, 0xCE, 0x42, 0xB2, 0x1A, 0xFF, 0xF2, 0xC1, 0xD3, 0xB1, 0x2A, 0x38, 0x70,
        0x91, 0xE4, 0xD2, 0xC8, 0x4B, 0x3A, 0xE2, 0x53, 0xB1, 0x12, 0x25, 0xF7, 0x72, 0x5B, 0x89, 0xF5,
        0x9A, 0x80, 0x80, 0x66, 0xCB, 0x66, 0xCD, 0xF3, 0xDD, 0xFB, 0xD2, 0x85, 0x52, 0x1E, 0x18, 0x7D,
        0xE2, 0x29, 0xEA, 0x91, 0x61, 0xC8, 0xD2, 0x4C, 0x67, 0x6B, 0x7C, 0x83, 0x7C, 0x9F, 0xBE, 0x12,
        0xA9, 0xCD, 0x20, 0xB8, 0xE4, 0x5B, 0x5E, 0x81, 0xD5, 0xA5, 0x57, 0x37, 0xFA, 0x17, 0x43, 0x9D,
        0x2F, 0x1F, 0xD3, 0xD5, 0x9A, 0xBB, 0xF2, 0x49, 0x87, 0xF6, 0x1A, 0xBE, 0x6F, 0x9F, 0xFB, 0x9F,
        0x14, 0xCF, 0xB7, 0x80, 0x82, 0x45, 0xE4, 0x56, 0x99, 0xDC, 0x35, 0x63, 0xED, 0x1D, 0x01, 0x03,
        0x4A, 0x60, 0xF0, 0x15, 0x87, 0x45, 0x5C, 0x1D, 0x61, 0x5C, 0x2C, 0x2B, 0x1B, 0xD6, 0xA9, 0x61,
        0xA7, 0x16, 0x61, 0x4D, 0xD4, 0x27, 0x45, 0x20, 0xF5, 0xC4, 0xAC, 0xA5, 0x9F, 0xD1, 0xBD, 0x00,
        0xB6, 0x3B, 0xFA, 0xAF, 0x78, 0x1B, 0xFA, 0x42, 0x3B, 0x41, 0xF4, 0x98, 0x87, 0xE5, 0x7E, 0x1F,
        0x15, 0xA7, 0x4E, 0xF0, 0x0C
      },
      405, // spdu_size
      { // tbs (서명 메시지 내에 포함된 내용)
        0x40, 0x03, 0x80, 0x28, 0x00, 0x14, 0x25, 0x12, 0x40, 0x00, 0x00, 0x00, 0x07, 0x64, 0xA5, 0xF6,
        0xBB, 0x26, 0x5B, 0x63, 0xC6, 0x52, 0x08, 0x7C, 0xFF, 0xFF, 0x80, 0x7F, 0xF0, 0x01, 0x00, 0x00,
        0xFD, 0xFA, 0x1F, 0xA1, 0x00, 0x7F, 0xFF, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x87
      },
      47, // tbs_size
      { // R_compressed (서명 메시지 내에 포함된 내용)
        kDot2ECPointForm_Compressed_y_0,
        0x45, 0xE4, 0x56, 0x99, 0xDC, 0x35, 0x63, 0xED, 0x1D, 0x01, 0x03, 0x4A, 0x60, 0xF0, 0x15, 0x87,
        0x45, 0x5C, 0x1D, 0x61, 0x5C, 0x2C, 0x2B, 0x1B, 0xD6, 0xA9, 0x61, 0xA7, 0x16, 0x61, 0x4D, 0xD4
      },
      { // s (서명 메시지 내에 포함된 내용)
        0x27, 0x45, 0x20, 0xF5, 0xC4, 0xAC, 0xA5, 0x9F, 0xD1, 0xBD, 0x00, 0xB6, 0x3B, 0xFA, 0xAF, 0x78,
        0x1B, 0xFA, 0x42, 0x3B, 0x41, 0xF4, 0x98, 0x87, 0xE5, 0x7E, 0x1F, 0x15, 0xA7, 0x4E, 0xF0, 0x0C
      },
      { // signer_id (= rse-0/1AD2689A387D398D.cert)
        0x00, 0x03, 0x01, 0x80, 0x24, 0x80, 0xE4, 0x4B, 0xAB, 0x15, 0x6F, 0xDA, 0x50, 0x83, 0xE3, 0x04,
        0x91, 0x00, 0x03, 0x19, 0xE8, 0xD5, 0x6F, 0x84, 0x00, 0xA9, 0x83, 0x01, 0x01, 0x80, 0x03, 0x48,
        0x01, 0x01, 0x00, 0x01, 0x87, 0x81, 0x82, 0xDA, 0x96, 0xFF, 0x58, 0x38, 0xA9, 0x04, 0x15, 0x8D,
        0x72, 0x6A, 0x1E, 0xA8, 0x7D, 0x2B, 0xB5, 0xC0, 0x19, 0xB8, 0x41, 0x7E, 0x37, 0x85, 0x61, 0x9D,
        0x4F, 0x10, 0x88, 0x97, 0x04, 0x35, 0x44
      },
      71, // signer_id_size
      { // h_signer
        0x02, 0x9A, 0xF2, 0xE8, 0x8E, 0x0B, 0x43, 0x94, 0x79, 0xEE, 0xCD, 0x76, 0xBE, 0x56, 0xD0, 0x4D,
        0x21, 0x18, 0xF5, 0x89, 0x98, 0x6C, 0xF5, 0xC0, 0x6C, 0x41, 0xF6, 0xBE, 0x07, 0x0E, 0xCE, 0x81
      },
      { // signer_pub_key (제공된 개인키로부터 libdot2 의 검증된 dot2_GeneratePublicKeyFromPrivateKey()를 이용하여 공개키 생성함)
        kDot2ECPointForm_Uncompressed,
        0xAF, 0x67, 0xE8, 0x7D, 0xD9, 0x09, 0x9F, 0x98, 0x8E, 0xE5, 0x14, 0xAC, 0x0F, 0xE8, 0x36, 0xA1,
        0x8C, 0x53, 0x49, 0xDC, 0xAC, 0x4A, 0x1D, 0xF1, 0x8E, 0xDD, 0x7D, 0x39, 0xAC, 0xFE, 0xA9, 0x79,
        0x0C, 0x55, 0xFD, 0xF7, 0x25, 0x66, 0x3E, 0x60, 0x64, 0x5C, 0x89, 0x94, 0xD3, 0x96, 0x3B, 0x30,
        0x36, 0x82, 0x55, 0x18, 0xB4, 0xFE, 0x2C, 0xB6, 0xEA, 0xFA, 0x8E, 0x94, 0xD4, 0x84, 0xF1, 0xC7
      }
    },
    // 테스트 벡터#2 (condor3 에서 GHS rse-0/1AD2689A387D398D.cert 로 서명된 메시지 #2)
    {
      { // spdu
        0x03, 0x81, 0x00, 0x40, 0x03, 0x80, 0x28, 0x00, 0x14, 0x25, 0x12, 0x40, 0x00, 0x00, 0x00, 0x07,
        0x64, 0xA5, 0xF6, 0xBB, 0x26, 0x5B, 0x63, 0xC6, 0x52, 0x08, 0x7C, 0xFF, 0xFF, 0x80, 0x7F, 0xF0,
        0x01, 0x00, 0x00, 0xFD, 0xFA, 0x1F, 0xA1, 0x00, 0x7F, 0xFF, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01, 0x87, 0x81, 0x01, 0x02, 0x00, 0x03, 0x01, 0x80, 0x24, 0x80, 0xE4, 0x4B, 0xAB, 0x15, 0x6F,
        0xDA, 0x50, 0x83, 0xE3, 0x04, 0x91, 0x00, 0x03, 0x19, 0xE8, 0xD5, 0x6F, 0x84, 0x00, 0xA9, 0x83,
        0x01, 0x01, 0x80, 0x03, 0x48, 0x01, 0x01, 0x00, 0x01, 0x87, 0x81, 0x82, 0xDA, 0x96, 0xFF, 0x58,
        0x38, 0xA9, 0x04, 0x15, 0x8D, 0x72, 0x6A, 0x1E, 0xA8, 0x7D, 0x2B, 0xB5, 0xC0, 0x19, 0xB8, 0x41,
        0x7E, 0x37, 0x85, 0x61, 0x9D, 0x4F, 0x10, 0x88, 0x97, 0x04, 0x35, 0x44, 0x80, 0x03, 0x00, 0x80,
        0xB7, 0xCB, 0xD0, 0xF7, 0x9B, 0x96, 0x9B, 0xD4, 0x59, 0x81, 0x1A, 0x70, 0x63, 0x61, 0x2E, 0x70,
        0x72, 0x65, 0x70, 0x72, 0x6F, 0x64, 0x2E, 0x76, 0x32, 0x78, 0x2E, 0x69, 0x73, 0x73, 0x63, 0x6D,
        0x73, 0x2E, 0x63, 0x6F, 0x6D, 0xE3, 0x04, 0x91, 0x00, 0x02, 0x19, 0xD8, 0xD5, 0xDD, 0x86, 0x00,
        0x0A, 0x83, 0x01, 0x03, 0x80, 0x00, 0x7C, 0x80, 0x01, 0xE4, 0x80, 0x03, 0x48, 0x01, 0x01, 0x80,
        0x01, 0x23, 0x80, 0x03, 0x85, 0x00, 0x01, 0x01, 0x01, 0x00, 0x81, 0x00, 0x80, 0x82, 0xB0, 0xFF,
        0x2F, 0x29, 0x0F, 0x9E, 0x77, 0xFE, 0x94, 0x07, 0x59, 0xC8, 0x77, 0xB8, 0xF0, 0x51, 0x6D, 0x41,
        0x1E, 0x44, 0xBC, 0x58, 0xF6, 0x12, 0x61, 0x5A, 0x26, 0xD7, 0x26, 0xA0, 0xD7, 0x9F, 0x80, 0x80,
        0x82, 0xFF, 0x9B, 0x00, 0xCE, 0x42, 0xB2, 0x1A, 0xFF, 0xF2, 0xC1, 0xD3, 0xB1, 0x2A, 0x38, 0x70,
        0x91, 0xE4, 0xD2, 0xC8, 0x4B, 0x3A, 0xE2, 0x53, 0xB1, 0x12, 0x25, 0xF7, 0x72, 0x5B, 0x89, 0xF5,
        0x9A, 0x80, 0x80, 0x66, 0xCB, 0x66, 0xCD, 0xF3, 0xDD, 0xFB, 0xD2, 0x85, 0x52, 0x1E, 0x18, 0x7D,
        0xE2, 0x29, 0xEA, 0x91, 0x61, 0xC8, 0xD2, 0x4C, 0x67, 0x6B, 0x7C, 0x83, 0x7C, 0x9F, 0xBE, 0x12,
        0xA9, 0xCD, 0x20, 0xB8, 0xE4, 0x5B, 0x5E, 0x81, 0xD5, 0xA5, 0x57, 0x37, 0xFA, 0x17, 0x43, 0x9D,
        0x2F, 0x1F, 0xD3, 0xD5, 0x9A, 0xBB, 0xF2, 0x49, 0x87, 0xF6, 0x1A, 0xBE, 0x6F, 0x9F, 0xFB, 0x9F,
        0x14, 0xCF, 0xB7, 0x80, 0x83, 0x6A, 0xD5, 0x0C, 0x26, 0xA0, 0xDC, 0x8C, 0x90, 0x86, 0xDC, 0xC3,
        0x7E, 0x4C, 0x44, 0x6D, 0x2D, 0x8F, 0xDF, 0x5F, 0x71, 0x28, 0xE4, 0x68, 0x43, 0xC5, 0xF2, 0xA0,
        0xDB, 0x27, 0x8A, 0x76, 0xBE, 0x04, 0x59, 0x6B, 0xF5, 0x31, 0xD5, 0xD0, 0xE8, 0x62, 0x4B, 0xC6,
        0x9F, 0x32, 0x02, 0xA3, 0x12, 0x0C, 0x6E, 0x5B, 0x27, 0xEB, 0x5C, 0x91, 0x81, 0x64, 0x01, 0xF9,
        0xA0, 0x7A, 0xAE, 0xD2, 0x90
      },
      405, // spdu_size
      { // tbs (서명 메시지 내에 포함된 내용)
        0x40, 0x03, 0x80, 0x28, 0x00, 0x14, 0x25, 0x12, 0x40, 0x00, 0x00, 0x00, 0x07, 0x64, 0xA5, 0xF6,
        0xBB, 0x26, 0x5B, 0x63, 0xC6, 0x52, 0x08, 0x7C, 0xFF, 0xFF, 0x80, 0x7F, 0xF0, 0x01, 0x00, 0x00,
        0xFD, 0xFA, 0x1F, 0xA1, 0x00, 0x7F, 0xFF, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x87
      },
      47, // tbs_size
      { // R_compressed (서명 메시지 내에 포함된 내용)
        kDot2ECPointForm_Compressed_y_1,
        0x6A, 0xD5, 0x0C, 0x26, 0xA0, 0xDC, 0x8C, 0x90, 0x86, 0xDC, 0xC3, 0x7E, 0x4C, 0x44, 0x6D, 0x2D,
        0x8F, 0xDF, 0x5F, 0x71, 0x28, 0xE4, 0x68, 0x43, 0xC5, 0xF2, 0xA0, 0xDB, 0x27, 0x8A, 0x76, 0xBE
      },
      { // s (서명 메시지 내에 포함된 내용)
        0x04, 0x59, 0x6B, 0xF5, 0x31, 0xD5, 0xD0, 0xE8, 0x62, 0x4B, 0xC6, 0x9F, 0x32, 0x02, 0xA3, 0x12,
        0x0C, 0x6E, 0x5B, 0x27, 0xEB, 0x5C, 0x91, 0x81, 0x64, 0x01, 0xF9, 0xA0, 0x7A, 0xAE, 0xD2, 0x90
      },
      { // signer_id (= rse-0/1AD2689A387D398D.cert)
        0x00, 0x03, 0x01, 0x80, 0x24, 0x80, 0xE4, 0x4B, 0xAB, 0x15, 0x6F, 0xDA, 0x50, 0x83, 0xE3, 0x04,
        0x91, 0x00, 0x03, 0x19, 0xE8, 0xD5, 0x6F, 0x84, 0x00, 0xA9, 0x83, 0x01, 0x01, 0x80, 0x03, 0x48,
        0x01, 0x01, 0x00, 0x01, 0x87, 0x81, 0x82, 0xDA, 0x96, 0xFF, 0x58, 0x38, 0xA9, 0x04, 0x15, 0x8D,
        0x72, 0x6A, 0x1E, 0xA8, 0x7D, 0x2B, 0xB5, 0xC0, 0x19, 0xB8, 0x41, 0x7E, 0x37, 0x85, 0x61, 0x9D,
        0x4F, 0x10, 0x88, 0x97, 0x04, 0x35, 0x44
      },
      71, // signer_id_size
      { // h_signer
        0x02, 0x9A, 0xF2, 0xE8, 0x8E, 0x0B, 0x43, 0x94, 0x79, 0xEE, 0xCD, 0x76, 0xBE, 0x56, 0xD0, 0x4D,
        0x21, 0x18, 0xF5, 0x89, 0x98, 0x6C, 0xF5, 0xC0, 0x6C, 0x41, 0xF6, 0xBE, 0x07, 0x0E, 0xCE, 0x81
      },
      { // signer_pub_key (제공된 개인키로부터 libdot2 의 검증된 dot2_GeneratePublicKeyFromPrivateKey()를 이용하여 공개키 생성함)
        kDot2ECPointForm_Uncompressed,
        0xAF, 0x67, 0xE8, 0x7D, 0xD9, 0x09, 0x9F, 0x98, 0x8E, 0xE5, 0x14, 0xAC, 0x0F, 0xE8, 0x36, 0xA1,
        0x8C, 0x53, 0x49, 0xDC, 0xAC, 0x4A, 0x1D, 0xF1, 0x8E, 0xDD, 0x7D, 0x39, 0xAC, 0xFE, 0xA9, 0x79,
        0x0C, 0x55, 0xFD, 0xF7, 0x25, 0x66, 0x3E, 0x60, 0x64, 0x5C, 0x89, 0x94, 0xD3, 0x96, 0x3B, 0x30,
        0x36, 0x82, 0x55, 0x18, 0xB4, 0xFE, 0x2C, 0xB6, 0xEA, 0xFA, 0x8E, 0x94, 0xD4, 0x84, 0xF1, 0xC7
      }
    },
    // 테스트 벡터#3 (Penta-security 66DF39628256B84E/rse-0/downloadFiles/b68ce89c75396849.cert 로 서명된 메시지 #1)
    {
      { // spdu
        0x03, 0x81, 0x00, 0x40, 0x03, 0x80, 0x28, 0x00, 0x14, 0x25, 0x12, 0x40, 0x00, 0x00, 0x00, 0x07,
        0x64, 0xA5, 0xF6, 0xBB, 0x26, 0x5B, 0x63, 0xC6, 0x52, 0x08, 0x7C, 0xFF, 0xFF, 0x80, 0x7F, 0xF0,
        0x01, 0x00, 0x00, 0xFD, 0xFA, 0x1F, 0xA1, 0x00, 0x7F, 0xFF, 0x10, 0x00, 0x00, 0x00, 0x00, 0x40,
        0x01, 0x87, 0x00, 0x01, 0xC6, 0x5D, 0x50, 0x68, 0x95, 0x00, 0x81, 0x01, 0x01, 0x00, 0x03, 0x01,
        0x80, 0x16, 0x3F, 0x2B, 0x7B, 0xC9, 0x92, 0x53, 0xF4, 0x50, 0x82, 0x08, 0x66, 0xDF, 0x39, 0x62,
        0x82, 0x56, 0xB8, 0x4E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1D, 0xC6, 0x27, 0x0C, 0x84, 0x03, 0x52,
        0x80, 0x16, 0x57, 0xD9, 0xD6, 0x4B, 0xB8, 0xA7, 0xFE, 0x0B, 0xB8, 0x01, 0x01, 0x00, 0x01, 0x87,
        0x81, 0x82, 0x14, 0x45, 0x35, 0x4A, 0x04, 0xAD, 0x1A, 0x94, 0x82, 0x17, 0x25, 0xCA, 0x0F, 0x92,
        0xF2, 0xB9, 0x1B, 0x47, 0x6C, 0xB1, 0x2C, 0xD3, 0x95, 0xC1, 0xC3, 0xDD, 0x51, 0x85, 0x05, 0x21,
        0x81, 0x3B, 0x80, 0x83, 0xDC, 0x82, 0xE3, 0x6B, 0x58, 0x07, 0x0B, 0x14, 0x86, 0x0A, 0xB1, 0x4C,
        0xD7, 0xC4, 0x6D, 0x59, 0xC5, 0x33, 0xDB, 0x62, 0x46, 0xB8, 0x4A, 0x04, 0xB7, 0x51, 0x7E, 0x02,
        0x0E, 0x36, 0xD2, 0x36, 0x16, 0xC5, 0x99, 0x1A, 0x79, 0xC1, 0x51, 0x66, 0xD8, 0x8C, 0xE0, 0x76,
        0x6F, 0x23, 0xD4, 0xAB, 0x0F, 0x06, 0x42, 0x52, 0xD8, 0x24, 0xDE, 0x51, 0x27, 0x38, 0xF2, 0xB6,
        0x35, 0x9E, 0xC6, 0x62
      },
      212, // spdu_size
      { // tbs (서명 메시지 내에 포함된 내용)
        0x40, 0x03, 0x80, 0x28, 0x00, 0x14, 0x25, 0x12, 0x40, 0x00, 0x00, 0x00, 0x07, 0x64, 0xA5, 0xF6,
        0xBB, 0x26, 0x5B, 0x63, 0xC6, 0x52, 0x08, 0x7C, 0xFF, 0xFF, 0x80, 0x7F, 0xF0, 0x01, 0x00, 0x00,
        0xFD, 0xFA, 0x1F, 0xA1, 0x00, 0x7F, 0xFF, 0x10, 0x00, 0x00, 0x00, 0x00, 0x40, 0x01, 0x87, 0x00,
        0x01, 0xC6, 0x5D, 0x50, 0x68, 0x95, 0x00
      },
      55, // tbs_size
      { // R_compressed (서명 메시지 내에 포함된 내용)
        kDot2ECPointForm_Compressed_y_1,
        0xDC, 0x82, 0xE3, 0x6B, 0x58, 0x07, 0x0B, 0x14, 0x86, 0x0A, 0xB1, 0x4C, 0xD7, 0xC4, 0x6D, 0x59,
        0xC5, 0x33, 0xDB, 0x62, 0x46, 0xB8, 0x4A, 0x04, 0xB7, 0x51, 0x7E, 0x02, 0x0E, 0x36, 0xD2, 0x36
      },
      { // s (서명 메시지 내에 포함된 내용)
        0x16, 0xC5, 0x99, 0x1A, 0x79, 0xC1, 0x51, 0x66, 0xD8, 0x8C, 0xE0, 0x76, 0x6F, 0x23, 0xD4, 0xAB,
        0x0F, 0x06, 0x42, 0x52, 0xD8, 0x24, 0xDE, 0x51, 0x27, 0x38, 0xF2, 0xB6, 0x35, 0x9E, 0xC6, 0x62
      },
      { // signer_id (= 66DF39628256B84E/rse-0/downloadFiles/b68ce89c75396849.cert)
        0x00, 0x03, 0x01, 0x80, 0x16, 0x3F, 0x2B, 0x7B, 0xC9, 0x92, 0x53, 0xF4, 0x50, 0x82, 0x08, 0x66,
        0xDF, 0x39, 0x62, 0x82, 0x56, 0xB8, 0x4E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1D, 0xC6, 0x27, 0x0C,
        0x84, 0x03, 0x52, 0x80, 0x16, 0x57, 0xD9, 0xD6, 0x4B, 0xB8, 0xA7, 0xFE, 0x0B, 0xB8, 0x01, 0x01,
        0x00, 0x01, 0x87, 0x81, 0x82, 0x14, 0x45, 0x35, 0x4A, 0x04, 0xAD, 0x1A, 0x94, 0x82, 0x17, 0x25,
        0xCA, 0x0F, 0x92, 0xF2, 0xB9, 0x1B, 0x47, 0x6C, 0xB1, 0x2C, 0xD3, 0x95, 0xC1, 0xC3, 0xDD, 0x51,
        0x85, 0x05, 0x21, 0x81, 0x3B
      },
      85, // signer_id_size
      { // h_signer
        0x95, 0xB1, 0xBD, 0x1F, 0xB5, 0x95, 0x23, 0x57, 0x1C, 0x61, 0xE7, 0x28, 0x7F, 0x15, 0x3A, 0x83,
        0xF6, 0x39, 0x5E, 0x9F, 0x74, 0x11, 0xD7, 0x8A, 0xB6, 0x8C, 0xE8, 0x9C, 0x75, 0x39, 0x68, 0x49
      },
      { // signer_pub_key
        // 본 라이브러리의 검증된 기능을 이용하여 인증서 내 reconstruction value 로부터 재생성
        // (test-libdot2-sample-cert.cc 의 g_sample_rse_0_cert 참조)
        kDot2ECPointForm_Uncompressed,
        0x87, 0x7F, 0xD3, 0x17, 0x1A, 0x4E, 0x54, 0xAA, 0x51, 0xF6, 0x96, 0x31, 0xD2, 0xFA, 0xF3, 0x45,
        0x79, 0x51, 0x89, 0x48, 0x79, 0x75, 0x71, 0x58, 0xCA, 0xE5, 0xB1, 0x48, 0xBB, 0x00, 0x1A, 0xA6,
        0x4E, 0x86, 0xF3, 0xC5, 0x92, 0x37, 0x4E, 0xF1, 0xFF, 0x4A, 0x5E, 0xE3, 0xDE, 0x12, 0x6B, 0x6C,
        0xC8, 0xED, 0xE4, 0x28, 0xC1, 0x09, 0xEB, 0x66, 0xAB, 0x81, 0x47, 0xB7, 0xDD, 0xBF, 0x95, 0x30
      }
    },
    // 테스트 벡터#4 (Penta-security 66DF39628256B84E/rse-0/downloadFiles/b68ce89c75396849.cert 로 서명된 메시지 #2)
    {
      { // spdu
        0x03, 0x81, 0x00, 0x40, 0x03, 0x80, 0x28, 0x00, 0x14, 0x25, 0x12, 0x40, 0x00, 0x00, 0x00, 0x07,
        0x64, 0xA5, 0xF6, 0xBB, 0x26, 0x5B, 0x63, 0xC6, 0x52, 0x08, 0x7C, 0xFF, 0xFF, 0x80, 0x7F, 0xF0,
        0x01, 0x00, 0x00, 0xFD, 0xFA, 0x1F, 0xA1, 0x00, 0x7F, 0xFF, 0x10, 0x00, 0x00, 0x00, 0x00, 0x40,
        0x01, 0x87, 0x00, 0x01, 0xC6, 0x5D, 0x57, 0x43, 0x57, 0xC0, 0x81, 0x01, 0x01, 0x00, 0x03, 0x01,
        0x80, 0x16, 0x3F, 0x2B, 0x7B, 0xC9, 0x92, 0x53, 0xF4, 0x50, 0x82, 0x08, 0x66, 0xDF, 0x39, 0x62,
        0x82, 0x56, 0xB8, 0x4E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1D, 0xC6, 0x27, 0x0C, 0x84, 0x03, 0x52,
        0x80, 0x16, 0x57, 0xD9, 0xD6, 0x4B, 0xB8, 0xA7, 0xFE, 0x0B, 0xB8, 0x01, 0x01, 0x00, 0x01, 0x87,
        0x81, 0x82, 0x14, 0x45, 0x35, 0x4A, 0x04, 0xAD, 0x1A, 0x94, 0x82, 0x17, 0x25, 0xCA, 0x0F, 0x92,
        0xF2, 0xB9, 0x1B, 0x47, 0x6C, 0xB1, 0x2C, 0xD3, 0x95, 0xC1, 0xC3, 0xDD, 0x51, 0x85, 0x05, 0x21,
        0x81, 0x3B, 0x80, 0x82, 0x93, 0x42, 0x03, 0xB6, 0xB8, 0x85, 0x68, 0x44, 0x93, 0x91, 0x82, 0xCC,
        0x33, 0x5A, 0x3D, 0xBD, 0x6D, 0x5B, 0x26, 0xD9, 0xB7, 0xF4, 0x29, 0x4E, 0x3C, 0xD4, 0x9D, 0x08,
        0xBE, 0xB1, 0x01, 0xDC, 0xD7, 0x7F, 0x59, 0x26, 0xE3, 0x0A, 0x89, 0xD0, 0x19, 0x0D, 0xF9, 0x01,
        0xCA, 0xEE, 0x92, 0x2B, 0x99, 0x16, 0x02, 0x2C, 0x5F, 0x6F, 0x96, 0x02, 0xE9, 0xCB, 0x49, 0x72,
        0x72, 0x2E, 0x5C, 0x99
      },
      212, // spdu_size
      { // tbs (서명 메시지 내에 포함된 내용)
        0x40, 0x03, 0x80, 0x28, 0x00, 0x14, 0x25, 0x12, 0x40, 0x00, 0x00, 0x00, 0x07, 0x64, 0xA5, 0xF6,
        0xBB, 0x26, 0x5B, 0x63, 0xC6, 0x52, 0x08, 0x7C, 0xFF, 0xFF, 0x80, 0x7F, 0xF0, 0x01, 0x00, 0x00,
        0xFD, 0xFA, 0x1F, 0xA1, 0x00, 0x7F, 0xFF, 0x10, 0x00, 0x00, 0x00, 0x00, 0x40, 0x01, 0x87, 0x00,
        0x01, 0xC6, 0x5D, 0x57, 0x43, 0x57, 0xC0
      },
      55, // tbs_size
      { // R_compressed (서명 메시지 내에 포함된 내용)
        kDot2ECPointForm_Compressed_y_0,
        0x93, 0x42, 0x03, 0xB6, 0xB8, 0x85, 0x68, 0x44, 0x93, 0x91, 0x82, 0xCC, 0x33, 0x5A, 0x3D, 0xBD,
        0x6D, 0x5B, 0x26, 0xD9, 0xB7, 0xF4, 0x29, 0x4E, 0x3C, 0xD4, 0x9D, 0x08, 0xBE, 0xB1, 0x01, 0xDC
      },
      { // s (서명 메시지 내에 포함된 내용)
        0xD7, 0x7F, 0x59, 0x26, 0xE3, 0x0A, 0x89, 0xD0, 0x19, 0x0D, 0xF9, 0x01, 0xCA, 0xEE, 0x92, 0x2B,
        0x99, 0x16, 0x02, 0x2C, 0x5F, 0x6F, 0x96, 0x02, 0xE9, 0xCB, 0x49, 0x72, 0x72, 0x2E, 0x5C, 0x99
      },
      { // signer_id (= 66DF39628256B84E/rse-0/downloadFiles/b68ce89c75396849.cert)
        0x00, 0x03, 0x01, 0x80, 0x16, 0x3F, 0x2B, 0x7B, 0xC9, 0x92, 0x53, 0xF4, 0x50, 0x82, 0x08, 0x66,
        0xDF, 0x39, 0x62, 0x82, 0x56, 0xB8, 0x4E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1D, 0xC6, 0x27, 0x0C,
        0x84, 0x03, 0x52, 0x80, 0x16, 0x57, 0xD9, 0xD6, 0x4B, 0xB8, 0xA7, 0xFE, 0x0B, 0xB8, 0x01, 0x01,
        0x00, 0x01, 0x87, 0x81, 0x82, 0x14, 0x45, 0x35, 0x4A, 0x04, 0xAD, 0x1A, 0x94, 0x82, 0x17, 0x25,
        0xCA, 0x0F, 0x92, 0xF2, 0xB9, 0x1B, 0x47, 0x6C, 0xB1, 0x2C, 0xD3, 0x95, 0xC1, 0xC3, 0xDD, 0x51,
        0x85, 0x05, 0x21, 0x81, 0x3B
      },
      85, // signer_id_size
      { // h_signer
        0x95, 0xB1, 0xBD, 0x1F, 0xB5, 0x95, 0x23, 0x57, 0x1C, 0x61, 0xE7, 0x28, 0x7F, 0x15, 0x3A, 0x83,
        0xF6, 0x39, 0x5E, 0x9F, 0x74, 0x11, 0xD7, 0x8A, 0xB6, 0x8C, 0xE8, 0x9C, 0x75, 0x39, 0x68, 0x49
      },
      { // signer_pub_key
        // 본 라이브러리의 검증된 기능을 이용하여 인증서 내 reconstruction value 로부터 재생성
        // (test-libdot2-sample-cert.cc 의 g_sample_rse_0_cert 참조)
        kDot2ECPointForm_Uncompressed,
        0x87, 0x7F, 0xD3, 0x17, 0x1A, 0x4E, 0x54, 0xAA, 0x51, 0xF6, 0x96, 0x31, 0xD2, 0xFA, 0xF3, 0x45,
        0x79, 0x51, 0x89, 0x48, 0x79, 0x75, 0x71, 0x58, 0xCA, 0xE5, 0xB1, 0x48, 0xBB, 0x00, 0x1A, 0xA6,
        0x4E, 0x86, 0xF3, 0xC5, 0x92, 0x37, 0x4E, 0xF1, 0xFF, 0x4A, 0x5E, 0xE3, 0xDE, 0x12, 0x6B, 0x6C,
        0xC8, 0xED, 0xE4, 0x28, 0xC1, 0x09, 0xEB, 0x66, 0xAB, 0x81, 0x47, 0xB7, 0xDD, 0xBF, 0x95, 0x30
      }
    },
    // 테스트 벡터#5 (Penta-security 66DF39628256B84E/rse-0/downloadFiles/b68ce89c75396849.cert 로 서명된 메시지 #3)
    {
      { // spdu
        0x03, 0x81, 0x00, 0x40, 0x03, 0x80, 0x28, 0x00, 0x14, 0x25, 0x12, 0x40, 0x00, 0x00, 0x00, 0x07,
        0x64, 0xA5, 0xF6, 0xBB, 0x26, 0x5B, 0x63, 0xC6, 0x52, 0x08, 0x7C, 0xFF, 0xFF, 0x80, 0x7F, 0xF0,
        0x01, 0x00, 0x00, 0xFD, 0xFA, 0x1F, 0xA1, 0x00, 0x7F, 0xFF, 0x10, 0x00, 0x00, 0x00, 0x00, 0x40,
        0x01, 0x87, 0x00, 0x01, 0xC6, 0x5D, 0x5B, 0xCB, 0x02, 0xC0, 0x81, 0x01, 0x01, 0x00, 0x03, 0x01,
        0x80, 0x16, 0x3F, 0x2B, 0x7B, 0xC9, 0x92, 0x53, 0xF4, 0x50, 0x82, 0x08, 0x66, 0xDF, 0x39, 0x62,
        0x82, 0x56, 0xB8, 0x4E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1D, 0xC6, 0x27, 0x0C, 0x84, 0x03, 0x52,
        0x80, 0x16, 0x57, 0xD9, 0xD6, 0x4B, 0xB8, 0xA7, 0xFE, 0x0B, 0xB8, 0x01, 0x01, 0x00, 0x01, 0x87,
        0x81, 0x82, 0x14, 0x45, 0x35, 0x4A, 0x04, 0xAD, 0x1A, 0x94, 0x82, 0x17, 0x25, 0xCA, 0x0F, 0x92,
        0xF2, 0xB9, 0x1B, 0x47, 0x6C, 0xB1, 0x2C, 0xD3, 0x95, 0xC1, 0xC3, 0xDD, 0x51, 0x85, 0x05, 0x21,
        0x81, 0x3B, 0x80, 0x83, 0x91, 0xAE, 0xF4, 0xBE, 0xDC, 0x69, 0xB4, 0x9B, 0x22, 0xB6, 0xA2, 0x4A,
        0xAD, 0xB2, 0x81, 0xA1, 0xF5, 0x89, 0x18, 0xBD, 0x22, 0x4F, 0x45, 0x6A, 0x31, 0xE7, 0xAD, 0x09,
        0xEE, 0xBF, 0x3D, 0x6E, 0xB9, 0x60, 0x73, 0xAD, 0x38, 0xA8, 0xF4, 0x8A, 0x97, 0x2F, 0x32, 0x05,
        0xDE, 0x6D, 0x93, 0x1B, 0x7F, 0x77, 0x49, 0xFA, 0x16, 0x17, 0x0D, 0x6A, 0xB1, 0x1B, 0x8C, 0x1D,
        0x86, 0xFE, 0xD0, 0x3E
      },
      212, // spdu_size
      { // tbs (서명 메시지 내에 포함된 내용)
        0x40, 0x03, 0x80, 0x28, 0x00, 0x14, 0x25, 0x12, 0x40, 0x00, 0x00, 0x00, 0x07, 0x64, 0xA5, 0xF6,
        0xBB, 0x26, 0x5B, 0x63, 0xC6, 0x52, 0x08, 0x7C, 0xFF, 0xFF, 0x80, 0x7F, 0xF0, 0x01, 0x00, 0x00,
        0xFD, 0xFA, 0x1F, 0xA1, 0x00, 0x7F, 0xFF, 0x10, 0x00, 0x00, 0x00, 0x00, 0x40, 0x01, 0x87, 0x00,
        0x01, 0xC6, 0x5D, 0x5B, 0xCB, 0x02, 0xC0
      },
      55, // tbs_size
      { // R_compressed (서명 메시지 내에 포함된 내용)
        kDot2ECPointForm_Compressed_y_1,
        0x91, 0xAE, 0xF4, 0xBE, 0xDC, 0x69, 0xB4, 0x9B, 0x22, 0xB6, 0xA2, 0x4A, 0xAD, 0xB2, 0x81, 0xA1,
        0xF5, 0x89, 0x18, 0xBD, 0x22, 0x4F, 0x45, 0x6A, 0x31, 0xE7, 0xAD, 0x09, 0xEE, 0xBF, 0x3D, 0x6E
      },
      { // s (서명 메시지 내에 포함된 내용)
        0xB9, 0x60, 0x73, 0xAD, 0x38, 0xA8, 0xF4, 0x8A, 0x97, 0x2F, 0x32, 0x05, 0xDE, 0x6D, 0x93, 0x1B,
        0x7F, 0x77, 0x49, 0xFA, 0x16, 0x17, 0x0D, 0x6A, 0xB1, 0x1B, 0x8C, 0x1D, 0x86, 0xFE, 0xD0, 0x3E
      },
      { // signer_id (= 66DF39628256B84E/rse-0/downloadFiles/b68ce89c75396849.cert)
        0x00, 0x03, 0x01, 0x80, 0x16, 0x3F, 0x2B, 0x7B, 0xC9, 0x92, 0x53, 0xF4, 0x50, 0x82, 0x08, 0x66,
        0xDF, 0x39, 0x62, 0x82, 0x56, 0xB8, 0x4E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1D, 0xC6, 0x27, 0x0C,
        0x84, 0x03, 0x52, 0x80, 0x16, 0x57, 0xD9, 0xD6, 0x4B, 0xB8, 0xA7, 0xFE, 0x0B, 0xB8, 0x01, 0x01,
        0x00, 0x01, 0x87, 0x81, 0x82, 0x14, 0x45, 0x35, 0x4A, 0x04, 0xAD, 0x1A, 0x94, 0x82, 0x17, 0x25,
        0xCA, 0x0F, 0x92, 0xF2, 0xB9, 0x1B, 0x47, 0x6C, 0xB1, 0x2C, 0xD3, 0x95, 0xC1, 0xC3, 0xDD, 0x51,
        0x85, 0x05, 0x21, 0x81, 0x3B
      },
      85, // signer_id_size
      { // h_signer
        0x95, 0xB1, 0xBD, 0x1F, 0xB5, 0x95, 0x23, 0x57, 0x1C, 0x61, 0xE7, 0x28, 0x7F, 0x15, 0x3A, 0x83,
        0xF6, 0x39, 0x5E, 0x9F, 0x74, 0x11, 0xD7, 0x8A, 0xB6, 0x8C, 0xE8, 0x9C, 0x75, 0x39, 0x68, 0x49
      },
      { // signer_pub_key
        // 본 라이브러리의 검증된 기능을 이용하여 인증서 내 reconstruction value 로부터 재생성
        // (test-libdot2-sample-cert.cc 의 g_sample_rse_0_cert 참조)
        kDot2ECPointForm_Uncompressed,
        0x87, 0x7F, 0xD3, 0x17, 0x1A, 0x4E, 0x54, 0xAA, 0x51, 0xF6, 0x96, 0x31, 0xD2, 0xFA, 0xF3, 0x45,
        0x79, 0x51, 0x89, 0x48, 0x79, 0x75, 0x71, 0x58, 0xCA, 0xE5, 0xB1, 0x48, 0xBB, 0x00, 0x1A, 0xA6,
        0x4E, 0x86, 0xF3, 0xC5, 0x92, 0x37, 0x4E, 0xF1, 0xFF, 0x4A, 0x5E, 0xE3, 0xDE, 0x12, 0x6B, 0x6C,
        0xC8, 0xED, 0xE4, 0x28, 0xC1, 0x09, 0xEB, 0x66, 0xAB, 0x81, 0x47, 0xB7, 0xDD, 0xBF, 0x95, 0x30
      }
    }
  };


/**
 * Uncompressed 형식 서명 검증에 대한 테스트벡터 모음 구조체
 */
struct FastVerificationUncompressedTestVector
{
  uint8_t spdu[kDot2MsgSize_Max]; ///< 서명 SPDU (=인코딩된 Ieee1609Dot2Data)
  size_t spdu_size; ///< 서명 SPDU 의 길이
  uint8_t tbs[kDot2MsgSize_Max]; ///< 서명 SPDU 내 ToBeSignedData(서명계산에 사용되는 해시입력)
  size_t tbs_size; ///< ToBeSignedData 의 길이
  uint8_t R_uncompressed[DOT2_EC_256_PUB_KEY_LEN]; ///< 서명 R (비압축형식)
  uint8_t s[DOT2_EC_256_KEY_LEN]; ///< 서명 s
  uint8_t signer_id[kDot2CertSize_Max]; ///< 서명을 생성한 상위인증서
  size_t signer_id_size; ///< 상위인증서 길이
  uint8_t h_signer[DOT2_SHA_256_LEN]; ///< 상위인증서 해시
  uint8_t signer_pub_key[DOT2_EC_256_PUB_KEY_LEN]; ///< 서명검증용(=상위인증서) 공개키
};


/**
 * 테스트 벡터(들)
 */
struct FastVerificationUncompressedTestVector tv_uncompressed[SAMPLE_TEST_VECTOR_NUM] =
  {
    // 테스트 벡터#1 (condor3 에서 GHS rse-0/1AD2689A387D398D.cert 로 서명된 메시지 #1)
    {
      { // spdu
        0x03, 0x81, 0x00, 0x40, 0x03, 0x80, 0x28, 0x00, 0x14, 0x25, 0x12, 0x40, 0x00, 0x00, 0x00, 0x07,
        0x64, 0xA5, 0xF6, 0xBB, 0x26, 0x5B, 0x63, 0xC6, 0x52, 0x08, 0x7C, 0xFF, 0xFF, 0x80, 0x7F, 0xF0,
        0x01, 0x00, 0x00, 0xFD, 0xFA, 0x1F, 0xA1, 0x00, 0x7F, 0xFF, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01, 0x87, 0x81, 0x01, 0x02, 0x00, 0x03, 0x01, 0x80, 0x24, 0x80, 0xE4, 0x4B, 0xAB, 0x15, 0x6F,
        0xDA, 0x50, 0x83, 0xE3, 0x04, 0x91, 0x00, 0x03, 0x19, 0xE8, 0xD5, 0x6F, 0x84, 0x00, 0xA9, 0x83,
        0x01, 0x01, 0x80, 0x03, 0x48, 0x01, 0x01, 0x00, 0x01, 0x87, 0x81, 0x82, 0xDA, 0x96, 0xFF, 0x58,
        0x38, 0xA9, 0x04, 0x15, 0x8D, 0x72, 0x6A, 0x1E, 0xA8, 0x7D, 0x2B, 0xB5, 0xC0, 0x19, 0xB8, 0x41,
        0x7E, 0x37, 0x85, 0x61, 0x9D, 0x4F, 0x10, 0x88, 0x97, 0x04, 0x35, 0x44, 0x80, 0x03, 0x00, 0x80,
        0xB7, 0xCB, 0xD0, 0xF7, 0x9B, 0x96, 0x9B, 0xD4, 0x59, 0x81, 0x1A, 0x70, 0x63, 0x61, 0x2E, 0x70,
        0x72, 0x65, 0x70, 0x72, 0x6F, 0x64, 0x2E, 0x76, 0x32, 0x78, 0x2E, 0x69, 0x73, 0x73, 0x63, 0x6D,
        0x73, 0x2E, 0x63, 0x6F, 0x6D, 0xE3, 0x04, 0x91, 0x00, 0x02, 0x19, 0xD8, 0xD5, 0xDD, 0x86, 0x00,
        0x0A, 0x83, 0x01, 0x03, 0x80, 0x00, 0x7C, 0x80, 0x01, 0xE4, 0x80, 0x03, 0x48, 0x01, 0x01, 0x80,
        0x01, 0x23, 0x80, 0x03, 0x85, 0x00, 0x01, 0x01, 0x01, 0x00, 0x81, 0x00, 0x80, 0x82, 0xB0, 0xFF,
        0x2F, 0x29, 0x0F, 0x9E, 0x77, 0xFE, 0x94, 0x07, 0x59, 0xC8, 0x77, 0xB8, 0xF0, 0x51, 0x6D, 0x41,
        0x1E, 0x44, 0xBC, 0x58, 0xF6, 0x12, 0x61, 0x5A, 0x26, 0xD7, 0x26, 0xA0, 0xD7, 0x9F, 0x80, 0x80,
        0x82, 0xFF, 0x9B, 0x00, 0xCE, 0x42, 0xB2, 0x1A, 0xFF, 0xF2, 0xC1, 0xD3, 0xB1, 0x2A, 0x38, 0x70,
        0x91, 0xE4, 0xD2, 0xC8, 0x4B, 0x3A, 0xE2, 0x53, 0xB1, 0x12, 0x25, 0xF7, 0x72, 0x5B, 0x89, 0xF5,
        0x9A, 0x80, 0x80, 0x66, 0xCB, 0x66, 0xCD, 0xF3, 0xDD, 0xFB, 0xD2, 0x85, 0x52, 0x1E, 0x18, 0x7D,
        0xE2, 0x29, 0xEA, 0x91, 0x61, 0xC8, 0xD2, 0x4C, 0x67, 0x6B, 0x7C, 0x83, 0x7C, 0x9F, 0xBE, 0x12,
        0xA9, 0xCD, 0x20, 0xB8, 0xE4, 0x5B, 0x5E, 0x81, 0xD5, 0xA5, 0x57, 0x37, 0xFA, 0x17, 0x43, 0x9D,
        0x2F, 0x1F, 0xD3, 0xD5, 0x9A, 0xBB, 0xF2, 0x49, 0x87, 0xF6, 0x1A, 0xBE, 0x6F, 0x9F, 0xFB, 0x9F,
        0x14, 0xCF, 0xB7, 0x80, 0x84, 0xB3, 0xE7, 0xC1, 0x90, 0xA0, 0x1B, 0xFD, 0x10, 0xA6, 0x03, 0x2E,
        0x7D, 0x52, 0x02, 0x1E, 0x49, 0xAB, 0xF2, 0x18, 0x12, 0x35, 0x23, 0xF8, 0xF6, 0xDB, 0xD0, 0x69,
        0x71, 0x18, 0x02, 0x1B, 0xB9, 0x68, 0x3D, 0x45, 0xEF, 0x38, 0x7B, 0xF5, 0x41, 0xE7, 0x46, 0xB5,
        0xEE, 0x41, 0xBA, 0xFA, 0x50, 0xC5, 0x19, 0xB1, 0x1B, 0x28, 0x98, 0xCC, 0x5F, 0x56, 0x17, 0xC6,
        0x3C, 0x4F, 0x4B, 0x76, 0xB0, 0xBF, 0xB8, 0x86, 0x32, 0xDF, 0x6D, 0x07, 0xAC, 0xCF, 0xF4, 0x29,
        0x3D, 0x50, 0x83, 0xAF, 0x50, 0xC4, 0x6B, 0xC8, 0xE6, 0xD9, 0x3B, 0x84, 0x5F, 0xCC, 0xDD, 0xF6,
        0x96, 0x0C, 0xE2, 0xA4, 0x0C
      },
      437, // spdu_size
      { // tbs (서명 메시지 내에 포함된 내용)
        0x40, 0x03, 0x80, 0x28, 0x00, 0x14, 0x25, 0x12, 0x40, 0x00, 0x00, 0x00, 0x07, 0x64, 0xA5, 0xF6,
        0xBB, 0x26, 0x5B, 0x63, 0xC6, 0x52, 0x08, 0x7C, 0xFF, 0xFF, 0x80, 0x7F, 0xF0, 0x01, 0x00, 0x00,
        0xFD, 0xFA, 0x1F, 0xA1, 0x00, 0x7F, 0xFF, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x87
      },
      47, // tbs_size
      { // R_uncompressed (서명 메시지 내에 포함된 내용)
        kDot2ECPointForm_Uncompressed,
        0xB3, 0xE7, 0xC1, 0x90, 0xA0, 0x1B, 0xFD, 0x10, 0xA6, 0x03, 0x2E, 0x7D, 0x52, 0x02, 0x1E, 0x49,
        0xAB, 0xF2, 0x18, 0x12, 0x35, 0x23, 0xF8, 0xF6, 0xDB, 0xD0, 0x69, 0x71, 0x18, 0x02, 0x1B, 0xB9,
        0x68, 0x3D, 0x45, 0xEF, 0x38, 0x7B, 0xF5, 0x41, 0xE7, 0x46, 0xB5, 0xEE, 0x41, 0xBA, 0xFA, 0x50,
        0xC5, 0x19, 0xB1, 0x1B, 0x28, 0x98, 0xCC, 0x5F, 0x56, 0x17, 0xC6, 0x3C, 0x4F, 0x4B, 0x76, 0xB0
      },
      { // s (서명 메시지 내에 포함된 내용)
        0xBF, 0xB8, 0x86, 0x32, 0xDF, 0x6D, 0x07, 0xAC, 0xCF, 0xF4, 0x29, 0x3D, 0x50, 0x83, 0xAF, 0x50,
        0xC4, 0x6B, 0xC8, 0xE6, 0xD9, 0x3B, 0x84, 0x5F, 0xCC, 0xDD, 0xF6, 0x96, 0x0C, 0xE2, 0xA4, 0x0C
      },
      { // signer_id (= rse-0/1AD2689A387D398D.cert)
        0x00, 0x03, 0x01, 0x80, 0x24, 0x80, 0xE4, 0x4B, 0xAB, 0x15, 0x6F, 0xDA, 0x50, 0x83, 0xE3, 0x04,
        0x91, 0x00, 0x03, 0x19, 0xE8, 0xD5, 0x6F, 0x84, 0x00, 0xA9, 0x83, 0x01, 0x01, 0x80, 0x03, 0x48,
        0x01, 0x01, 0x00, 0x01, 0x87, 0x81, 0x82, 0xDA, 0x96, 0xFF, 0x58, 0x38, 0xA9, 0x04, 0x15, 0x8D,
        0x72, 0x6A, 0x1E, 0xA8, 0x7D, 0x2B, 0xB5, 0xC0, 0x19, 0xB8, 0x41, 0x7E, 0x37, 0x85, 0x61, 0x9D,
        0x4F, 0x10, 0x88, 0x97, 0x04, 0x35, 0x44
      },
      71, // signer_id_size
      { // h_signer
        0x02, 0x9A, 0xF2, 0xE8, 0x8E, 0x0B, 0x43, 0x94, 0x79, 0xEE, 0xCD, 0x76, 0xBE, 0x56, 0xD0, 0x4D,
        0x21, 0x18, 0xF5, 0x89, 0x98, 0x6C, 0xF5, 0xC0, 0x6C, 0x41, 0xF6, 0xBE, 0x07, 0x0E, 0xCE, 0x81
      },
      { // signer_pub_key (제공된 개인키로부터 libdot2 의 검증된 dot2_GeneratePublicKeyFromPrivateKey()를 이용하여 공개키 생성함)
        kDot2ECPointForm_Uncompressed,
        0xAF, 0x67, 0xE8, 0x7D, 0xD9, 0x09, 0x9F, 0x98, 0x8E, 0xE5, 0x14, 0xAC, 0x0F, 0xE8, 0x36, 0xA1,
        0x8C, 0x53, 0x49, 0xDC, 0xAC, 0x4A, 0x1D, 0xF1, 0x8E, 0xDD, 0x7D, 0x39, 0xAC, 0xFE, 0xA9, 0x79,
        0x0C, 0x55, 0xFD, 0xF7, 0x25, 0x66, 0x3E, 0x60, 0x64, 0x5C, 0x89, 0x94, 0xD3, 0x96, 0x3B, 0x30,
        0x36, 0x82, 0x55, 0x18, 0xB4, 0xFE, 0x2C, 0xB6, 0xEA, 0xFA, 0x8E, 0x94, 0xD4, 0x84, 0xF1, 0xC7
      }
    },
    // 테스트 벡터#2 (condor3 에서 GHS rse-0/1AD2689A387D398D.cert 로 서명된 메시지 #2)
    {
      { // spdu
        0x03, 0x81, 0x00, 0x40, 0x03, 0x80, 0x28, 0x00, 0x14, 0x25, 0x12, 0x40, 0x00, 0x00, 0x00, 0x07,
        0x64, 0xA5, 0xF6, 0xBB, 0x26, 0x5B, 0x63, 0xC6, 0x52, 0x08, 0x7C, 0xFF, 0xFF, 0x80, 0x7F, 0xF0,
        0x01, 0x00, 0x00, 0xFD, 0xFA, 0x1F, 0xA1, 0x00, 0x7F, 0xFF, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01, 0x87, 0x81, 0x01, 0x02, 0x00, 0x03, 0x01, 0x80, 0x24, 0x80, 0xE4, 0x4B, 0xAB, 0x15, 0x6F,
        0xDA, 0x50, 0x83, 0xE3, 0x04, 0x91, 0x00, 0x03, 0x19, 0xE8, 0xD5, 0x6F, 0x84, 0x00, 0xA9, 0x83,
        0x01, 0x01, 0x80, 0x03, 0x48, 0x01, 0x01, 0x00, 0x01, 0x87, 0x81, 0x82, 0xDA, 0x96, 0xFF, 0x58,
        0x38, 0xA9, 0x04, 0x15, 0x8D, 0x72, 0x6A, 0x1E, 0xA8, 0x7D, 0x2B, 0xB5, 0xC0, 0x19, 0xB8, 0x41,
        0x7E, 0x37, 0x85, 0x61, 0x9D, 0x4F, 0x10, 0x88, 0x97, 0x04, 0x35, 0x44, 0x80, 0x03, 0x00, 0x80,
        0xB7, 0xCB, 0xD0, 0xF7, 0x9B, 0x96, 0x9B, 0xD4, 0x59, 0x81, 0x1A, 0x70, 0x63, 0x61, 0x2E, 0x70,
        0x72, 0x65, 0x70, 0x72, 0x6F, 0x64, 0x2E, 0x76, 0x32, 0x78, 0x2E, 0x69, 0x73, 0x73, 0x63, 0x6D,
        0x73, 0x2E, 0x63, 0x6F, 0x6D, 0xE3, 0x04, 0x91, 0x00, 0x02, 0x19, 0xD8, 0xD5, 0xDD, 0x86, 0x00,
        0x0A, 0x83, 0x01, 0x03, 0x80, 0x00, 0x7C, 0x80, 0x01, 0xE4, 0x80, 0x03, 0x48, 0x01, 0x01, 0x80,
        0x01, 0x23, 0x80, 0x03, 0x85, 0x00, 0x01, 0x01, 0x01, 0x00, 0x81, 0x00, 0x80, 0x82, 0xB0, 0xFF,
        0x2F, 0x29, 0x0F, 0x9E, 0x77, 0xFE, 0x94, 0x07, 0x59, 0xC8, 0x77, 0xB8, 0xF0, 0x51, 0x6D, 0x41,
        0x1E, 0x44, 0xBC, 0x58, 0xF6, 0x12, 0x61, 0x5A, 0x26, 0xD7, 0x26, 0xA0, 0xD7, 0x9F, 0x80, 0x80,
        0x82, 0xFF, 0x9B, 0x00, 0xCE, 0x42, 0xB2, 0x1A, 0xFF, 0xF2, 0xC1, 0xD3, 0xB1, 0x2A, 0x38, 0x70,
        0x91, 0xE4, 0xD2, 0xC8, 0x4B, 0x3A, 0xE2, 0x53, 0xB1, 0x12, 0x25, 0xF7, 0x72, 0x5B, 0x89, 0xF5,
        0x9A, 0x80, 0x80, 0x66, 0xCB, 0x66, 0xCD, 0xF3, 0xDD, 0xFB, 0xD2, 0x85, 0x52, 0x1E, 0x18, 0x7D,
        0xE2, 0x29, 0xEA, 0x91, 0x61, 0xC8, 0xD2, 0x4C, 0x67, 0x6B, 0x7C, 0x83, 0x7C, 0x9F, 0xBE, 0x12,
        0xA9, 0xCD, 0x20, 0xB8, 0xE4, 0x5B, 0x5E, 0x81, 0xD5, 0xA5, 0x57, 0x37, 0xFA, 0x17, 0x43, 0x9D,
        0x2F, 0x1F, 0xD3, 0xD5, 0x9A, 0xBB, 0xF2, 0x49, 0x87, 0xF6, 0x1A, 0xBE, 0x6F, 0x9F, 0xFB, 0x9F,
        0x14, 0xCF, 0xB7, 0x80, 0x84, 0x00, 0xB0, 0xD6, 0xE9, 0x48, 0x3D, 0xDD, 0x24, 0xC4, 0x6C, 0x69,
        0x48, 0x11, 0x3C, 0xB2, 0x07, 0x62, 0x36, 0x2F, 0xC6, 0x50, 0xC2, 0xFC, 0x8E, 0x7E, 0x40, 0x71,
        0x3E, 0x93, 0xC4, 0xCD, 0x3F, 0x6D, 0x94, 0xC8, 0x06, 0x9B, 0x92, 0x3D, 0x7D, 0xA3, 0x55, 0x4D,
        0x40, 0x14, 0x97, 0x1F, 0x3E, 0x44, 0x82, 0x7A, 0x0F, 0x77, 0x47, 0xDB, 0x3C, 0x95, 0xCC, 0x05,
        0xC7, 0x6D, 0x2F, 0xF2, 0x6E, 0x4F, 0x01, 0xA2, 0x30, 0xE7, 0xB1, 0xD9, 0xFE, 0x4E, 0x3F, 0xD4,
        0xE4, 0x79, 0x87, 0x67, 0xD8, 0x5C, 0x14, 0x1A, 0xC0, 0xBE, 0x12, 0xF5, 0x0E, 0xC1, 0x51, 0xE9,
        0x19, 0x70, 0x35, 0xD4, 0xC7
      },
      437, // spdu_size
      { // tbs (서명 메시지 내에 포함된 내용)
        0x40, 0x03, 0x80, 0x28, 0x00, 0x14, 0x25, 0x12, 0x40, 0x00, 0x00, 0x00, 0x07, 0x64, 0xA5, 0xF6,
        0xBB, 0x26, 0x5B, 0x63, 0xC6, 0x52, 0x08, 0x7C, 0xFF, 0xFF, 0x80, 0x7F, 0xF0, 0x01, 0x00, 0x00,
        0xFD, 0xFA, 0x1F, 0xA1, 0x00, 0x7F, 0xFF, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x87
      },
      47, // tbs_size
      { // R_uncompressed (서명 메시지 내에 포함된 내용)
        kDot2ECPointForm_Uncompressed,
        0x00, 0xB0, 0xD6, 0xE9, 0x48, 0x3D, 0xDD, 0x24, 0xC4, 0x6C, 0x69, 0x48, 0x11, 0x3C, 0xB2, 0x07,
        0x62, 0x36, 0x2F, 0xC6, 0x50, 0xC2, 0xFC, 0x8E, 0x7E, 0x40, 0x71, 0x3E, 0x93, 0xC4, 0xCD, 0x3F,
        0x6D, 0x94, 0xC8, 0x06, 0x9B, 0x92, 0x3D, 0x7D, 0xA3, 0x55, 0x4D, 0x40, 0x14, 0x97, 0x1F, 0x3E,
        0x44, 0x82, 0x7A, 0x0F, 0x77, 0x47, 0xDB, 0x3C, 0x95, 0xCC, 0x05, 0xC7, 0x6D, 0x2F, 0xF2, 0x6E
      },
      { // s (서명 메시지 내에 포함된 내용)
        0x4F, 0x01, 0xA2, 0x30, 0xE7, 0xB1, 0xD9, 0xFE, 0x4E, 0x3F, 0xD4, 0xE4, 0x79, 0x87, 0x67, 0xD8,
        0x5C, 0x14, 0x1A, 0xC0, 0xBE, 0x12, 0xF5, 0x0E, 0xC1, 0x51, 0xE9, 0x19, 0x70, 0x35, 0xD4, 0xC7
      },
      { // signer_id (= rse-0/1AD2689A387D398D.cert)
        0x00, 0x03, 0x01, 0x80, 0x24, 0x80, 0xE4, 0x4B, 0xAB, 0x15, 0x6F, 0xDA, 0x50, 0x83, 0xE3, 0x04,
        0x91, 0x00, 0x03, 0x19, 0xE8, 0xD5, 0x6F, 0x84, 0x00, 0xA9, 0x83, 0x01, 0x01, 0x80, 0x03, 0x48,
        0x01, 0x01, 0x00, 0x01, 0x87, 0x81, 0x82, 0xDA, 0x96, 0xFF, 0x58, 0x38, 0xA9, 0x04, 0x15, 0x8D,
        0x72, 0x6A, 0x1E, 0xA8, 0x7D, 0x2B, 0xB5, 0xC0, 0x19, 0xB8, 0x41, 0x7E, 0x37, 0x85, 0x61, 0x9D,
        0x4F, 0x10, 0x88, 0x97, 0x04, 0x35, 0x44
      },
      71, // signer_id_size
      { // h_signer
        0x02, 0x9A, 0xF2, 0xE8, 0x8E, 0x0B, 0x43, 0x94, 0x79, 0xEE, 0xCD, 0x76, 0xBE, 0x56, 0xD0, 0x4D,
        0x21, 0x18, 0xF5, 0x89, 0x98, 0x6C, 0xF5, 0xC0, 0x6C, 0x41, 0xF6, 0xBE, 0x07, 0x0E, 0xCE, 0x81
      },
      { // signer_pub_key (제공된 개인키로부터 libdot2 의 검증된 dot2_GeneratePublicKeyFromPrivateKey()를 이용하여 공개키 생성함)
        kDot2ECPointForm_Uncompressed,
        0xAF, 0x67, 0xE8, 0x7D, 0xD9, 0x09, 0x9F, 0x98, 0x8E, 0xE5, 0x14, 0xAC, 0x0F, 0xE8, 0x36, 0xA1,
        0x8C, 0x53, 0x49, 0xDC, 0xAC, 0x4A, 0x1D, 0xF1, 0x8E, 0xDD, 0x7D, 0x39, 0xAC, 0xFE, 0xA9, 0x79,
        0x0C, 0x55, 0xFD, 0xF7, 0x25, 0x66, 0x3E, 0x60, 0x64, 0x5C, 0x89, 0x94, 0xD3, 0x96, 0x3B, 0x30,
        0x36, 0x82, 0x55, 0x18, 0xB4, 0xFE, 0x2C, 0xB6, 0xEA, 0xFA, 0x8E, 0x94, 0xD4, 0x84, 0xF1, 0xC7
      }
    },
    // 테스트 벡터#3 (Penta-security 66DF39628256B84E/rse-0/downloadFiles/b68ce89c75396849.cert 로 서명된 메시지 #1)
    {
      { // spdu
        0x03, 0x81, 0x00, 0x40, 0x03, 0x80, 0x28, 0x00, 0x14, 0x25, 0x12, 0x40, 0x00, 0x00, 0x00, 0x07,
        0x64, 0xA5, 0xF6, 0xBB, 0x26, 0x5B, 0x63, 0xC6, 0x52, 0x08, 0x7C, 0xFF, 0xFF, 0x80, 0x7F, 0xF0,
        0x01, 0x00, 0x00, 0xFD, 0xFA, 0x1F, 0xA1, 0x00, 0x7F, 0xFF, 0x10, 0x00, 0x00, 0x00, 0x00, 0x40,
        0x01, 0x87, 0x00, 0x01, 0xC6, 0x5A, 0x1C, 0x30, 0x62, 0xC0, 0x81, 0x01, 0x01, 0x00, 0x03, 0x01,
        0x80, 0x16, 0x3F, 0x2B, 0x7B, 0xC9, 0x92, 0x53, 0xF4, 0x50, 0x82, 0x08, 0x66, 0xDF, 0x39, 0x62,
        0x82, 0x56, 0xB8, 0x4E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1D, 0xC6, 0x27, 0x0C, 0x84, 0x03, 0x52,
        0x80, 0x16, 0x57, 0xD9, 0xD6, 0x4B, 0xB8, 0xA7, 0xFE, 0x0B, 0xB8, 0x01, 0x01, 0x00, 0x01, 0x87,
        0x81, 0x82, 0x14, 0x45, 0x35, 0x4A, 0x04, 0xAD, 0x1A, 0x94, 0x82, 0x17, 0x25, 0xCA, 0x0F, 0x92,
        0xF2, 0xB9, 0x1B, 0x47, 0x6C, 0xB1, 0x2C, 0xD3, 0x95, 0xC1, 0xC3, 0xDD, 0x51, 0x85, 0x05, 0x21,
        0x81, 0x3B, 0x80, 0x84, 0xFD, 0x27, 0x5A, 0xC0, 0x1B, 0xCA, 0x72, 0xF6, 0xB7, 0x3B, 0x24, 0x99,
        0xF6, 0x37, 0x44, 0x6A, 0x02, 0x92, 0xE3, 0x41, 0xDB, 0xC2, 0x56, 0xFB, 0x51, 0x0D, 0x47, 0x23,
        0xA7, 0xFA, 0x46, 0x92, 0xA8, 0x59, 0x18, 0x69, 0xB0, 0xDD, 0x11, 0x13, 0x1B, 0x92, 0x26, 0x00,
        0xA0, 0xF3, 0x8E, 0x1D, 0x69, 0x77, 0x61, 0x8D, 0x83, 0x49, 0x2B, 0xC8, 0x7D, 0x1F, 0x5A, 0x57,
        0xFA, 0xD9, 0x7C, 0xA3, 0x96, 0x46, 0x6A, 0xFC, 0x98, 0x0C, 0xEE, 0x67, 0x46, 0xF1, 0x27, 0x02,
        0xDA, 0x7C, 0x89, 0x4C, 0x57, 0xFD, 0x72, 0x1B, 0xC8, 0x72, 0x39, 0x23, 0x62, 0x3F, 0xFF, 0x69,
        0x3B, 0x8A, 0xC3, 0xA9
      },
      244, // spdu_size
      { // tbs (서명 메시지 내에 포함된 내용)
        0x40, 0x03, 0x80, 0x28, 0x00, 0x14, 0x25, 0x12, 0x40, 0x00, 0x00, 0x00, 0x07, 0x64, 0xA5, 0xF6,
        0xBB, 0x26, 0x5B, 0x63, 0xC6, 0x52, 0x08, 0x7C, 0xFF, 0xFF, 0x80, 0x7F, 0xF0, 0x01, 0x00, 0x00,
        0xFD, 0xFA, 0x1F, 0xA1, 0x00, 0x7F, 0xFF, 0x10, 0x00, 0x00, 0x00, 0x00, 0x40, 0x01, 0x87, 0x00,
        0x01, 0xC6, 0x5A, 0x1C, 0x30, 0x62, 0xC0
      },
      55, // tbs_size
      { // R_uncompressed (서명 메시지 내에 포함된 내용)
        kDot2ECPointForm_Uncompressed,
        0xFD, 0x27, 0x5A, 0xC0, 0x1B, 0xCA, 0x72, 0xF6, 0xB7, 0x3B, 0x24, 0x99, 0xF6, 0x37, 0x44, 0x6A,
        0x02, 0x92, 0xE3, 0x41, 0xDB, 0xC2, 0x56, 0xFB, 0x51, 0x0D, 0x47, 0x23, 0xA7, 0xFA, 0x46, 0x92,
        0xA8, 0x59, 0x18, 0x69, 0xB0, 0xDD, 0x11, 0x13, 0x1B, 0x92, 0x26, 0x00, 0xA0, 0xF3, 0x8E, 0x1D,
        0x69, 0x77, 0x61, 0x8D, 0x83, 0x49, 0x2B, 0xC8, 0x7D, 0x1F, 0x5A, 0x57, 0xFA, 0xD9, 0x7C, 0xA3
      },
      { // s (서명 메시지 내에 포함된 내용)
        0x96, 0x46, 0x6A, 0xFC, 0x98, 0x0C, 0xEE, 0x67, 0x46, 0xF1, 0x27, 0x02, 0xDA, 0x7C, 0x89, 0x4C,
        0x57, 0xFD, 0x72, 0x1B, 0xC8, 0x72, 0x39, 0x23, 0x62, 0x3F, 0xFF, 0x69, 0x3B, 0x8A, 0xC3, 0xA9
      },
      { // signer_id (= 66DF39628256B84E/rse-0/downloadFiles/b68ce89c75396849.cert)
        0x00, 0x03, 0x01, 0x80, 0x16, 0x3F, 0x2B, 0x7B, 0xC9, 0x92, 0x53, 0xF4, 0x50, 0x82, 0x08, 0x66,
        0xDF, 0x39, 0x62, 0x82, 0x56, 0xB8, 0x4E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1D, 0xC6, 0x27, 0x0C,
        0x84, 0x03, 0x52, 0x80, 0x16, 0x57, 0xD9, 0xD6, 0x4B, 0xB8, 0xA7, 0xFE, 0x0B, 0xB8, 0x01, 0x01,
        0x00, 0x01, 0x87, 0x81, 0x82, 0x14, 0x45, 0x35, 0x4A, 0x04, 0xAD, 0x1A, 0x94, 0x82, 0x17, 0x25,
        0xCA, 0x0F, 0x92, 0xF2, 0xB9, 0x1B, 0x47, 0x6C, 0xB1, 0x2C, 0xD3, 0x95, 0xC1, 0xC3, 0xDD, 0x51,
        0x85, 0x05, 0x21, 0x81, 0x3B
      },
      85, // signer_id_size
      { // h_signer
        0x95, 0xB1, 0xBD, 0x1F, 0xB5, 0x95, 0x23, 0x57, 0x1C, 0x61, 0xE7, 0x28, 0x7F, 0x15, 0x3A, 0x83,
        0xF6, 0x39, 0x5E, 0x9F, 0x74, 0x11, 0xD7, 0x8A, 0xB6, 0x8C, 0xE8, 0x9C, 0x75, 0x39, 0x68, 0x49
      },
      { // signer_pub_key
        // 본 라이브러리의 검증된 기능을 이용하여 인증서 내 reconstruction value 로부터 재생성
        // (test-libdot2-sample-cert.cc 의 g_sample_rse_0_cert 참조)
        kDot2ECPointForm_Uncompressed,
        0x87, 0x7F, 0xD3, 0x17, 0x1A, 0x4E, 0x54, 0xAA, 0x51, 0xF6, 0x96, 0x31, 0xD2, 0xFA, 0xF3, 0x45,
        0x79, 0x51, 0x89, 0x48, 0x79, 0x75, 0x71, 0x58, 0xCA, 0xE5, 0xB1, 0x48, 0xBB, 0x00, 0x1A, 0xA6,
        0x4E, 0x86, 0xF3, 0xC5, 0x92, 0x37, 0x4E, 0xF1, 0xFF, 0x4A, 0x5E, 0xE3, 0xDE, 0x12, 0x6B, 0x6C,
        0xC8, 0xED, 0xE4, 0x28, 0xC1, 0x09, 0xEB, 0x66, 0xAB, 0x81, 0x47, 0xB7, 0xDD, 0xBF, 0x95, 0x30
      }
    },
    // 테스트 벡터#4 (Penta-security 66DF39628256B84E/rse-0/downloadFiles/b68ce89c75396849.cert 로 서명된 메시지 #2)
    {
      { // spdu
        0x03, 0x81, 0x00, 0x40, 0x03, 0x80, 0x28, 0x00, 0x14, 0x25, 0x12, 0x40, 0x00, 0x00, 0x00, 0x07,
        0x64, 0xA5, 0xF6, 0xBB, 0x26, 0x5B, 0x63, 0xC6, 0x52, 0x08, 0x7C, 0xFF, 0xFF, 0x80, 0x7F, 0xF0,
        0x01, 0x00, 0x00, 0xFD, 0xFA, 0x1F, 0xA1, 0x00, 0x7F, 0xFF, 0x10, 0x00, 0x00, 0x00, 0x00, 0x40,
        0x01, 0x87, 0x00, 0x01, 0xC6, 0x5D, 0x08, 0x2A, 0xEE, 0x00, 0x81, 0x01, 0x01, 0x00, 0x03, 0x01,
        0x80, 0x16, 0x3F, 0x2B, 0x7B, 0xC9, 0x92, 0x53, 0xF4, 0x50, 0x82, 0x08, 0x66, 0xDF, 0x39, 0x62,
        0x82, 0x56, 0xB8, 0x4E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1D, 0xC6, 0x27, 0x0C, 0x84, 0x03, 0x52,
        0x80, 0x16, 0x57, 0xD9, 0xD6, 0x4B, 0xB8, 0xA7, 0xFE, 0x0B, 0xB8, 0x01, 0x01, 0x00, 0x01, 0x87,
        0x81, 0x82, 0x14, 0x45, 0x35, 0x4A, 0x04, 0xAD, 0x1A, 0x94, 0x82, 0x17, 0x25, 0xCA, 0x0F, 0x92,
        0xF2, 0xB9, 0x1B, 0x47, 0x6C, 0xB1, 0x2C, 0xD3, 0x95, 0xC1, 0xC3, 0xDD, 0x51, 0x85, 0x05, 0x21,
        0x81, 0x3B, 0x80, 0x84, 0x51, 0x1A, 0x80, 0xD2, 0xBA, 0x83, 0x7B, 0x99, 0xB3, 0xC9, 0xC1, 0x15,
        0x64, 0x39, 0xB0, 0xF5, 0xDC, 0xB2, 0xF3, 0x4E, 0x31, 0xCF, 0x63, 0x97, 0x9C, 0x50, 0x00, 0x01,
        0x09, 0x2B, 0xB7, 0xB8, 0xAA, 0x85, 0x5B, 0xDF, 0xBA, 0x54, 0xE6, 0xE5, 0x62, 0xA9, 0x2A, 0x7D,
        0x1F, 0x21, 0xFA, 0xF7, 0x36, 0x2F, 0xFA, 0xE8, 0xC9, 0x02, 0x20, 0x43, 0x42, 0x79, 0x09, 0x3F,
        0xE2, 0xAF, 0x5E, 0x7A, 0x38, 0xE2, 0x0A, 0xE4, 0x01, 0xF2, 0x90, 0x35, 0x2E, 0x7D, 0xAB, 0xF9,
        0xFB, 0x5F, 0x7C, 0x13, 0xA3, 0x09, 0x6B, 0xCF, 0x18, 0x47, 0x7F, 0x99, 0xB0, 0x41, 0x16, 0xDE,
        0xEF, 0xB7, 0x83, 0x0E
      },
      244, // spdu_size
      { // tbs (서명 메시지 내에 포함된 내용)
        0x40, 0x03, 0x80, 0x28, 0x00, 0x14, 0x25, 0x12, 0x40, 0x00, 0x00, 0x00, 0x07, 0x64, 0xA5, 0xF6,
        0xBB, 0x26, 0x5B, 0x63, 0xC6, 0x52, 0x08, 0x7C, 0xFF, 0xFF, 0x80, 0x7F, 0xF0, 0x01, 0x00, 0x00,
        0xFD, 0xFA, 0x1F, 0xA1, 0x00, 0x7F, 0xFF, 0x10, 0x00, 0x00, 0x00, 0x00, 0x40, 0x01, 0x87, 0x00,
        0x01, 0xC6, 0x5D, 0x08, 0x2A, 0xEE, 0x00
      },
      55, // tbs_size
      { // R_uncompressed (서명 메시지 내에 포함된 내용)
        kDot2ECPointForm_Uncompressed,
        0x51, 0x1A, 0x80, 0xD2, 0xBA, 0x83, 0x7B, 0x99, 0xB3, 0xC9, 0xC1, 0x15, 0x64, 0x39, 0xB0, 0xF5,
        0xDC, 0xB2, 0xF3, 0x4E, 0x31, 0xCF, 0x63, 0x97, 0x9C, 0x50, 0x00, 0x01, 0x09, 0x2B, 0xB7, 0xB8,
        0xAA, 0x85, 0x5B, 0xDF, 0xBA, 0x54, 0xE6, 0xE5, 0x62, 0xA9, 0x2A, 0x7D, 0x1F, 0x21, 0xFA, 0xF7,
        0x36, 0x2F, 0xFA, 0xE8, 0xC9, 0x02, 0x20, 0x43, 0x42, 0x79, 0x09, 0x3F, 0xE2, 0xAF, 0x5E, 0x7A
      },
      { // s (서명 메시지 내에 포함된 내용)
        0x38, 0xE2, 0x0A, 0xE4, 0x01, 0xF2, 0x90, 0x35, 0x2E, 0x7D, 0xAB, 0xF9, 0xFB, 0x5F, 0x7C, 0x13,
        0xA3, 0x09, 0x6B, 0xCF, 0x18, 0x47, 0x7F, 0x99, 0xB0, 0x41, 0x16, 0xDE, 0xEF, 0xB7, 0x83, 0x0E
      },
      { // signer_id (= 66DF39628256B84E/rse-0/downloadFiles/b68ce89c75396849.cert)
        0x00, 0x03, 0x01, 0x80, 0x16, 0x3F, 0x2B, 0x7B, 0xC9, 0x92, 0x53, 0xF4, 0x50, 0x82, 0x08, 0x66,
        0xDF, 0x39, 0x62, 0x82, 0x56, 0xB8, 0x4E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1D, 0xC6, 0x27, 0x0C,
        0x84, 0x03, 0x52, 0x80, 0x16, 0x57, 0xD9, 0xD6, 0x4B, 0xB8, 0xA7, 0xFE, 0x0B, 0xB8, 0x01, 0x01,
        0x00, 0x01, 0x87, 0x81, 0x82, 0x14, 0x45, 0x35, 0x4A, 0x04, 0xAD, 0x1A, 0x94, 0x82, 0x17, 0x25,
        0xCA, 0x0F, 0x92, 0xF2, 0xB9, 0x1B, 0x47, 0x6C, 0xB1, 0x2C, 0xD3, 0x95, 0xC1, 0xC3, 0xDD, 0x51,
        0x85, 0x05, 0x21, 0x81, 0x3B
      },
      85, // signer_id_size
      { // h_signer
        0x95, 0xB1, 0xBD, 0x1F, 0xB5, 0x95, 0x23, 0x57, 0x1C, 0x61, 0xE7, 0x28, 0x7F, 0x15, 0x3A, 0x83,
        0xF6, 0x39, 0x5E, 0x9F, 0x74, 0x11, 0xD7, 0x8A, 0xB6, 0x8C, 0xE8, 0x9C, 0x75, 0x39, 0x68, 0x49
      },
      { // signer_pub_key
        // 본 라이브러리의 검증된 기능을 이용하여 인증서 내 reconstruction value 로부터 재생성
        // (test-libdot2-sample-cert.cc 의 g_sample_rse_0_cert 참조)
        kDot2ECPointForm_Uncompressed,
        0x87, 0x7F, 0xD3, 0x17, 0x1A, 0x4E, 0x54, 0xAA, 0x51, 0xF6, 0x96, 0x31, 0xD2, 0xFA, 0xF3, 0x45,
        0x79, 0x51, 0x89, 0x48, 0x79, 0x75, 0x71, 0x58, 0xCA, 0xE5, 0xB1, 0x48, 0xBB, 0x00, 0x1A, 0xA6,
        0x4E, 0x86, 0xF3, 0xC5, 0x92, 0x37, 0x4E, 0xF1, 0xFF, 0x4A, 0x5E, 0xE3, 0xDE, 0x12, 0x6B, 0x6C,
        0xC8, 0xED, 0xE4, 0x28, 0xC1, 0x09, 0xEB, 0x66, 0xAB, 0x81, 0x47, 0xB7, 0xDD, 0xBF, 0x95, 0x30
      }
    },
    // 테스트 벡터#5 (Penta-security 66DF39628256B84E/rse-0/downloadFiles/b68ce89c75396849.cert 로 서명된 메시지 #3)
    {
      { // spdu
        0x03, 0x81, 0x00, 0x40, 0x03, 0x80, 0x28, 0x00, 0x14, 0x25, 0x12, 0x40, 0x00, 0x00, 0x00, 0x07,
        0x64, 0xA5, 0xF6, 0xBB, 0x26, 0x5B, 0x63, 0xC6, 0x52, 0x08, 0x7C, 0xFF, 0xFF, 0x80, 0x7F, 0xF0,
        0x01, 0x00, 0x00, 0xFD, 0xFA, 0x1F, 0xA1, 0x00, 0x7F, 0xFF, 0x10, 0x00, 0x00, 0x00, 0x00, 0x40,
        0x01, 0x87, 0x00, 0x01, 0xC6, 0x5D, 0x0F, 0x51, 0xFC, 0x00, 0x81, 0x01, 0x01, 0x00, 0x03, 0x01,
        0x80, 0x16, 0x3F, 0x2B, 0x7B, 0xC9, 0x92, 0x53, 0xF4, 0x50, 0x82, 0x08, 0x66, 0xDF, 0x39, 0x62,
        0x82, 0x56, 0xB8, 0x4E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1D, 0xC6, 0x27, 0x0C, 0x84, 0x03, 0x52,
        0x80, 0x16, 0x57, 0xD9, 0xD6, 0x4B, 0xB8, 0xA7, 0xFE, 0x0B, 0xB8, 0x01, 0x01, 0x00, 0x01, 0x87,
        0x81, 0x82, 0x14, 0x45, 0x35, 0x4A, 0x04, 0xAD, 0x1A, 0x94, 0x82, 0x17, 0x25, 0xCA, 0x0F, 0x92,
        0xF2, 0xB9, 0x1B, 0x47, 0x6C, 0xB1, 0x2C, 0xD3, 0x95, 0xC1, 0xC3, 0xDD, 0x51, 0x85, 0x05, 0x21,
        0x81, 0x3B, 0x80, 0x84, 0x42, 0x38, 0x73, 0x53, 0x30, 0x88, 0xE0, 0x5A, 0x67, 0x65, 0xCD, 0x6F,
        0x06, 0x5C, 0x2D, 0xC4, 0x22, 0xA2, 0xFC, 0x24, 0x48, 0x3A, 0x4F, 0xC0, 0x45, 0x82, 0xA0, 0x07,
        0xE5, 0x6B, 0xA3, 0x5D, 0x9B, 0xD7, 0xE6, 0x77, 0x8B, 0x3F, 0xDD, 0x24, 0xA1, 0xA6, 0xB3, 0x16,
        0x39, 0xF8, 0xF1, 0xC0, 0x3A, 0x9A, 0x47, 0x74, 0xCD, 0x25, 0x68, 0x9D, 0xCB, 0x2D, 0x9B, 0x8B,
        0x4D, 0x0C, 0x0C, 0x3C, 0x82, 0x97, 0xF1, 0xEF, 0xE2, 0x1B, 0x5C, 0x9B, 0x35, 0x60, 0x7A, 0x8A,
        0x5A, 0xCA, 0xB6, 0x26, 0x8C, 0xEB, 0x58, 0x1A, 0x92, 0xC5, 0x29, 0x50, 0x8D, 0xD0, 0x5D, 0x95,
        0x6E, 0xCE, 0xB3, 0xD8
      },
      244, // spdu_size
      { // tbs (서명 메시지 내에 포함된 내용)
        0x40, 0x03, 0x80, 0x28, 0x00, 0x14, 0x25, 0x12, 0x40, 0x00, 0x00, 0x00, 0x07, 0x64, 0xA5, 0xF6,
        0xBB, 0x26, 0x5B, 0x63, 0xC6, 0x52, 0x08, 0x7C, 0xFF, 0xFF, 0x80, 0x7F, 0xF0, 0x01, 0x00, 0x00,
        0xFD, 0xFA, 0x1F, 0xA1, 0x00, 0x7F, 0xFF, 0x10, 0x00, 0x00, 0x00, 0x00, 0x40, 0x01, 0x87, 0x00,
        0x01, 0xC6, 0x5D, 0x0F, 0x51, 0xFC, 0x00
      },
      55, // tbs_size
      { // R_uncompressed (서명 메시지 내에 포함된 내용)
        kDot2ECPointForm_Uncompressed,
        0x42, 0x38, 0x73, 0x53, 0x30, 0x88, 0xE0, 0x5A, 0x67, 0x65, 0xCD, 0x6F, 0x06, 0x5C, 0x2D, 0xC4,
        0x22, 0xA2, 0xFC, 0x24, 0x48, 0x3A, 0x4F, 0xC0, 0x45, 0x82, 0xA0, 0x07, 0xE5, 0x6B, 0xA3, 0x5D,
        0x9B, 0xD7, 0xE6, 0x77, 0x8B, 0x3F, 0xDD, 0x24, 0xA1, 0xA6, 0xB3, 0x16, 0x39, 0xF8, 0xF1, 0xC0,
        0x3A, 0x9A, 0x47, 0x74, 0xCD, 0x25, 0x68, 0x9D, 0xCB, 0x2D, 0x9B, 0x8B, 0x4D, 0x0C, 0x0C, 0x3C
      },
      { // s (서명 메시지 내에 포함된 내용)
        0x82, 0x97, 0xF1, 0xEF, 0xE2, 0x1B, 0x5C, 0x9B, 0x35, 0x60, 0x7A, 0x8A, 0x5A, 0xCA, 0xB6, 0x26,
        0x8C, 0xEB, 0x58, 0x1A, 0x92, 0xC5, 0x29, 0x50, 0x8D, 0xD0, 0x5D, 0x95, 0x6E, 0xCE, 0xB3, 0xD8
      },
      { // signer_id (= 66DF39628256B84E/rse-0/downloadFiles/b68ce89c75396849.cert)
        0x00, 0x03, 0x01, 0x80, 0x16, 0x3F, 0x2B, 0x7B, 0xC9, 0x92, 0x53, 0xF4, 0x50, 0x82, 0x08, 0x66,
        0xDF, 0x39, 0x62, 0x82, 0x56, 0xB8, 0x4E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1D, 0xC6, 0x27, 0x0C,
        0x84, 0x03, 0x52, 0x80, 0x16, 0x57, 0xD9, 0xD6, 0x4B, 0xB8, 0xA7, 0xFE, 0x0B, 0xB8, 0x01, 0x01,
        0x00, 0x01, 0x87, 0x81, 0x82, 0x14, 0x45, 0x35, 0x4A, 0x04, 0xAD, 0x1A, 0x94, 0x82, 0x17, 0x25,
        0xCA, 0x0F, 0x92, 0xF2, 0xB9, 0x1B, 0x47, 0x6C, 0xB1, 0x2C, 0xD3, 0x95, 0xC1, 0xC3, 0xDD, 0x51,
        0x85, 0x05, 0x21, 0x81, 0x3B
      },
      85, // signer_id_size
      { // h_signer
        0x95, 0xB1, 0xBD, 0x1F, 0xB5, 0x95, 0x23, 0x57, 0x1C, 0x61, 0xE7, 0x28, 0x7F, 0x15, 0x3A, 0x83,
        0xF6, 0x39, 0x5E, 0x9F, 0x74, 0x11, 0xD7, 0x8A, 0xB6, 0x8C, 0xE8, 0x9C, 0x75, 0x39, 0x68, 0x49
      },
      { // signer_pub_key
        // 본 라이브러리의 검증된 기능을 이용하여 인증서 내 reconstruction value 로부터 재생성
        // (test-libdot2-sample-cert.cc 의 g_sample_rse_0_cert 참조)
        kDot2ECPointForm_Uncompressed,
        0x87, 0x7F, 0xD3, 0x17, 0x1A, 0x4E, 0x54, 0xAA, 0x51, 0xF6, 0x96, 0x31, 0xD2, 0xFA, 0xF3, 0x45,
        0x79, 0x51, 0x89, 0x48, 0x79, 0x75, 0x71, 0x58, 0xCA, 0xE5, 0xB1, 0x48, 0xBB, 0x00, 0x1A, 0xA6,
        0x4E, 0x86, 0xF3, 0xC5, 0x92, 0x37, 0x4E, 0xF1, 0xFF, 0x4A, 0x5E, 0xE3, 0xDE, 0x12, 0x6B, 0x6C,
        0xC8, 0xED, 0xE4, 0x28, 0xC1, 0x09, 0xEB, 0x66, 0xAB, 0x81, 0x47, 0xB7, 0xDD, 0xBF, 0x95, 0x30
      }
    }
  };

/**
 * @brief Compressed 서명 검증 기능 테스트
 */
TEST(dot2_VerifySignature, ECDSA_NIST_P256_COMPRESSED)
{
  ASSERT_EQ(Dot2_Init(kDot2LogLevel_Err, kDot2SigningParamsPrecomputeInterval_Default, "/dev/urandom"), kDot2Result_Success);

  struct Dot2Signature sign;
  sign.type = kDot2SignatureType_NISTp256;

  struct Dot2ECKeyPair key;
  uint8_t *tbs;
  size_t tbs_size;
  uint8_t *h_signer;

  /*
   * 각 테스트벡터에 대해 테스트한다.
   */
  for (int i = 0; i < SAMPLE_TEST_VECTOR_NUM; i++) {

    // 서명값 및 공개키 등 설정
    memcpy(sign.sign.nist_p256.R_r.u.octs, tv_compressed[i].R_compressed, DOT2_EC_256_COMPRESSED_PUB_KEY_LEN); // 서명 Rx
    memcpy(sign.sign.nist_p256.s, tv_compressed[i].s, DOT2_EC_256_KEY_LEN); // 서명 s
    memcpy(key.pub_key.u.octs, tv_compressed[i].signer_pub_key, DOT2_EC_256_PUB_KEY_LEN); // 서명검증용 공개키
    key.ec_key = nullptr; // EC 공개키 해제 (원래 EC_KEY_free() 해야 하지만... 테스트니까 생략)
    tbs = tv_compressed[i].tbs;
    tbs_size = tv_compressed[i].tbs_size;
    h_signer = tv_compressed[i].h_signer;

    // 서명 검증
    ASSERT_EQ(dot2_VerifySignature(tbs, tbs_size, h_signer, &key, &sign), kDot2Result_Success);

    dot2_ClearECKeyPair(&key);
  }

  Dot2_Release();
}



/**
 * @brief Uncompressed 서명 검증 기능 테스트
 */
TEST(dot2_VerifySignature, ECDSA_NIST_P256_UNCOMPRESSED)
{
  ASSERT_EQ(Dot2_Init(kDot2LogLevel_Err, kDot2SigningParamsPrecomputeInterval_Default, "/dev/urandom"), kDot2Result_Success);

  struct Dot2Signature sign;
  sign.type = kDot2SignatureType_NISTp256;
  sign.sign.nist_p256.R_r.u.point.form = kDot2ECPointForm_Uncompressed;

  struct Dot2ECKeyPair key;
  uint8_t *tbs;
  size_t tbs_size;
  uint8_t *h_signer;

  /*
   * 각 테스트벡터에 대해 테스트한다.
   */
  for (int i = 0; i < SAMPLE_TEST_VECTOR_NUM; i++)
  {
    // 서명값 및 공개키 등 설정
    memcpy(sign.sign.nist_p256.R_r.u.octs, tv_uncompressed[i].R_uncompressed, DOT2_EC_256_PUB_KEY_LEN); // 서명 r
    memcpy(sign.sign.nist_p256.s, tv_uncompressed[i].s, DOT2_EC_256_KEY_LEN); // 서명 s
    memcpy(key.pub_key.u.octs, tv_uncompressed[i].signer_pub_key, DOT2_EC_256_PUB_KEY_LEN); // 서명검증용 공개키
    key.ec_key = nullptr; // EC 공개키 해제 (원래 EC_KEY_free() 해야 하지만... 테스트니까 생략)
    tbs = tv_uncompressed[i].tbs;
    tbs_size = tv_uncompressed[i].tbs_size;
    h_signer = tv_uncompressed[i].h_signer;

    // 서명 검증
    ASSERT_EQ(dot2_VerifySignature(tbs, tbs_size, h_signer, &key, &sign), kDot2Result_Success);

    dot2_ClearECKeyPair(&key);
  }

  Dot2_Release();
}


/**
 * @brief
 */
TEST(dot2_VerifySignature, ECDSA_NIST_P256_X_ONLY)
{
  ASSERT_EQ(Dot2_Init(kDot2LogLevel_Err, kDot2SigningParamsPrecomputeInterval_Default, "/dev/urandom"), kDot2Result_Success);

  struct Dot2Signature sign;
  sign.type = kDot2SignatureType_NISTp256;
  sign.sign.nist_p256.R_r.u.point.form = kDot2ECPointForm_X_only;

  struct Dot2ECKeyPair key;
  memset(&key, 0, sizeof(key));
  uint8_t *tbs;
  size_t tbs_size;

  /*
   * rca 인증서 내 서명 검증 -> Self-signed 인증서이므로 자기 자신의 공개키로 검증한다.
   */
  memcpy(sign.sign.nist_p256.R_r.u.point.u.xy.x, g_sample_rca_cert_r_sig, DOT2_EC_256_KEY_LEN); // 서명 r
  memcpy(sign.sign.nist_p256.s, g_sample_rca_cert_s_sig, DOT2_EC_256_KEY_LEN); // 서명 s
  memcpy(key.pub_key.u.octs, g_sample_rca_cert_uncompressed_verification_key, DOT2_EC_256_PUB_KEY_LEN); // 서명검증용 공개키
  key.ec_key = nullptr; // EC 공개키 해제 (원래 EC_KEY_free() 해야 하지만... 테스트니까 생략)
  tbs = DOT2_GET_SELF_SIGNED_CERT_TBS(g_sample_rca_cert);
  tbs_size = DOT2_GET_SELF_SIGNED_CERT_TBS_SIZE(g_sample_rca_cert_size);
  ASSERT_EQ(dot2_VerifySignature(tbs, tbs_size, nullptr, &key, &sign), kDot2Result_Success);
  dot2_ClearECKeyPair(&key);

  /*
   * ica 인증서 내 서명 검증 -> rca 인증서 및 공개키로 검증한다.
   */
  memcpy(sign.sign.nist_p256.R_r.u.point.u.xy.x, g_sample_ica_cert_r_sig, DOT2_EC_256_KEY_LEN); // 서명 r
  memcpy(sign.sign.nist_p256.s, g_sample_ica_cert_s_sig, DOT2_EC_256_KEY_LEN); // 서명 s
  memcpy(key.pub_key.u.octs, g_sample_rca_cert_uncompressed_verification_key, DOT2_EC_256_PUB_KEY_LEN); // 서명검증용 공개키
  key.ec_key = nullptr; // EC 공개키 해제 (원래 EC_KEY_free() 해야 하지만... 테스트니까 생략)
  tbs = DOT2_GET_ISSUER_SIGNED_CERT_TBS(g_sample_ica_cert);
  tbs_size = DOT2_GET_ISSUER_SIGNED_CERT_TBS_SIZE(g_sample_ica_cert_size);
  ASSERT_EQ(dot2_VerifySignature(tbs, tbs_size, g_sample_rca_cert_h, &key, &sign), kDot2Result_Success);
  dot2_ClearECKeyPair(&key);

  /*
   * ra 인증서 내 서명 검증 -> ica 인증서 및 공개키로 검증한다.
   */
  memcpy(sign.sign.nist_p256.R_r.u.point.u.xy.x, g_sample_ra_cert_r_sig, DOT2_EC_256_KEY_LEN); // 서명 r
  memcpy(sign.sign.nist_p256.s, g_sample_ra_cert_s_sig, DOT2_EC_256_KEY_LEN); // 서명 s
  memcpy(key.pub_key.u.octs, g_sample_ica_cert_uncompressed_verification_key, DOT2_EC_256_PUB_KEY_LEN); // 서명검증용 공개키
  key.ec_key = nullptr; // EC 공개키 해제 (원래 EC_KEY_free() 해야 하지만... 테스트니까 생략)
  tbs = DOT2_GET_ISSUER_SIGNED_CERT_TBS(g_sample_ra_cert);
  tbs_size = DOT2_GET_ISSUER_SIGNED_CERT_TBS_SIZE(g_sample_ra_cert_size);
  ASSERT_EQ(dot2_VerifySignature(tbs, tbs_size, g_sample_ica_cert_h, &key, &sign), kDot2Result_Success);
  dot2_ClearECKeyPair(&key);

  /*
   * pca 인증서 내 서명 검증 -> ica 인증서 및 공개키로 검증한다.
   */
  memcpy(sign.sign.nist_p256.R_r.u.point.u.xy.x, g_sample_pca_cert_r_sig, DOT2_EC_256_KEY_LEN); // 서명 r
  memcpy(sign.sign.nist_p256.s, g_sample_pca_cert_s_sig, DOT2_EC_256_KEY_LEN); // 서명 s
  memcpy(key.pub_key.u.octs, g_sample_ica_cert_uncompressed_verification_key, DOT2_EC_256_PUB_KEY_LEN); // 서명검증용 공개키
  key.ec_key = nullptr; // EC 공개키 해제 (원래 EC_KEY_free() 해야 하지만... 테스트니까 생략)
  tbs = DOT2_GET_ISSUER_SIGNED_CERT_TBS(g_sample_pca_cert);
  tbs_size = DOT2_GET_ISSUER_SIGNED_CERT_TBS_SIZE(g_sample_pca_cert_size);
  ASSERT_EQ(dot2_VerifySignature(tbs, tbs_size, g_sample_ica_cert_h, &key, &sign), kDot2Result_Success);
  dot2_ClearECKeyPair(&key);

  /*
   * eca 인증서 내 서명 검증 -> ica 인증서 및 공개키로 검증한다.
   */
  memcpy(sign.sign.nist_p256.R_r.u.point.u.xy.x, g_sample_eca_cert_r_sig, DOT2_EC_256_KEY_LEN); // 서명 r
  memcpy(sign.sign.nist_p256.s, g_sample_eca_cert_s_sig, DOT2_EC_256_KEY_LEN); // 서명 s
  memcpy(key.pub_key.u.octs, g_sample_ica_cert_uncompressed_verification_key, DOT2_EC_256_PUB_KEY_LEN); // 서명검증용 공개키
  key.ec_key = nullptr; // EC 공개키 해제 (원래 EC_KEY_free() 해야 하지만... 테스트니까 생략)
  tbs = DOT2_GET_ISSUER_SIGNED_CERT_TBS(g_sample_eca_cert);
  tbs_size = DOT2_GET_ISSUER_SIGNED_CERT_TBS_SIZE(g_sample_eca_cert_size);
  ASSERT_EQ(dot2_VerifySignature(tbs, tbs_size, g_sample_ica_cert_h, &key, &sign), kDot2Result_Success);
  dot2_ClearECKeyPair(&key);

  Dot2_Release();
}
#endif
