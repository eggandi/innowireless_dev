/** 
  * @file 
  * @brief 인증서 번들 #0(아우토크립트) 테스트벡터 정의
  * @date 2022-08-01 
  * @author gyun 
  */


// 라이브러리 내부 헤더 파일
#include "dot2-internal.h"

// 테스트 헤더 파일
#include "gtest/gtest.h"
#include "../test-common-funcs/test-common-funcs.h"

// SCC
const char *g_tv_bundle_0_rca = "8003008100188118726f6f7463612e73636d732e6175746f63727970742e696f00000000001fcaa44f86002801028001238003810001800201008007000100010101000104e081010301ffc06080010100012301ffc06080010100012601ffc0608001010002010001ffc08080826562946d911f3501f3b66832225b65cc8594fe2cf46b916a0e1dae8dd5b2e6ce8080a265f5fa7c574d2eca3a266d236132e778c22be8179b73d2bf3fdc2205de5532fba582689f0030b9d7f8919d481a30b3d0e1e69e2e92f5fe124e3f226b28f29b"; // rca
const char *g_tv_bundle_0_rca_h = "a2501f650b745b1a0b3655d89e7fbe54324633948dbc8e771dfebcda272ea559";
const char *g_tv_bundle_0_rca_pub_key = "026562946D911F3501F3B66832225B65CC8594FE2CF46B916A0E1DAE8DD5B2E6CE";
size_t g_tv_bundle_0_rca_size = 208;
const char *g_tv_bundle_0_ica = "800300801dfebcda272ea5595881156963612e73636d732e6175746f63727970742e696f2ea55900021fcaa44f86001483010180019a010180012380038300010102a0810102c06080010280012381800201008101ffc08080826c8f12c7b0b707deebd7892714323979eaf68735269b40b1d2affc2486e72c618080325b4c748d7ea783befd55b71b3192a5e2410947d77ebbb9784e25679fcc7a115502c109b32a040be6d7067129bb6bd86656ba9fb348bac15ae2febfceacad41"; // ica
const char *g_tv_bundle_0_ica_h = "b62618ac44102f3022b3a3c8dbb2ab402f199aa43928748a6a606d3536f04e21";
const char *g_tv_bundle_0_ica_pub_key = "026C8F12C7B0B707DEEBD7892714323979EAF68735269B40B1D2AFFC2486E72C61";
size_t g_tv_bundle_0_ica_size = 188;
const char *g_tv_bundle_0_pca = "800300806a606d3536f04e215981157063612e73636d732e6175746f63727970742e696f2ea55900021fcaa45086000383010180019a0101800123800385000101010081008082a62cfc2d5de53e1b2f77349ed36e955062c050da5464846bea13d02e2cf0fb76808082ae903361d05994a0db346d359dc6abf704933622ae2ee55b454899bfcd34af37808004a8b039d1528ec53748b2b6e0b79e49bbd97619d39dc9d990b99223eeb18c394899b7f4f2fe1d868e557b7b5ff8351c744f36626ae02944754c51e4e55236fb"; // pca
const char *g_tv_bundle_0_pca_h = "b9e2f39e044006d185b5713c817a91659e39103b95866fb1586c852974c7dba2";
const char *g_tv_bundle_0_pca_pub_key = "02AE903361D05994A0DB346D359DC6ABF704933622AE2EE55B454899BFCD34AF37";
size_t g_tv_bundle_0_pca_size = 204;
const char *g_tv_bundle_0_eca = "800300806a606d3536f04e215981156563612e73636d732e6175746f63727970742e696f2ea55900021fcaa45086000383010180019a0101800123800384000101012081400080830043214eb3f7d968cfbd76134193b529addc2d064e9e5d603a46f4c3b1bcf8858080838ee9c0d5d5f79d0b91282b55f13a335a7564aa007033448cab3510e7bc6c531d8080ec485e9348525884074b3a715316a3fc76831546ab68805421cdc656211c4e7b4aba5cda0f6bc8db3550e92a9087f7ee6a47a9a028dc3b8318a93da4d16c3cec"; // eca
const char *g_tv_bundle_0_eca_h = "775d1d0bcdd8e80a329f46859ee563bf444f7e2107c4074d4029d2c2f4eacb40";
const char *g_tv_bundle_0_eca_pub_key = "038EE9C0D5D5F79D0B91282B55F13A335A7564AA007033448CAB3510E7BC6C531D";
size_t g_tv_bundle_0_eca_size = 205;
const char *g_tv_bundle_0_ra = "800300806a606d3536f04e2155811472612e73636d732e6175746f63727970742e696f2ea55900021fcaa45086000383010180019a010180012380038b0001010180810100008082f15080a548e32a17e9c2bbe2128a3fe2299e70be3d5bfcce892ae758691cd913808082580de070b89eefecb9df021323070a98a22aa61b8d33f5b3fb91de25c9a299b480807a79a8ddd1b2626a4c0ad8f4a114ac8504ffeda4e7d845db8e94708c20c606ca2d289391bdb01fadbae3039dcb8751ed63932a040f1719d6cbffb62462edf287"; // ra
const char *g_tv_bundle_0_ra_h = "6e424a55d9f97829d697364ba8f00670b158d3a8ee7650711500716da1f5f461";
const char *g_tv_bundle_0_ra_pub_key = "02580DE070B89EEFECB9DF021323070A98A22AA61B8D33F5B3FB91DE25C9A299B4";
size_t g_tv_bundle_0_ra_size = 205;

// RSE (C00ED625C865D3C1)
const char *g_tv_bundle_0_app_cert_0_init_priv_key = "50fa9540785bac33ab9d21d0071290eaad83f068957cbcafc570647753b14f05"; // rse-0/dwnl_sgn.priv
const char *g_tv_bundle_0_app_cert_0_recon_priv = "fb18a360171e0f2044c5b918cabae26048f695dd9a56ff524d43cc0855cb0ae2"; // rse-0/17d9c58c3ac798e3.s
const char *g_tv_bundle_0_app_cert_0_recon_pub = "023E5B2D3D9AA5C24BE3AD74BA256B3A3B776D2D06ACA91FA7A79557601A920A15";
const char *g_tv_bundle_0_app_cert_0_priv_key = "977E2FE062C30BC5C43D6BDF6AD0E195092760993D79C618B4D96D4ABEC8A3CC";
const char *g_tv_bundle_0_app_cert_0_pub_key = "0496077CC3BFFC3AE73CC60BD7FE6B9D65499CDC0FFD186195FDFEFB467FED2FFDE565987CE706755CB614E8A96CF4FA2C6F582E9B25FC0D290172D12D6FA77040";
const char *g_tv_bundle_0_app_cert_0 = "00030180586c852974c7dba2508208c00ed625c865d3c100000000002003ab2684035280165c8b494bb7bceb0bb8010100018781823e5b2d3d9aa5c24be3ad74ba256b3a3b776d2d06aca91fa7a79557601a920a15"; // rse-0/17d9c58c3ac798e3.cert
const char *g_tv_bundle_0_app_cert_0_h = "0fcacb9b6dabadd0f7735959c9f5d3ab55697848480b443517d9c58c3ac798e3";
const char *g_tv_bundle_0_app_cert_0_tbs_h = "102b2203a9252f6ada40ceb4e784a78b92651de65aafc5c31a39f067ad185add";
size_t g_tv_bundle_0_app_cert_0_size = 85;
const char *g_tv_bundle_0_app_cert_0_cmhf_name = "a_135_210107.133529-210211.233529_key.cmhf2";
const char *g_tv_bundle_0_app_cert_0_cmhf = "4954454B01586C852974C7DBA200000000002003AB2620325C46010100000087165C8B494BB7BCEB0BB800550FCACB9B6DABADD0F7735959C9F5D3AB55697848480B443517D9C58C3AC798E30200977E2FE062C30BC5C43D6BDF6AD0E195092760993D79C618B4D96D4ABEC8A3CC08C00ED625C865D3C100030180586C852974C7DBA2508208C00ED625C865D3C100000000002003AB2684035280165C8B494BB7BCEB0BB8010100018781823E5B2D3D9AA5C24BE3AD74BA256B3A3B776D2D06ACA91FA7A79557601A920A15b4b212efcda15108";
size_t g_tv_bundle_0_app_cert_0_cmhf_size = 212;

const char *g_tv_bundle_0_app_cert_1_init_priv_key = "b8e6cbe657fcdd14b18acdeab7dd5762fb8edeb09afa681cf098af3306f92073"; // rse-1/dwnl_sgn.priv
const char *g_tv_bundle_0_app_cert_1_recon_priv = "440779cb987114d9cc5515d61f6d2b30391f443447822850969d454d3f7481e2"; // rse-1/364c409476b5ffd0.s
const char *g_tv_bundle_0_app_cert_1_recon_pub = "02089ECB25FA8B9BD5F6EBCC28AB473926609C2A62FD9512142CC676BBEF1CAA5F";
const char *g_tv_bundle_0_app_cert_1_priv_key = "ECFEC51719AA2326DB0057154589EB85EEFD92784E8B5B355AB8FC4808262F8E";
const char *g_tv_bundle_0_app_cert_1_pub_key = "046328E18A5D629D1157BA3319674EEBA2284B9BB6F9B2F2D9231287D9DA9C37792138B043A5CC927522C6F1559A384EA5379E43AAB2C037F5A98C7E9D19C21753";
const char *g_tv_bundle_0_app_cert_1 = "00030180586c852974c7dba2508208c00ed625c865d3c1000000000020325c4684035280165c8b494bb7bceb0bb801010001878182089ecb25fa8b9bd5f6ebcc28ab473926609c2a62fd9512142cc676bbef1caa5f"; // rse-1/364c409476b5ffd0.cert
const char *g_tv_bundle_0_app_cert_1_h = "9e36439a333ad950b281e0ae9989d0f126a5ba06c1122ef4364c409476b5ffd0";
const char *g_tv_bundle_0_app_cert_1_tbs_h = "0b56e2a0c44a3531cb940439c0804e33dee2b8d5ccae8c423a651eda48c09da4";
size_t g_tv_bundle_0_app_cert_1_size = 85;
const char *g_tv_bundle_0_app_cert_1_cmhf_name = "a_135_210211.233529-210319.093529_key.cmhf2";
const char *g_tv_bundle_0_app_cert_1_cmhf = "4954454B01586C852974C7DBA2000000000020325C4620610D66010100000087165C8B494BB7BCEB0BB800559E36439A333AD950B281E0AE9989D0F126A5BA06C1122EF4364C409476B5FFD00200ECFEC51719AA2326DB0057154589EB85EEFD92784E8B5B355AB8FC4808262F8E08C00ED625C865D3C100030180586C852974C7DBA2508208C00ED625C865D3C1000000000020325C4684035280165C8B494BB7BCEB0BB801010001878182089ECB25FA8B9BD5F6EBCC28AB473926609C2A62FD9512142CC676BBEF1CAA5F67b175e50ef13bf7";
size_t g_tv_bundle_0_app_cert_1_cmhf_size = 212;

// OBU (38DB109583949D23)
const char *g_tv_bundle_0_pseudonym_13a_seed_priv_key = "1cc93c142bc24b2660e12dae5b44e9cd4269f4904cd64ceff53f0e898337bfd7"; // dwnl_sgn.priv
const char *g_tv_bundle_0_pseudonym_13a_expansion_key = "c711d1631767a40d8cef0717338ffe4a"; // sgn_expnsn.key

const char *g_tv_bundle_0_pseudonym_13a_0_recon_priv = "abd21ccb46dc3d957ef71a25e35a319dbb296c2995bff591a923fd3124961f2b";
const char *g_tv_bundle_0_pseudonym_13a_0_recon_pub = "0267F8EC16668FC6F27ED2A8634F091567A6C84A4484A3D5B34F26B156BE2837EB";
const char *g_tv_bundle_0_pseudonym_13a_0_priv_key = "79048F13C4D5AE55A42437FF77812B3D94DBE7D92913959845A57FDA285932DF";
const char *g_tv_bundle_0_pseudonym_13a_0_pub_key = "";
const char *g_tv_bundle_0_pseudonym_13a_0_cert = "00030180586c852974c7dba2508080013a0d5f8bfb260b5c35230000000f0d5f8bfb260b5c3523f04e210001200a02138400a983010280034880019a0102000120000126818267f8ec16668fc6f27ed2a8634f091567a6c84a4484a3d5b34f26b156be2837eb"; // 13A_0.cert
const char *g_tv_bundle_0_pseudonym_13a_0_cert_h = "095257ad7907a07c4f2d90c6e22b94e905ff49540442310fc07615995bc8bc7d";
const char *g_tv_bundle_0_pseudonym_13a_0_cert_tbs_h = "2271682ed2fd4e63ec8da3a89ba71157269b0dc38df02f78c14db9e3f78c2dfa";
size_t g_tv_bundle_0_pseudonym_13a_0_cert_size = 102;

const char *g_tv_bundle_0_pseudonym_13a_1_recon_priv = "5ecada9c93a7dfab30962d4f9fa21f7589f44dada492e0f2f00fac8459f54cd3";
const char *g_tv_bundle_0_pseudonym_13a_1_recon_pub = "029B00B2EA996EAB6EBB0A43E79F2BD1C09FBFCC5C7C68AEDC3FF99BB7DAAC0152";
const char *g_tv_bundle_0_pseudonym_13a_1_priv_key = "1D43248E1A339922197EDB5C9CECD738626CEAC567AD17E41F542A8E0BA240DB";
const char *g_tv_bundle_0_pseudonym_13a_1_pub_key = "";
const char *g_tv_bundle_0_pseudonym_13a_1_cert = "00030180586c852974c7dba2508080013a168837e9495d861ee30000000f168837e9495d861ee3f04e210001200a02138400a983010280034880019a010200012000012681829b00b2ea996eab6ebb0a43e79f2bd1c09fbfcc5c7c68aedc3ff99bb7daac0152"; // 13A_1.cert
const char *g_tv_bundle_0_pseudonym_13a_1_cert_h = "023d001144b7fab43dac2a90455c6005d82d91051adc6d539d6f42d47078837e";
const char *g_tv_bundle_0_pseudonym_13a_1_cert_tbs_h = "83bb4a4fa82d83195a95c52655a2eab214aee28c48fdcbaf852477a27686b0b5";
size_t g_tv_bundle_0_pseudonym_13a_1_cert_size = 102;

const char *g_tv_bundle_0_pseudonym_13a_2_recon_priv = "162ea78ffb073dc1d5799423d9cda87e1c387e05da9a90179267009e21a9cc81";
const char *g_tv_bundle_0_pseudonym_13a_2_recon_pub = "030B1E0BE4B9E1D1FE3860183525198F8EE439ABBBC941BB3502FDF61612323CC1";
const char *g_tv_bundle_0_pseudonym_13a_2_priv_key = "967F33A1358CE7AE1C595B6BABF72DDA593F52B4D044BAB72857B8081907C84E";
const char *g_tv_bundle_0_pseudonym_13a_2_pub_key = "";
const char *g_tv_bundle_0_pseudonym_13a_2_cert = "00030180586c852974c7dba2508080013ab98d6ef9f5d703b8ff0000000fb98d6ef9f5d703b8fff04e210001200a02138400a983010280034880019a010200012000012681830b1e0be4b9e1d1fe3860183525198f8ee439abbbc941bb3502fdf61612323cc1";
const char *g_tv_bundle_0_pseudonym_13a_2_cert_h = "5e599f20573129cafd8ce574d4abb2d5fc49de751af197c2267dceb556471b15";
const char *g_tv_bundle_0_pseudonym_13a_2_cert_tbs_h = "d10d8fa893f837688d699f02b1f4c65f7ca4213560b5a02136b8d5ca3ddcc454";
size_t g_tv_bundle_0_pseudonym_13a_2_cert_size = 102;

const char *g_tv_bundle_0_pseudonym_13a_3_recon_priv = "bb4469685fb49e929822b376d2f19fa78ffdc18dcb22db7f3dbb33f17d7aafd0";
const char *g_tv_bundle_0_pseudonym_13a_3_recon_pub = "02A7B14A45ABDBDC6D1EDC806BD11273F1BE32122FA0F24734C03441430CFFAE39";
const char *g_tv_bundle_0_pseudonym_13a_3_priv_key = "421390FA8FC0DAE95E7793278EEF58E3B0B1868AB9736CB4F88C334D34F696B5";
const char *g_tv_bundle_0_pseudonym_13a_3_pub_key = "";
const char *g_tv_bundle_0_pseudonym_13a_3_cert = "00030180586c852974c7dba2508080013aee636c0c1ff984c21a0000000fee636c0c1ff984c21af04e210001200a02138400a983010280034880019a01020001200001268182a7b14a45abdbdc6d1edc806bd11273f1be32122fa0f24734c03441430cffae39";
const char *g_tv_bundle_0_pseudonym_13a_3_cert_h = "bb7736df00b8d89a088081ed1d57a18fe2fd54b742b0f3cb4afb55ce000f8986";
const char *g_tv_bundle_0_pseudonym_13a_3_cert_tbs_h = "c874a65fba5b9dbf5a35846c7724ccb3e199ab7c48176f8ca6eac6e92e9a2a66";
size_t g_tv_bundle_0_pseudonym_13a_3_cert_size = 102;

const char *g_tv_bundle_0_pseudonym_13a_4_recon_priv = "3d609d30565f5424435fe643556cff067298764d7c27a23f6f0445238d609df5";
const char *g_tv_bundle_0_pseudonym_13a_4_recon_pub = "02665463174E7BF14211180DC65499269AFAAC9F779FF0F7A77540F67D1873FAAB";
const char *g_tv_bundle_0_pseudonym_13a_4_priv_key = "434E284AA7970F4D3453E3014A8F078EEF0BD3109C6BC82C8F527D3EC05ECEDC";
const char *g_tv_bundle_0_pseudonym_13a_4_pub_key = "";
const char *g_tv_bundle_0_pseudonym_13a_4_cert = "00030180586c852974c7dba2508080013a8419b0a934b61740bc0000000f8419b0a934b61740bcf04e210001200a02138400a983010280034880019a01020001200001268182665463174e7bf14211180dc65499269afaac9f779ff0f7a77540f67d1873faab";
const char *g_tv_bundle_0_pseudonym_13a_4_cert_h = "f84392a2f703c643ab11cba46ebce35c1c440af93d9fad195cdadb7eca347bcb";
const char *g_tv_bundle_0_pseudonym_13a_4_cert_tbs_h = "811fd135824c0a3f1bc00f4d560d1f7acac364fb9b3b01a999ddd7f3d88ec99f";
size_t g_tv_bundle_0_pseudonym_13a_4_cert_size = 102;

const char *g_tv_bundle_0_pseudonym_13a_5_recon_priv = "ed45283a14aeaccf08f72fddf8c51f1b4ac040ad50095db80026619a931bc483";
const char *g_tv_bundle_0_pseudonym_13a_5_recon_pub = "0260CD1450680B3D418CD0E4C4E82AC038DAC216010C19D8E9665766061B1BA4A5";
const char *g_tv_bundle_0_pseudonym_13a_5_priv_key = "9E510DF4EE1353CB3DB21C367F14653EC265544DF680D2B162A5CDC89BB0E064";
const char *g_tv_bundle_0_pseudonym_13a_5_pub_key = "";
const char *g_tv_bundle_0_pseudonym_13a_5_cert = "00030180586c852974c7dba2508080013a9b3bff3692c0b984830000000f9b3bff3692c0b98483f04e210001200a02138400a983010280034880019a0102000120000126818260cd1450680b3d418cd0e4c4e82ac038dac216010c19d8e9665766061b1ba4a5";
const char *g_tv_bundle_0_pseudonym_13a_5_cert_h = "b3d786d571caa6bbc54e6fa8abfee247b02bb255dff5f0bc11656256f267f239";
const char *g_tv_bundle_0_pseudonym_13a_5_cert_tbs_h = "5635bb36be113f26f0891576da085a19742b57698ef0d509537598d172f0f25c";
size_t g_tv_bundle_0_pseudonym_13a_5_cert_size = 102;

const char *g_tv_bundle_0_pseudonym_13a_6_recon_priv = "7170e5102ae11511c85e101cf2eb4fee92e87549b02aeb76607e335ed15a9bff";
const char *g_tv_bundle_0_pseudonym_13a_6_recon_pub = "02CDEAE19B037E4534334D79CC250C6D847CE3EE15755CE9552C8606833850C801";
const char *g_tv_bundle_0_pseudonym_13a_6_priv_key = "DC2D6F3D2724A73E536314A39F13FC7A20B2380010E3EC791F9B65766A5709C8";
const char *g_tv_bundle_0_pseudonym_13a_6_pub_key = "";
const char *g_tv_bundle_0_pseudonym_13a_6_cert = "00030180586c852974c7dba2508080013a3111fd1992721ac8850000000f3111fd1992721ac885f04e210001200a02138400a983010280034880019a01020001200001268182cdeae19b037e4534334d79cc250c6d847ce3ee15755ce9552c8606833850c801";
const char *g_tv_bundle_0_pseudonym_13a_6_cert_h = "4a1b75b05f23db2063f252c1ea5f03bb49be687e9ec8c9489cf4c5277c4adf8c";
const char *g_tv_bundle_0_pseudonym_13a_6_cert_tbs_h = "c89355bb2cf809c1b9a4586986290f464bfb2d322c32d71b9f0a204f89f751be";
size_t g_tv_bundle_0_pseudonym_13a_6_cert_size = 102;

const char *g_tv_bundle_0_pseudonym_13a_7_recon_priv = "8bc01cf324ef4986ad2e233d1d7ea156a97f21109c1d8a080059f6f602e5834c";
const char *g_tv_bundle_0_pseudonym_13a_7_recon_pub = "02F4A257313AD5F183CB50A3CFF4ACFE1D226FE574E4095F7D2B15D496DA22614A";
const char *g_tv_bundle_0_pseudonym_13a_7_priv_key = "E801FC9D5294545907E1278D4E3E834046B5C97F1B3008F6291E2761B936D1AA";
const char *g_tv_bundle_0_pseudonym_13a_7_pub_key = "";
const char *g_tv_bundle_0_pseudonym_13a_7_cert = "00030180586c852974c7dba2508080013ac0b347d8b8363895040000000fc0b347d8b836389504f04e210001200a02138400a983010280034880019a01020001200001268182f4a257313ad5f183cb50a3cff4acfe1d226fe574e4095f7d2b15d496da22614a";
const char *g_tv_bundle_0_pseudonym_13a_7_cert_h = "6488ad887cefaa066bb62a4445ccc108892b7439431ad70538a70bb2587169e7";
const char *g_tv_bundle_0_pseudonym_13a_7_cert_tbs_h = "1717825f018abf6ac35bbe4cbb1fd9adb46063d69480151e4384e9398a97b798";
size_t g_tv_bundle_0_pseudonym_13a_7_cert_size = 102;

const char *g_tv_bundle_0_pseudonym_13a_8_recon_priv = "7a927c3c0202ccfc15de80beccaa68bbc1b782fdcfe3f4b769b37dd37aa0debf";
const char *g_tv_bundle_0_pseudonym_13a_8_recon_pub = "03F226DF20A17F6B11C7BF2AE483D82547D10D036BFCB9E1407A842EF6684247D4";
const char *g_tv_bundle_0_pseudonym_13a_8_priv_key = "454D68D9C898F1F14A9007CBEF4FC33F4582F29145424DE72BF5AAD72292072C";
const char *g_tv_bundle_0_pseudonym_13a_8_pub_key = "";
const char *g_tv_bundle_0_pseudonym_13a_8_cert = "00030180586c852974c7dba2508080013aecf1684811286d08780000000fecf1684811286d0878f04e210001200a02138400a983010280034880019a01020001200001268183f226df20a17f6b11c7bf2ae483d82547d10d036bfcb9e1407a842ef6684247d4";
const char *g_tv_bundle_0_pseudonym_13a_8_cert_h = "50c649b09059b2a2de5d1b4157c3bd3ea0ce21b0e997f324c131c54f3d72e58e";
const char *g_tv_bundle_0_pseudonym_13a_8_cert_tbs_h = "2d54a6d5e248510519dbe5227636c8cb0e2b31964166a469a3ad2256efbf04eb";
size_t g_tv_bundle_0_pseudonym_13a_8_cert_size = 102;

const char *g_tv_bundle_0_pseudonym_13a_9_recon_priv = "6af3994a0997fe98e4852039fe9e07ec48aa2971767a85c80d6724df9041f3a4";
const char *g_tv_bundle_0_pseudonym_13a_9_recon_pub = "029F84A34D75C14760935027AC6653E42B6D5C639AD8B0ECE446CECD06790380D0";
const char *g_tv_bundle_0_pseudonym_13a_9_priv_key = "CEEF18A5481A773D7118C25248FFF9BA1F62648EE00F48BC5E54BD2396A5C8B7";
const char *g_tv_bundle_0_pseudonym_13a_9_pub_key = "";
const char *g_tv_bundle_0_pseudonym_13a_9_cert = "00030180586c852974c7dba2508080013a7717882ed65f173d190000000f7717882ed65f173d19f04e210001200a02138400a983010280034880019a010200012000012681829f84a34d75c14760935027ac6653e42b6d5c639ad8b0ece446cecd06790380d0";
const char *g_tv_bundle_0_pseudonym_13a_9_cert_h = "20a14c16ce0b82f5cec2532269306cc8134e55b5700ae70266b02c153c9d718f";
const char *g_tv_bundle_0_pseudonym_13a_9_cert_tbs_h = "3f8adddef57b434c713001e3c6e1d4d34cdfa1ba06eca929f88fde5daf94e39a";
size_t g_tv_bundle_0_pseudonym_13a_9_cert_size = 102;

const char *g_tv_bundle_0_pseudonym_13a_a_recon_priv = "7587ff24885146638728671e66035748efbe1fd96df468427c7d1fcca99835e3";
const char *g_tv_bundle_0_pseudonym_13a_a_recon_pub = "038C90AEE2B4ED4455FA317B35950A7110674634DC7610927351F694CBB88AB4C0";
const char *g_tv_bundle_0_pseudonym_13a_a_priv_key = "8B192F95ACC1896A0C912E6033125463E59A32833DE22508CA2305BFB3A493CB";
const char *g_tv_bundle_0_pseudonym_13a_a_pub_key = "";
const char *g_tv_bundle_0_pseudonym_13a_a_cert = "00030180586c852974c7dba2508080013a4ba27d847c229242460000000f4ba27d847c22924246f04e210001200a02138400a983010280034880019a010200012000012681838c90aee2b4ed4455fa317b35950a7110674634dc7610927351f694cbb88ab4c0";
const char *g_tv_bundle_0_pseudonym_13a_a_cert_h = "50026f92e8c4fb8e94d196caffbe00866a1b8aad2bdd01c73ff5f1df0469afb9";
const char *g_tv_bundle_0_pseudonym_13a_a_cert_tbs_h = "de5a7f12e082e5d09d0c1333902fa51fad0d3197f16a1092682f105acb81af97";
size_t g_tv_bundle_0_pseudonym_13a_a_cert_size = 102;

const char *g_tv_bundle_0_pseudonym_13a_b_recon_priv = "6a95596fc2eb11e13a6b196e55bbc51cccd32cab7ce190ebb0da33d2643166a2";
const char *g_tv_bundle_0_pseudonym_13a_b_recon_pub = "02FB713E7B2274882B256838B028B6484656393765022C7BC632561E4921ADD293";
const char *g_tv_bundle_0_pseudonym_13a_b_priv_key = "F8E70D704B39FA18C6DB85B528CECF53FEAB33BC1E8595B6470FF9DAC2AA43D7";
const char *g_tv_bundle_0_pseudonym_13a_b_pub_key = "";
const char *g_tv_bundle_0_pseudonym_13a_b_cert = "00030180586c852974c7dba2508080013a8ed7657f7dc4ff34000000000f8ed7657f7dc4ff3400f04e210001200a02138400a983010280034880019a01020001200001268182fb713e7b2274882b256838b028b6484656393765022c7bc632561e4921add293";
const char *g_tv_bundle_0_pseudonym_13a_b_cert_h = "6bf41013dfaaf6214cbd7ea663d03e2f5ecfa64918ea65b5ed7bf34e0077566d";
const char *g_tv_bundle_0_pseudonym_13a_b_cert_tbs_h = "e56ddba869e4a219a290a49983a9656f7e794659a3705b03ddd9c55d1a86b7b0";
size_t g_tv_bundle_0_pseudonym_13a_b_cert_size = 102;

const char *g_tv_bundle_0_pseudonym_13a_c_recon_priv = "11431fdc17146571c781f7242a9fd56e89139f7c8b64c799c85937c457bfec55";
const char *g_tv_bundle_0_pseudonym_13a_c_recon_pub = "03C1C89B70B20DBC67493E8624D3A8A85CF4271632034950140817B45C4D339BA8";
const char *g_tv_bundle_0_pseudonym_13a_c_priv_key = "A43423B460765B896F671D566E8CB72EBC20A962A84AD8F3AADE331559A281C3";
const char *g_tv_bundle_0_pseudonym_13a_c_pub_key = "";
const char *g_tv_bundle_0_pseudonym_13a_c_cert = "00030180586c852974c7dba2508080013aa3ce662760f57e97300000000fa3ce662760f57e9730f04e210001200a02138400a983010280034880019a01020001200001268183c1c89b70b20dbc67493e8624d3a8a85cf4271632034950140817b45c4d339ba8";
const char *g_tv_bundle_0_pseudonym_13a_c_cert_h = "73952e500689c20726a6650c052f7f1befc1ebf3e30b81ed3a81d4a513c7f604";
const char *g_tv_bundle_0_pseudonym_13a_c_cert_tbs_h = "07371e2e288a3b2afb54d0ec42609d472eb485bc1674c0ba77b23a6b363938c2";
size_t g_tv_bundle_0_pseudonym_13a_c_cert_size = 102;

const char *g_tv_bundle_0_pseudonym_13a_d_recon_priv = "6c7c9927f3176e9d851b8e0af548bffe6d8caf4c968343af333aae9c607c0dd0";
const char *g_tv_bundle_0_pseudonym_13a_d_recon_pub = "02A70B2917D6F04A2C7965C24E64407B5AEEF3CEB12124ECB225A311A47A6D14C9";
const char *g_tv_bundle_0_pseudonym_13a_d_priv_key = "6AEFD3234070703B54E882BACE49BCF224CC8361E2DF89219169F92084AF1478";
const char *g_tv_bundle_0_pseudonym_13a_d_pub_key = "";
const char *g_tv_bundle_0_pseudonym_13a_d_cert = "00030180586c852974c7dba2508080013a8c2e1c76af11c0fadf0000000f8c2e1c76af11c0fadff04e210001200a02138400a983010280034880019a01020001200001268182a70b2917d6f04a2c7965c24e64407b5aeef3ceb12124ecb225a311a47a6d14c9";
const char *g_tv_bundle_0_pseudonym_13a_d_cert_h = "4c0c4b6aac48f1887d51bc96e00a4a1f122b5a05014eb3acc833312c34e84e8f";
const char *g_tv_bundle_0_pseudonym_13a_d_cert_tbs_h = "0be7db3791872e8fcfbb2f619401c8f7ed426f7f3294d414ad59252fd44958cc";
size_t g_tv_bundle_0_pseudonym_13a_d_cert_size = 102;

const char *g_tv_bundle_0_pseudonym_13a_e_recon_priv = "97f441da7e480b9180cec32af1e70dbac23ca51f17a161de386073af9e9c58e0";
const char *g_tv_bundle_0_pseudonym_13a_e_recon_pub = "0312C368C42C10FD278DC0909DC3E02879A566BD3E04BA5227BA6C6B356CE3F302";
const char *g_tv_bundle_0_pseudonym_13a_e_priv_key = "E5B449EA424683373567C86FD954EE3EDD7C1FE00A936335760B2D7EA4EB4AE6";
const char *g_tv_bundle_0_pseudonym_13a_e_pub_key = "";
const char *g_tv_bundle_0_pseudonym_13a_e_cert = "00030180586c852974c7dba2508080013a1ed4db165de23e28aa0000000f1ed4db165de23e28aaf04e210001200a02138400a983010280034880019a0102000120000126818312c368c42c10fd278dc0909dc3e02879a566bd3e04ba5227ba6c6b356ce3f302";
const char *g_tv_bundle_0_pseudonym_13a_e_cert_h = "ce480da683f7f39428508cf059581880c5fce4340c2cf2be6c39bc7be9f3c999";
const char *g_tv_bundle_0_pseudonym_13a_e_cert_tbs_h = "2992a92c0620bf9396e160885d04adbdd5f7c1af2e96392fbea5f570885fedfc";
size_t g_tv_bundle_0_pseudonym_13a_e_cert_size = 102;

const char *g_tv_bundle_0_pseudonym_13a_f_recon_priv = "24539cedaf2572ac702a0f5f18a8c23b3a7079bc0e2db10fa2c76f1012eb8db9";
const char *g_tv_bundle_0_pseudonym_13a_f_recon_pub = "0285EEE19EB7C389769A8ABE7E07C8DC771894B632DE148EF423674EF5EC458152";
const char *g_tv_bundle_0_pseudonym_13a_f_priv_key = "645488C1F440385AC04CD9740F6C998444474E75D04F31BCEDC0FFC6FA5D32D0";
const char *g_tv_bundle_0_pseudonym_13a_f_pub_key = "";
const char *g_tv_bundle_0_pseudonym_13a_f_cert = "00030180586c852974c7dba2508080013a95039618d572e275970000000f95039618d572e27597f04e210001200a02138400a983010280034880019a0102000120000126818285eee19eb7c389769a8abe7e07c8dc771894b632de148ef423674ef5ec458152";
const char *g_tv_bundle_0_pseudonym_13a_f_cert_h = "8ab5ac01c3229d3080e34963749dc19923b8cc063d41b3ba1b157981b7d39290";
const char *g_tv_bundle_0_pseudonym_13a_f_cert_tbs_h = "7f649dd5aaeb0fcae76298f97418a8f096038f4d7383dc7ed0542ab8195d3d72";
size_t g_tv_bundle_0_pseudonym_13a_f_cert_size = 102;

const char *g_tv_bundle_0_pseudonym_13a_10_recon_priv = "729dda570e868ce388b40ccc6068cd7cb7117df89f01fbb359cdd3884489474d";
const char *g_tv_bundle_0_pseudonym_13a_10_recon_pub = "03A2DAFD72C09AA4CF7A03506239ACAE79D6130A0974C5DFF7ADDEF97E995F22DB";
const char *g_tv_bundle_0_pseudonym_13a_10_priv_key = "6BAE41FE50093976AE68E36CAEA079D5C6A29053883F134D39ECC6A48310F07F";
const char *g_tv_bundle_0_pseudonym_13a_10_pub_key = "";
const char *g_tv_bundle_0_pseudonym_13a_10_cert = "00030180586c852974c7dba2508080013a8271fb32950862fdd30000000f8271fb32950862fdd3f04e210001200a02138400a983010280034880019a01020001200001268183a2dafd72c09aa4cf7a03506239acae79d6130a0974c5dff7addef97e995f22db";
const char *g_tv_bundle_0_pseudonym_13a_10_cert_h = "7af06f1b8fb6e0d6753ef6fec9c5825ec138caa1ea91b8e7bde3925d815c0498";
const char *g_tv_bundle_0_pseudonym_13a_10_cert_tbs_h = "824616b72c4dbe93092cf5035a6e8b8157ba97949f25c727615448a684f280a7";
size_t g_tv_bundle_0_pseudonym_13a_10_cert_size = 102;

const char *g_tv_bundle_0_pseudonym_13a_11_recon_priv = "ab06ba45bdaa1ecc76642bb498d940a0cf9ee397d01f472161ef1ae45bd08db0";
const char *g_tv_bundle_0_pseudonym_13a_11_recon_pub = "03B023B320FF41F361D9F8835B5EF31122B2FE96D5E116DB20AB81D8BAA09C3185";
const char *g_tv_bundle_0_pseudonym_13a_11_priv_key = "02C5849BE4762C6C5FBBC7D43C8F5DA51B6B833198048B9B81CC086058E1A38B";
const char *g_tv_bundle_0_pseudonym_13a_11_pub_key = "";
const char *g_tv_bundle_0_pseudonym_13a_11_cert = "00030180586c852974c7dba2508080013af86a14945e219059e30000000ff86a14945e219059e3f04e210001200a02138400a983010280034880019a01020001200001268183b023b320ff41f361d9f8835b5ef31122b2fe96d5e116db20ab81d8baa09c3185";
const char *g_tv_bundle_0_pseudonym_13a_11_cert_h = "8ace1ad52b91adc3363054e47c92a3c146d0041a143d3bd957612c0c5bc94458";
const char *g_tv_bundle_0_pseudonym_13a_11_cert_tbs_h = "6f9e9bf5aaa68fb82e0e8357ed1a3047196a8599350d69fddc9399c629e929f1";
size_t g_tv_bundle_0_pseudonym_13a_11_cert_size = 102;

const char *g_tv_bundle_0_pseudonym_13a_12_recon_priv = "d14b9b58962a2a33e5cbdbf057dc1b4447a4c691745f64817ee4b47888133c14";
const char *g_tv_bundle_0_pseudonym_13a_12_recon_pub = "02752BCB8A0A86EB1ADC77256C4D980A0B8F7298E7B7AA4E23A79BC1CD5C480D4B";
const char *g_tv_bundle_0_pseudonym_13a_12_priv_key = "91ED84534515F687E24EBEA87EDB62374D3B5BC00725CFFCD02B6C4C31764934";
const char *g_tv_bundle_0_pseudonym_13a_12_pub_key = "";
const char *g_tv_bundle_0_pseudonym_13a_12_cert = "00030180586c852974c7dba2508080013af320744e33e087020c0000000ff320744e33e087020cf04e210001200a02138400a983010280034880019a01020001200001268182752bcb8a0a86eb1adc77256c4d980a0b8f7298e7b7aa4e23a79bc1cd5c480d4b";
const char *g_tv_bundle_0_pseudonym_13a_12_cert_h = "47efe2c7d474369c11277f9bf355aecce371b27a99027dfc76c5facd3f9ee211";
const char *g_tv_bundle_0_pseudonym_13a_12_cert_tbs_h = "d3e1d0a4dceecd856ccb71abe97d166762b781a25afb3b6a42d9594965b0eefd";
size_t g_tv_bundle_0_pseudonym_13a_12_cert_size = 102;

const char *g_tv_bundle_0_pseudonym_13a_13_recon_priv = "549a0864753b09deaa3681064e0935e97ee0854a88fe81cf6cb2b27dde4f63b6";
const char *g_tv_bundle_0_pseudonym_13a_13_recon_pub = "03D9A8B85BA2D2BB9882CF3F36E957CFD9D72F7B387BC173C4185EEB9357673226";
const char *g_tv_bundle_0_pseudonym_13a_13_priv_key = "73771CBB37FC28B06E80C46DCEC8B418EA391FB3BE557CB72F5ABFA77E72DCF7";
const char *g_tv_bundle_0_pseudonym_13a_13_pub_key = "";
const char *g_tv_bundle_0_pseudonym_13a_13_cert = "00030180586c852974c7dba2508080013ab263a3acf9309191760000000fb263a3acf930919176f04e210001200a02138400a983010280034880019a01020001200001268183d9a8b85ba2d2bb9882cf3f36e957cfd9d72f7b387bc173c4185eeb9357673226";
const char *g_tv_bundle_0_pseudonym_13a_13_cert_h = "816ddbd0eef9558ebcbac569169a238622ce46633ad557d0329e8649d212da9e";
const char *g_tv_bundle_0_pseudonym_13a_13_cert_tbs_h = "002182374326dcd23737520f0094da2069a4716e27d8c3f35ff5ab68e23fe64d";
size_t g_tv_bundle_0_pseudonym_13a_13_cert_size = 102;

const char *g_tv_bundle_0_pseudonym_13a_cmhf_name = "p_32_38_210112.085958-210119.095958_key.cmhf2";
size_t g_tv_bundle_0_pseudonym_13a_cmhf_size = 3954;
const char *g_tv_bundle_0_pseudonym_13a_cmhf


/**
 * @brief SCC 인증서들을 등록한다.
 */
void Dot2Test_Add_CertBundle_0_SCCCerts()
{
  uint8_t cert[kDot2CertSize_Max];
  Dot2CertSize cert_size;

  ASSERT_EQ((cert_size = Dot2Test_ConvertHexStrToOctets(g_tv_bundle_0_rca, cert)), g_tv_bundle_0_rca_size);
  ASSERT_EQ(Dot2_AddSCCCert(cert, cert_size), kDot2Result_Success);
  ASSERT_EQ((cert_size = Dot2Test_ConvertHexStrToOctets(g_tv_bundle_0_ica, cert)), g_tv_bundle_0_ica_size);
  ASSERT_EQ(Dot2_AddSCCCert(cert, cert_size), kDot2Result_Success);
  ASSERT_EQ((cert_size = Dot2Test_ConvertHexStrToOctets(g_tv_bundle_0_pca, cert)), g_tv_bundle_0_pca_size);
  ASSERT_EQ(Dot2_AddSCCCert(cert, cert_size), kDot2Result_Success);
  ASSERT_EQ((cert_size = Dot2Test_ConvertHexStrToOctets(g_tv_bundle_0_eca, cert)), g_tv_bundle_0_eca_size);
  ASSERT_EQ(Dot2_AddSCCCert(cert, cert_size), kDot2Result_Success);
  ASSERT_EQ((cert_size = Dot2Test_ConvertHexStrToOctets(g_tv_bundle_0_ra, cert)), g_tv_bundle_0_ra_size);
  ASSERT_EQ(Dot2_AddSCCCert(cert, cert_size), kDot2Result_Success);
}


/**
 * @brief App 인증서들의 CMHF를 등록한다.
 */
void Dot2Test_Load_CertBundle_0_AppCMHFs()
{
  uint8_t cmhf[kDot2CMHFSize_Max];
  Dot2CMHFSize cmhf_size;
  ASSERT_EQ((cmhf_size = Dot2Test_ConvertHexStrToOctets(g_tv_bundle_0_app_cert_0_cmhf, cmhf)), g_tv_bundle_0_app_cert_0_cmhf_size);
  ASSERT_EQ(Dot2_LoadCMHF(cmhf, cmhf_size), kDot2Result_Success);
  ASSERT_EQ((cmhf_size = Dot2Test_ConvertHexStrToOctets(g_tv_bundle_0_app_cert_1_cmhf, cmhf)), g_tv_bundle_0_app_cert_1_cmhf_size);
  ASSERT_EQ(Dot2_LoadCMHF(cmhf, cmhf_size), kDot2Result_Success);
}


/**
 * @brief Pseudonym 인증서들의 CMHF를 등록한다.
 */
void Dot2Test_Load_CertBundle_0_PseudonymCMHFs()
{
  uint8_t cmhf[kDot2CMHFSize_Max];
  Dot2CMHFSize cmhf_size;
  ASSERT_EQ((cmhf_size = Dot2Test_ConvertHexStrToOctets(g_tv_bundle_0_pseudonym_13a_cmhf, cmhf)), g_tv_bundle_0_pseudonym_13a_cmhf_size);
  ASSERT_EQ(Dot2_LoadCMHF(cmhf, cmhf_size), kDot2Result_Success);

  // TODO:: 13b에 대한 CMHF도 추가 - SPDU 생성시 생성시각에 따라 선택되는 것 확인.
}


/*
 * App cert 0 의 CMHEntry 정보 유효성을 체크한다.
 */
bool Dot2Test_Check_CertBundle_0_AppCert_0_CMHEntry(struct Dot2SequentialCMHEntry *cmh_entry)
{
  Dot2CertType cert_type = kDot2CertType_Implicit;
  Dot2CertIssuerIdentifierType issuer_type = kDot2CertIssuerIdentifierType_Sha256AndDigest;
  const char *issuer_h8_str = "586c852974c7dba2";
  const char *binary_id_str = "C00ED625C865D3C1";
  Dot2CertIdType cert_id_type = kDot2CertIdType_BinaryId;
  Dot2CertBinaryIdLen cert_id_len = kDot2CertBinaryIdLen_Default;
  const char *craca_id_str = "000000";
  Dot2CertCRLSeries crl_series = 0;
  Dot2Time64 valid_start = 537111334000000ULL;
  Dot2Time64 valid_end = 540171334000000ULL;
  Dot2CertValidRegionType region_type = kDot2CertValidRegionType_Circular;
  Dot2Latitude region_lat = 375163721;
  Dot2Longitude region_lon = 1270332651;
  uint16_t region_radius = 3000;
  Dot2CertPermissionNum psid_num = 1;
  Dot2PSID psid_0 = 135;

  uint8_t cert[kDot2CertSize_Max], binary_id[kDot2CertBinaryIdLen_Default], craca_id[DOT2_CRACA_ID_LEN], issuer_h8[8];
  struct Dot2SHA256 cert_h;
  struct Dot2ECPrivateKey priv_key;
  struct Dot2ECPublicKey pub_key, recon_pub;

  EXPECT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_bundle_0_app_cert_0, cert), (int)g_tv_bundle_0_app_cert_0_size);
  EXPECT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_bundle_0_app_cert_0_h, cert_h.octs), DOT2_SHA_256_LEN);
  EXPECT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_bundle_0_app_cert_0_priv_key, priv_key.octs), DOT2_EC_256_KEY_LEN);
  EXPECT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_bundle_0_app_cert_0_pub_key, pub_key.u.octs), DOT2_EC_256_PUB_KEY_LEN);
  EXPECT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_bundle_0_app_cert_0_recon_pub, recon_pub.u.octs), DOT2_EC_256_COMPRESSED_PUB_KEY_LEN);
  EXPECT_EQ(Dot2Test_ConvertHexStrToOctets(issuer_h8_str, issuer_h8), 8);
  EXPECT_EQ(Dot2Test_ConvertHexStrToOctets(binary_id_str, binary_id), (int)cert_id_len);
  EXPECT_EQ(Dot2Test_ConvertHexStrToOctets(craca_id_str, craca_id), DOT2_CRACA_ID_LEN);

  EXPECT_EQ(cmh_entry->cert_size, g_tv_bundle_0_app_cert_0_size);
  EXPECT_TRUE(cmh_entry->cert);
  EXPECT_TRUE(Dot2Test_CompareOctets(cmh_entry->cert, cert, g_tv_bundle_0_app_cert_0_size));
  EXPECT_TRUE(Dot2Test_CompareOctets(cmh_entry->cert_h.octs, cert_h.octs, DOT2_SHA_256_LEN));
  EXPECT_TRUE(cmh_entry->issuer);
  EXPECT_TRUE(cmh_entry->asn1_cert);
  struct Dot2SequentialCMHInfo *cmh_info = &(cmh_entry->info);
  EXPECT_TRUE(cmh_info->eck_priv_key);
  EXPECT_TRUE(Dot2Test_CompareOctets(cmh_info->priv_key.octs, priv_key.octs, DOT2_EC_256_KEY_LEN));
  struct Dot2EECertContents *contents = &(cmh_info->cert_contents);
  // EXPECT_TRUE(Dot2Test_CompareOctets(contents->verify_pub_key.u.octs, pub_key.u.octs, DOT2_EC_256_PUB_KEY_LEN)); // CMH/CMHF에 공개키는 저장되지 않음.
  EXPECT_FALSE(contents->eck_verify_pub_key);
  struct Dot2CertCommonContents *common = &(contents->common);
  EXPECT_EQ(common->type, cert_type);
  EXPECT_EQ(common->issuer.type, issuer_type);
  EXPECT_TRUE(Dot2Test_CompareOctets(common->issuer.h8, issuer_h8, 8));
  EXPECT_EQ(common->id.type, cert_id_type);
  EXPECT_EQ(common->id.u.binary_id.len, cert_id_len);
  EXPECT_TRUE(Dot2Test_CompareOctets(common->id.u.binary_id.id, binary_id, cert_id_len));
  EXPECT_TRUE(Dot2Test_CompareOctets(common->craca_id, craca_id, sizeof(craca_id)));
  EXPECT_EQ(common->crl_series, crl_series);
  EXPECT_EQ(common->valid_start, valid_start);
  EXPECT_EQ(common->valid_end, valid_end);
  EXPECT_EQ(common->valid_region.type, region_type);
  EXPECT_EQ(common->valid_region.u.circular.center.lat, region_lat);
  EXPECT_EQ(common->valid_region.u.circular.center.lon, region_lon);
  EXPECT_EQ(common->valid_region.u.circular.radius, region_radius);
  // EXPECT_EQ((int)common->verify_key_indicator.type, kDot2CertVerificationKeyIndicatorType_ReconstructValue); // CMH/CMHF에 공개키재구성값은 저장되지 않는다.
  // EXPECT_TRUE(Dot2Test_CompareOctets(common->verify_key_indicator.key.u.octs, recon_pub.u.octs, DOT2_EC_256_COMPRESSED_PUB_KEY_LEN));
  EXPECT_FALSE(common->enc_pub_key_present);
  struct Dot2EECertPermissions *perms = &(contents->app_perms);
  EXPECT_EQ(perms->psid_num, psid_num);
  EXPECT_EQ(perms->psid[0], psid_0);
  if (cmh_entry->cert_size != g_tv_bundle_0_app_cert_0_size) { return false; }
  if (!cmh_entry->cert) { return false; }
  if (!Dot2Test_CompareOctets(cmh_entry->cert, cert, g_tv_bundle_0_app_cert_0_size)) { return false; }
  if (!Dot2Test_CompareOctets(cmh_entry->cert_h.octs, cert_h.octs, DOT2_SHA_256_LEN)) { return false; }
  if (!cmh_entry->issuer) { return false; }
  if (!cmh_entry->asn1_cert) { return false; }
  if (!cmh_info->eck_priv_key) { return false; }
  if (!Dot2Test_CompareOctets(cmh_info->priv_key.octs, priv_key.octs, DOT2_EC_256_KEY_LEN)) { return false; }
  if (contents->eck_verify_pub_key) { return false; }
  if (common->type != cert_type) { return false; }
  if (common->issuer.type != issuer_type) { return false; }
  if (!Dot2Test_CompareOctets(common->issuer.h8, issuer_h8, 8)) { return false; }
  if (common->id.type != cert_id_type) { return false; }
  if (common->id.u.binary_id.len != cert_id_len) { return false; }
  if (!Dot2Test_CompareOctets(common->id.u.binary_id.id, binary_id, cert_id_len)) { return false; }
  if (!Dot2Test_CompareOctets(common->craca_id, craca_id, sizeof(craca_id))) { return false; }
  if (common->crl_series != crl_series) { return false; }
  if (common->valid_start != valid_start) { return false; }
  if (common->valid_end != valid_end) { return false; }
  if (common->valid_region.type != region_type) { return false; }
  if (common->valid_region.u.circular.center.lat != region_lat) { return false; }
  if (common->valid_region.u.circular.center.lon != region_lon) { return false; }
  if (common->valid_region.u.circular.radius != region_radius) { return false; }
  if (common->enc_pub_key_present) { return false; }
  if (perms->psid_num != psid_num) { return false; }
  if (perms->psid[0] != psid_0) { return false; }
  return true;
}


/*
 * App cert 1 의 CMHEntry 정보 유효성을 체크한다.
 */
bool Dot2Test_Check_CertBundle_0_AppCert_1_CMHEntry(struct Dot2SequentialCMHEntry *cmh_entry)
{
  Dot2CertType cert_type = kDot2CertType_Implicit;
  Dot2CertIssuerIdentifierType issuer_type = kDot2CertIssuerIdentifierType_Sha256AndDigest;
  const char *issuer_h8_str = "586c852974c7dba2";
  const char *binary_id_str = "C00ED625C865D3C1";
  Dot2CertIdType cert_id_type = kDot2CertIdType_BinaryId;
  Dot2CertBinaryIdLen cert_id_len = kDot2CertBinaryIdLen_Default;
  const char *craca_id_str = "000000";
  Dot2CertCRLSeries crl_series = 0;
  Dot2Time64 valid_start = 540171334000000ULL;
  Dot2Time64 valid_end = 543231334000000ULL;
  Dot2CertValidRegionType region_type = kDot2CertValidRegionType_Circular;
  Dot2Latitude region_lat = 375163721;
  Dot2Longitude region_lon = 1270332651;
  uint16_t region_radius = 3000;
  Dot2CertPermissionNum psid_num = 1;
  Dot2PSID psid_0 = 135;

  uint8_t cert[kDot2CertSize_Max], binary_id[kDot2CertBinaryIdLen_Default], craca_id[DOT2_CRACA_ID_LEN], issuer_h8[8];
  struct Dot2SHA256 cert_h;
  struct Dot2ECPrivateKey priv_key;
  struct Dot2ECPublicKey pub_key, recon_pub;

  EXPECT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_bundle_0_app_cert_1, cert), (int)g_tv_bundle_0_app_cert_1_size);
  EXPECT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_bundle_0_app_cert_1_h, cert_h.octs), DOT2_SHA_256_LEN);
  EXPECT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_bundle_0_app_cert_1_priv_key, priv_key.octs), DOT2_EC_256_KEY_LEN);
  EXPECT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_bundle_0_app_cert_1_pub_key, pub_key.u.octs), DOT2_EC_256_PUB_KEY_LEN);
  EXPECT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_bundle_0_app_cert_1_recon_pub, recon_pub.u.octs), DOT2_EC_256_COMPRESSED_PUB_KEY_LEN);
  EXPECT_EQ(Dot2Test_ConvertHexStrToOctets(issuer_h8_str, issuer_h8), 8);
  EXPECT_EQ(Dot2Test_ConvertHexStrToOctets(binary_id_str, binary_id), (int)cert_id_len);
  EXPECT_EQ(Dot2Test_ConvertHexStrToOctets(craca_id_str, craca_id), DOT2_CRACA_ID_LEN);

  EXPECT_EQ(cmh_entry->cert_size, g_tv_bundle_0_app_cert_1_size);
  EXPECT_TRUE(cmh_entry->cert);
  EXPECT_TRUE(Dot2Test_CompareOctets(cmh_entry->cert, cert, g_tv_bundle_0_app_cert_1_size));
  EXPECT_TRUE(Dot2Test_CompareOctets(cmh_entry->cert_h.octs, cert_h.octs, DOT2_SHA_256_LEN));
  EXPECT_TRUE(cmh_entry->issuer);
  EXPECT_TRUE(cmh_entry->asn1_cert);
  struct Dot2SequentialCMHInfo *cmh_info = &(cmh_entry->info);
  EXPECT_TRUE(cmh_info->eck_priv_key);
  EXPECT_TRUE(Dot2Test_CompareOctets(cmh_info->priv_key.octs, priv_key.octs, DOT2_EC_256_KEY_LEN));
  struct Dot2EECertContents *contents = &(cmh_info->cert_contents);
  // EXPECT_TRUE(Dot2Test_CompareOctets(contents->verify_pub_key.u.octs, pub_key.u.octs, DOT2_EC_256_PUB_KEY_LEN)); // CMH/CMHF에 공개키는 저장되지 않음.
  EXPECT_FALSE(contents->eck_verify_pub_key);
  struct Dot2CertCommonContents *common = &(contents->common);
  EXPECT_EQ(common->type, cert_type);
  EXPECT_EQ(common->issuer.type, issuer_type);
  EXPECT_TRUE(Dot2Test_CompareOctets(common->issuer.h8, issuer_h8, 8));
  EXPECT_EQ(common->id.type, cert_id_type);
  EXPECT_EQ(common->id.u.binary_id.len, cert_id_len);
  EXPECT_TRUE(Dot2Test_CompareOctets(common->id.u.binary_id.id, binary_id, cert_id_len));
  EXPECT_TRUE(Dot2Test_CompareOctets(common->craca_id, craca_id, sizeof(craca_id)));
  EXPECT_EQ(common->crl_series, crl_series);
  EXPECT_EQ(common->valid_start, valid_start);
  EXPECT_EQ(common->valid_end, valid_end);
  EXPECT_EQ(common->valid_region.type, region_type);
  EXPECT_EQ(common->valid_region.u.circular.center.lat, region_lat);
  EXPECT_EQ(common->valid_region.u.circular.center.lon, region_lon);
  EXPECT_EQ(common->valid_region.u.circular.radius, region_radius);
  // EXPECT_EQ((int)common->verify_key_indicator.type, kDot2CertVerificationKeyIndicatorType_ReconstructValue); // CMH/CMHF에 공개키재구성값은 저장되지 않는다.
  // EXPECT_TRUE(Dot2Test_CompareOctets(common->verify_key_indicator.key.u.octs, recon_pub.u.octs, DOT2_EC_256_COMPRESSED_PUB_KEY_LEN));
  EXPECT_FALSE(common->enc_pub_key_present);
  struct Dot2EECertPermissions *perms = &(contents->app_perms);
  EXPECT_EQ(perms->psid_num, psid_num);
  EXPECT_EQ(perms->psid[0], psid_0);
  if (cmh_entry->cert_size != g_tv_bundle_0_app_cert_0_size) { return false; }
  if (!cmh_entry->cert) { return false; }
  if (!Dot2Test_CompareOctets(cmh_entry->cert, cert, g_tv_bundle_0_app_cert_0_size)) { return false; }
  if (!Dot2Test_CompareOctets(cmh_entry->cert_h.octs, cert_h.octs, DOT2_SHA_256_LEN)) { return false; }
  if (!cmh_entry->issuer) { return false; }
  if (!cmh_entry->asn1_cert) { return false; }
  if (!cmh_info->eck_priv_key) { return false; }
  if (!Dot2Test_CompareOctets(cmh_info->priv_key.octs, priv_key.octs, DOT2_EC_256_KEY_LEN)) { return false; }
  if (contents->eck_verify_pub_key) { return false; }
  if (common->type != cert_type) { return false; }
  if (common->issuer.type != issuer_type) { return false; }
  if (!Dot2Test_CompareOctets(common->issuer.h8, issuer_h8, 8)) { return false; }
  if (common->id.type != cert_id_type) { return false; }
  if (common->id.u.binary_id.len != cert_id_len) { return false; }
  if (!Dot2Test_CompareOctets(common->id.u.binary_id.id, binary_id, cert_id_len)) { return false; }
  if (!Dot2Test_CompareOctets(common->craca_id, craca_id, sizeof(craca_id))) { return false; }
  if (common->crl_series != crl_series) { return false; }
  if (common->valid_start != valid_start) { return false; }
  if (common->valid_end != valid_end) { return false; }
  if (common->valid_region.type != region_type) { return false; }
  if (common->valid_region.u.circular.center.lat != region_lat) { return false; }
  if (common->valid_region.u.circular.center.lon != region_lon) { return false; }
  if (common->valid_region.u.circular.radius != region_radius) { return false; }
  if (common->enc_pub_key_present) { return false; }
  if (perms->psid_num != psid_num) { return false; }
  if (perms->psid[0] != psid_0) { return false; }
  return true;
}


/*
 * Pseudonym cert 13a_* 의 CMHSetEntry 정보 유효성을 체크한다.
 */
bool Dot2Test_Check_CertBundle_0_PseudonymCert_13a_CMHSetEntry(struct Dot2RotateCMHSetEntry *cmh_entry)
{
  uint32_t i = 0x13a;
  Dot2RotateCMHInfoNum cmh_info_num = kDot2RotateCMHInfoNum_PseudonymCertDefault;
  Dot2CertType cert_type = kDot2CertType_Implicit;
  Dot2CertIssuerIdentifierType issuer_type = kDot2CertIssuerIdentifierType_Sha256AndDigest;
  const char *issuer_h8_str = "586c852974c7dba2";
  Dot2CertIdType cert_id_type = kDot2CertIdType_LinkageData;
  const char *craca_id_str = "F04E21";
  Dot2CertCRLSeries crl_series = 1;
  Dot2Time64 valid_start = 537526803000000ULL;
  Dot2Time64 valid_end = 538135203000000ULL;
  Dot2CertValidRegionType region_type = kDot2CertValidRegionType_Identified;
  Dot2IdentifiedRegionNum region_id_num = 2;
  Dot2CountryCode region_id_0 = 840;
  Dot2CountryCode region_id_1 = 410;
  Dot2CertPermissionNum psid_num = 2;
  Dot2PSID psid_0 = 32;
  Dot2PSID psid_1 = 38;
  const char *jvalue_str = "0000000F";
  const char *linkage_value_str[kDot2CertJvalue_Max+1] = {
  "0D5F8BFB260B5C3523",
  "168837E9495D861EE3",
  "B98D6EF9F5D703B8FF",
  "EE636C0C1FF984C21A",
  "8419B0A934B61740BC",
  "9b3bff3692c0b98483",
  "3111fd1992721ac885",
  "c0b347d8b836389504",
  "ecf1684811286d0878",
  "7717882ed65f173d19",
  "4ba27d847c22924246",
  "8ed7657f7dc4ff3400",
  "a3ce662760f57e9730",
  "8c2e1c76af11c0fadf",
  "1ed4db165de23e28aa",
  "95039618d572e27597",
  "8271fb32950862fdd3",
  "f86a14945e219059e3",
  "f320744e33e087020c",
  "b263a3acf930919176"
  };
  bool grp_present = true;

  uint8_t cert[kDot2CertJvalue_Max+1][kDot2CertSize_Max];
  uint8_t craca_id[DOT2_CRACA_ID_LEN], jvalue[DOT2_GROUP_LINKAGE_J_VALUE_LEN];
  uint8_t linkage_val[kDot2CertJvalue_Max+1][DOT2_LINKAGE_VALUE_LEN], issuer_h8[8];
  Dot2CertSize cert_size[kDot2CertJvalue_Max+1];
  struct Dot2SHA256 cert_h[kDot2CertJvalue_Max+1];
  struct Dot2ECPrivateKey priv_key[kDot2CertJvalue_Max+1];
  struct Dot2ECPublicKey pub_key, recon_pub;
  struct Dot2RotateCMHInfo *cmh_info[kDot2CertJvalue_Max+1];

  // 테스트벡터 변환
  EXPECT_EQ(cert_size[0] = Dot2Test_ConvertHexStrToOctets(g_tv_bundle_0_pseudonym_13a_0_cert, cert[0]), g_tv_bundle_0_pseudonym_13a_0_cert_size);
  EXPECT_EQ(cert_size[1] = Dot2Test_ConvertHexStrToOctets(g_tv_bundle_0_pseudonym_13a_1_cert, cert[1]), g_tv_bundle_0_pseudonym_13a_1_cert_size);
  EXPECT_EQ(cert_size[2] = Dot2Test_ConvertHexStrToOctets(g_tv_bundle_0_pseudonym_13a_2_cert, cert[2]), g_tv_bundle_0_pseudonym_13a_2_cert_size);
  EXPECT_EQ(cert_size[3] = Dot2Test_ConvertHexStrToOctets(g_tv_bundle_0_pseudonym_13a_3_cert, cert[3]), g_tv_bundle_0_pseudonym_13a_3_cert_size);
  EXPECT_EQ(cert_size[4] = Dot2Test_ConvertHexStrToOctets(g_tv_bundle_0_pseudonym_13a_4_cert, cert[4]), g_tv_bundle_0_pseudonym_13a_4_cert_size);
  EXPECT_EQ(cert_size[5] = Dot2Test_ConvertHexStrToOctets(g_tv_bundle_0_pseudonym_13a_5_cert, cert[5]), g_tv_bundle_0_pseudonym_13a_5_cert_size);
  EXPECT_EQ(cert_size[6] = Dot2Test_ConvertHexStrToOctets(g_tv_bundle_0_pseudonym_13a_6_cert, cert[6]), g_tv_bundle_0_pseudonym_13a_6_cert_size);
  EXPECT_EQ(cert_size[7] = Dot2Test_ConvertHexStrToOctets(g_tv_bundle_0_pseudonym_13a_7_cert, cert[7]), g_tv_bundle_0_pseudonym_13a_7_cert_size);
  EXPECT_EQ(cert_size[8] = Dot2Test_ConvertHexStrToOctets(g_tv_bundle_0_pseudonym_13a_8_cert, cert[8]), g_tv_bundle_0_pseudonym_13a_8_cert_size);
  EXPECT_EQ(cert_size[9] = Dot2Test_ConvertHexStrToOctets(g_tv_bundle_0_pseudonym_13a_9_cert, cert[9]), g_tv_bundle_0_pseudonym_13a_9_cert_size);
  EXPECT_EQ(cert_size[10] = Dot2Test_ConvertHexStrToOctets(g_tv_bundle_0_pseudonym_13a_a_cert, cert[10]), g_tv_bundle_0_pseudonym_13a_a_cert_size);
  EXPECT_EQ(cert_size[11] = Dot2Test_ConvertHexStrToOctets(g_tv_bundle_0_pseudonym_13a_b_cert, cert[11]), g_tv_bundle_0_pseudonym_13a_b_cert_size);
  EXPECT_EQ(cert_size[12] = Dot2Test_ConvertHexStrToOctets(g_tv_bundle_0_pseudonym_13a_c_cert, cert[12]), g_tv_bundle_0_pseudonym_13a_c_cert_size);
  EXPECT_EQ(cert_size[13] = Dot2Test_ConvertHexStrToOctets(g_tv_bundle_0_pseudonym_13a_d_cert, cert[13]), g_tv_bundle_0_pseudonym_13a_d_cert_size);
  EXPECT_EQ(cert_size[14] = Dot2Test_ConvertHexStrToOctets(g_tv_bundle_0_pseudonym_13a_e_cert, cert[14]), g_tv_bundle_0_pseudonym_13a_e_cert_size);
  EXPECT_EQ(cert_size[15] = Dot2Test_ConvertHexStrToOctets(g_tv_bundle_0_pseudonym_13a_f_cert, cert[15]), g_tv_bundle_0_pseudonym_13a_f_cert_size);
  EXPECT_EQ(cert_size[16] = Dot2Test_ConvertHexStrToOctets(g_tv_bundle_0_pseudonym_13a_10_cert, cert[16]), g_tv_bundle_0_pseudonym_13a_10_cert_size);
  EXPECT_EQ(cert_size[17] = Dot2Test_ConvertHexStrToOctets(g_tv_bundle_0_pseudonym_13a_11_cert, cert[17]), g_tv_bundle_0_pseudonym_13a_11_cert_size);
  EXPECT_EQ(cert_size[18] = Dot2Test_ConvertHexStrToOctets(g_tv_bundle_0_pseudonym_13a_12_cert, cert[18]), g_tv_bundle_0_pseudonym_13a_12_cert_size);
  EXPECT_EQ(cert_size[19] = Dot2Test_ConvertHexStrToOctets(g_tv_bundle_0_pseudonym_13a_13_cert, cert[19]), g_tv_bundle_0_pseudonym_13a_13_cert_size);
  EXPECT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_bundle_0_pseudonym_13a_0_cert_h, cert_h[0].octs), DOT2_SHA_256_LEN);
  EXPECT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_bundle_0_pseudonym_13a_1_cert_h, cert_h[1].octs), DOT2_SHA_256_LEN);
  EXPECT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_bundle_0_pseudonym_13a_2_cert_h, cert_h[2].octs), DOT2_SHA_256_LEN);
  EXPECT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_bundle_0_pseudonym_13a_3_cert_h, cert_h[3].octs), DOT2_SHA_256_LEN);
  EXPECT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_bundle_0_pseudonym_13a_4_cert_h, cert_h[4].octs), DOT2_SHA_256_LEN);
  EXPECT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_bundle_0_pseudonym_13a_5_cert_h, cert_h[5].octs), DOT2_SHA_256_LEN);
  EXPECT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_bundle_0_pseudonym_13a_6_cert_h, cert_h[6].octs), DOT2_SHA_256_LEN);
  EXPECT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_bundle_0_pseudonym_13a_7_cert_h, cert_h[7].octs), DOT2_SHA_256_LEN);
  EXPECT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_bundle_0_pseudonym_13a_8_cert_h, cert_h[8].octs), DOT2_SHA_256_LEN);
  EXPECT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_bundle_0_pseudonym_13a_9_cert_h, cert_h[9].octs), DOT2_SHA_256_LEN);
  EXPECT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_bundle_0_pseudonym_13a_a_cert_h, cert_h[10].octs), DOT2_SHA_256_LEN);
  EXPECT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_bundle_0_pseudonym_13a_b_cert_h, cert_h[11].octs), DOT2_SHA_256_LEN);
  EXPECT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_bundle_0_pseudonym_13a_c_cert_h, cert_h[12].octs), DOT2_SHA_256_LEN);
  EXPECT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_bundle_0_pseudonym_13a_d_cert_h, cert_h[13].octs), DOT2_SHA_256_LEN);
  EXPECT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_bundle_0_pseudonym_13a_e_cert_h, cert_h[14].octs), DOT2_SHA_256_LEN);
  EXPECT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_bundle_0_pseudonym_13a_f_cert_h, cert_h[15].octs), DOT2_SHA_256_LEN);
  EXPECT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_bundle_0_pseudonym_13a_10_cert_h, cert_h[16].octs), DOT2_SHA_256_LEN);
  EXPECT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_bundle_0_pseudonym_13a_11_cert_h, cert_h[17].octs), DOT2_SHA_256_LEN);
  EXPECT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_bundle_0_pseudonym_13a_12_cert_h, cert_h[18].octs), DOT2_SHA_256_LEN);
  EXPECT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_bundle_0_pseudonym_13a_13_cert_h, cert_h[19].octs), DOT2_SHA_256_LEN);
  EXPECT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_bundle_0_pseudonym_13a_0_priv_key, priv_key[0].octs), DOT2_EC_256_KEY_LEN);
  EXPECT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_bundle_0_pseudonym_13a_1_priv_key, priv_key[1].octs), DOT2_EC_256_KEY_LEN);
  EXPECT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_bundle_0_pseudonym_13a_2_priv_key, priv_key[2].octs), DOT2_EC_256_KEY_LEN);
  EXPECT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_bundle_0_pseudonym_13a_3_priv_key, priv_key[3].octs), DOT2_EC_256_KEY_LEN);
  EXPECT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_bundle_0_pseudonym_13a_4_priv_key, priv_key[4].octs), DOT2_EC_256_KEY_LEN);
  EXPECT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_bundle_0_pseudonym_13a_5_priv_key, priv_key[5].octs), DOT2_EC_256_KEY_LEN);
  EXPECT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_bundle_0_pseudonym_13a_6_priv_key, priv_key[6].octs), DOT2_EC_256_KEY_LEN);
  EXPECT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_bundle_0_pseudonym_13a_7_priv_key, priv_key[7].octs), DOT2_EC_256_KEY_LEN);
  EXPECT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_bundle_0_pseudonym_13a_8_priv_key, priv_key[8].octs), DOT2_EC_256_KEY_LEN);
  EXPECT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_bundle_0_pseudonym_13a_9_priv_key, priv_key[9].octs), DOT2_EC_256_KEY_LEN);
  EXPECT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_bundle_0_pseudonym_13a_a_priv_key, priv_key[10].octs), DOT2_EC_256_KEY_LEN);
  EXPECT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_bundle_0_pseudonym_13a_b_priv_key, priv_key[11].octs), DOT2_EC_256_KEY_LEN);
  EXPECT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_bundle_0_pseudonym_13a_c_priv_key, priv_key[12].octs), DOT2_EC_256_KEY_LEN);
  EXPECT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_bundle_0_pseudonym_13a_d_priv_key, priv_key[13].octs), DOT2_EC_256_KEY_LEN);
  EXPECT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_bundle_0_pseudonym_13a_e_priv_key, priv_key[14].octs), DOT2_EC_256_KEY_LEN);
  EXPECT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_bundle_0_pseudonym_13a_f_priv_key, priv_key[15].octs), DOT2_EC_256_KEY_LEN);
  EXPECT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_bundle_0_pseudonym_13a_10_priv_key, priv_key[16].octs), DOT2_EC_256_KEY_LEN);
  EXPECT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_bundle_0_pseudonym_13a_11_priv_key, priv_key[17].octs), DOT2_EC_256_KEY_LEN);
  EXPECT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_bundle_0_pseudonym_13a_12_priv_key, priv_key[18].octs), DOT2_EC_256_KEY_LEN);
  EXPECT_EQ(Dot2Test_ConvertHexStrToOctets(g_tv_bundle_0_pseudonym_13a_13_priv_key, priv_key[19].octs), DOT2_EC_256_KEY_LEN);
  EXPECT_EQ(Dot2Test_ConvertHexStrToOctets(linkage_value_str[0], linkage_val[0]), DOT2_LINKAGE_VALUE_LEN);
  EXPECT_EQ(Dot2Test_ConvertHexStrToOctets(linkage_value_str[1], linkage_val[1]), DOT2_LINKAGE_VALUE_LEN);
  EXPECT_EQ(Dot2Test_ConvertHexStrToOctets(linkage_value_str[2], linkage_val[2]), DOT2_LINKAGE_VALUE_LEN);
  EXPECT_EQ(Dot2Test_ConvertHexStrToOctets(linkage_value_str[3], linkage_val[3]), DOT2_LINKAGE_VALUE_LEN);
  EXPECT_EQ(Dot2Test_ConvertHexStrToOctets(linkage_value_str[4], linkage_val[4]), DOT2_LINKAGE_VALUE_LEN);
  EXPECT_EQ(Dot2Test_ConvertHexStrToOctets(linkage_value_str[5], linkage_val[5]), DOT2_LINKAGE_VALUE_LEN);
  EXPECT_EQ(Dot2Test_ConvertHexStrToOctets(linkage_value_str[6], linkage_val[6]), DOT2_LINKAGE_VALUE_LEN);
  EXPECT_EQ(Dot2Test_ConvertHexStrToOctets(linkage_value_str[7], linkage_val[7]), DOT2_LINKAGE_VALUE_LEN);
  EXPECT_EQ(Dot2Test_ConvertHexStrToOctets(linkage_value_str[8], linkage_val[8]), DOT2_LINKAGE_VALUE_LEN);
  EXPECT_EQ(Dot2Test_ConvertHexStrToOctets(linkage_value_str[9], linkage_val[9]), DOT2_LINKAGE_VALUE_LEN);
  EXPECT_EQ(Dot2Test_ConvertHexStrToOctets(linkage_value_str[10], linkage_val[10]), DOT2_LINKAGE_VALUE_LEN);
  EXPECT_EQ(Dot2Test_ConvertHexStrToOctets(linkage_value_str[11], linkage_val[11]), DOT2_LINKAGE_VALUE_LEN);
  EXPECT_EQ(Dot2Test_ConvertHexStrToOctets(linkage_value_str[12], linkage_val[12]), DOT2_LINKAGE_VALUE_LEN);
  EXPECT_EQ(Dot2Test_ConvertHexStrToOctets(linkage_value_str[13], linkage_val[13]), DOT2_LINKAGE_VALUE_LEN);
  EXPECT_EQ(Dot2Test_ConvertHexStrToOctets(linkage_value_str[14], linkage_val[14]), DOT2_LINKAGE_VALUE_LEN);
  EXPECT_EQ(Dot2Test_ConvertHexStrToOctets(linkage_value_str[15], linkage_val[15]), DOT2_LINKAGE_VALUE_LEN);
  EXPECT_EQ(Dot2Test_ConvertHexStrToOctets(linkage_value_str[16], linkage_val[16]), DOT2_LINKAGE_VALUE_LEN);
  EXPECT_EQ(Dot2Test_ConvertHexStrToOctets(linkage_value_str[17], linkage_val[17]), DOT2_LINKAGE_VALUE_LEN);
  EXPECT_EQ(Dot2Test_ConvertHexStrToOctets(linkage_value_str[18], linkage_val[18]), DOT2_LINKAGE_VALUE_LEN);
  EXPECT_EQ(Dot2Test_ConvertHexStrToOctets(linkage_value_str[19], linkage_val[19]), DOT2_LINKAGE_VALUE_LEN);
  EXPECT_EQ(Dot2Test_ConvertHexStrToOctets(issuer_h8_str, issuer_h8), 8);
  EXPECT_EQ(Dot2Test_ConvertHexStrToOctets(craca_id_str, craca_id), DOT2_CRACA_ID_LEN);
  EXPECT_EQ(Dot2Test_ConvertHexStrToOctets(jvalue_str, jvalue), DOT2_GROUP_LINKAGE_J_VALUE_LEN);

  // 엔트리 정보 확인
  EXPECT_EQ(cmh_entry->info_num, cmh_info_num);
  EXPECT_EQ(cmh_entry->max_info_num, cmh_info_num);
  EXPECT_FALSE(cmh_entry->active_cmh);
  EXPECT_TRUE(cmh_entry->issuer);
  if (cmh_entry->info_num != cmh_info_num) { return false; }
  if (cmh_entry->max_info_num != cmh_info_num) { return false; }
  if (cmh_entry->active_cmh) { return false; }
  if (!cmh_entry->issuer) { return false; }

  // 공통정보 확인
  EXPECT_EQ(cmh_entry->common.i, i);
  EXPECT_EQ(cmh_entry->common.type, cert_type);
  EXPECT_EQ(cmh_entry->common.issuer.type, issuer_type);
  EXPECT_TRUE(Dot2Test_CompareOctets(cmh_entry->common.issuer.h8, issuer_h8, 8));
  EXPECT_TRUE(Dot2Test_CompareOctets(cmh_entry->common.craca_id, craca_id, sizeof(craca_id)));
  EXPECT_EQ(cmh_entry->common.crl_series, crl_series);
  EXPECT_EQ(cmh_entry->common.valid_start, valid_start);
  EXPECT_EQ(cmh_entry->common.valid_end, valid_end);
  EXPECT_EQ(cmh_entry->common.valid_region.type, region_type);
  EXPECT_EQ(cmh_entry->common.valid_region.u.id.num, region_id_num);
  EXPECT_EQ(cmh_entry->common.valid_region.u.id.country[0], region_id_0);
  EXPECT_EQ(cmh_entry->common.valid_region.u.id.country[1], region_id_1);
  EXPECT_EQ(cmh_entry->common.psid_num, psid_num);
  EXPECT_EQ(cmh_entry->common.psid[0], psid_0);
  EXPECT_EQ(cmh_entry->common.psid[1], psid_1);
  if (cmh_entry->common.i != i) { return false; }
  if (cmh_entry->common.type != cert_type) { return false; }
  if (cmh_entry->common.issuer.type != issuer_type) { return false; }
  if (!Dot2Test_CompareOctets(cmh_entry->common.issuer.h8, issuer_h8, 8)) { return false; }
  if (!Dot2Test_CompareOctets(cmh_entry->common.craca_id, craca_id, sizeof(craca_id))) { return false; }
  if (cmh_entry->common.crl_series != crl_series) { return false; }
  if (cmh_entry->common.valid_start != valid_start) { return false; }
  if (cmh_entry->common.valid_end != valid_end) { return false; }
  if (cmh_entry->common.valid_region.type != region_type) { return false; }
  if (cmh_entry->common.valid_region.u.id.num != region_id_num) { return false; }
  if (cmh_entry->common.valid_region.u.id.country[0] != region_id_0) { return false; }
  if (cmh_entry->common.valid_region.u.id.country[1] != region_id_1) { return false; }
  if (cmh_entry->common.psid_num != psid_num) { return false; }
  if (cmh_entry->common.psid[0] != psid_0) { return false; }
  if (cmh_entry->common.psid[1] != psid_1) { return false; }

  // 개별 CMH 정보 확인
  for (unsigned int cnt = 0; cnt < kDot2CertJvalue_Max + 1; cnt++) {
    cmh_info[cnt] = &(cmh_entry->cmh[cnt]);
    EXPECT_TRUE(cmh_info[cnt]->cert);
    EXPECT_EQ(cmh_info[cnt]->cert_size, cert_size[cnt]);
    EXPECT_TRUE(Dot2Test_CompareOctets(cmh_info[cnt]->cert, cert[cnt], cert_size[cnt]));
    EXPECT_TRUE(Dot2Test_CompareOctets(cmh_info[cnt]->cert_h.octs, cert_h[cnt].octs, DOT2_SHA_256_LEN));
    EXPECT_TRUE(cmh_info[cnt]->asn1_cert);
    EXPECT_EQ(cmh_info[cnt]->info.id.type, cert_id_type);
    EXPECT_EQ(cmh_info[cnt]->info.id.u.linkage_data.i, i);
    EXPECT_EQ(cmh_info[cnt]->info.id.u.linkage_data.grp_present, grp_present);
    EXPECT_TRUE(Dot2Test_CompareOctets(cmh_info[cnt]->info.id.u.linkage_data.val, linkage_val[cnt], DOT2_LINKAGE_VALUE_LEN));
    EXPECT_TRUE(Dot2Test_CompareOctets(cmh_info[cnt]->info.id.u.linkage_data.grp.j, jvalue, DOT2_GROUP_LINKAGE_J_VALUE_LEN));
    EXPECT_TRUE(Dot2Test_CompareOctets(cmh_info[cnt]->info.id.u.linkage_data.grp.val, linkage_val[cnt], DOT2_LINKAGE_VALUE_LEN));
    EXPECT_TRUE(Dot2Test_CompareOctets(cmh_info[cnt]->info.priv_key.octs, priv_key[cnt].octs, DOT2_EC_256_KEY_LEN));
    EXPECT_TRUE(cmh_info[cnt]->info.eck_priv_key);

    if (!cmh_info[cnt]->cert) { return false; }
    if (cmh_info[cnt]->cert_size != cert_size[cnt]) { return false; }
    if (!Dot2Test_CompareOctets(cmh_info[cnt]->cert, cert[cnt], cert_size[cnt])) { return false; }
    if (!Dot2Test_CompareOctets(cmh_info[cnt]->cert_h.octs, cert_h[cnt].octs, DOT2_SHA_256_LEN)) { return false; }
    if (!cmh_info[cnt]->asn1_cert) { return false; }
    if (cmh_info[cnt]->info.id.type != cert_id_type) { return false; }
    if (cmh_info[cnt]->info.id.u.linkage_data.i != i) { return false; }
    if (cmh_info[cnt]->info.id.u.linkage_data.grp_present != grp_present) { return false; }
    if (!Dot2Test_CompareOctets(cmh_info[cnt]->info.id.u.linkage_data.val, linkage_val[cnt], DOT2_LINKAGE_VALUE_LEN)) { return false; }
    if (!Dot2Test_CompareOctets(cmh_info[cnt]->info.id.u.linkage_data.grp.j, jvalue, DOT2_GROUP_LINKAGE_J_VALUE_LEN)) { return false; }
    if (!Dot2Test_CompareOctets(cmh_info[cnt]->info.id.u.linkage_data.grp.val, linkage_val[cnt], DOT2_LINKAGE_VALUE_LEN)) { return false; }
    if (!Dot2Test_CompareOctets(cmh_info[cnt]->info.priv_key.octs, priv_key[cnt].octs, DOT2_EC_256_KEY_LEN)) { return false; }
    if (!cmh_info[cnt]->info.eck_priv_key) { return false; }
  }
  return true;
}

