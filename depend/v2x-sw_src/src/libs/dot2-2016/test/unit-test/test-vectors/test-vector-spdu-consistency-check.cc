/** 
  * @file 
  * @brief SPDU consistency check 테스트에 사용되는 테스트벡터
  * @date 2022-03-18 
  * @author gyun 
  */

// 시스템 헤더 파일
#include <stddef.h>
#include <stdint.h>


/* 생성시각/만기시각이 포함되지 않은 SPDU (rse-0 인증서로 서명) - Dot2_ConstructSPDU()로 생성
rec1value Ieee1609Dot2Data ::= {
  protocolVersion 3,
  content signedData : {
    hashId sha256,
    tbsData {
      payload {
        data {
          protocolVersion 3,
          content unsecuredData : '00142512400000000764A5F6BB265B63C652087CFFFF807FF0010000FDFA1FA1007FFF1000000000'H
        }
      },
      headerInfo {
        psid 135
      }
    },
    signer certificate : {
      {
        version 3,
        type implicit,
        issuer sha256AndDigest : '163F2B7BC99253F4'H,
        toBeSigned {
          id binaryId : '66DF39628256B84E'H,
          cracaId '000000'H,
          crlSeries 0,
          validityPeriod {
            start 499525388,
            duration hours : 850
          },
          region circularRegion : {
            center {
              latitude 374856150,
              longitude 1270392830
            },
            radius 3000
          },
          appPermissions {
            {
              psid 135
            }
          },
          verifyKeyIndicator reconstructionValue : compressed-y-0 : '1445354A04AD1A94821725CA0F92F2B91B476CB12CD395C1C3DD51850521813B'H
        }
      }
    },
    signature ecdsaNistP256Signature : {
      rSig compressed-y-1 : '9EBCDD84DC32586CD636B46531A07F93C6704BE6A0AF417BB859F84FCE52F98C'H,
      sSig 'D5C060DF8F9E150A2B1F242627A79522BE1A0515306121650F8BF7078D84C656'H
    }
  }
}
 */
uint8_t g_sample_spdu_consistency_check_no_gentime_exptime[] = {
  0x03, 0x81, 0x00, 0x40, 0x03, 0x80, 0x28, 0x00, 0x14, 0x25, 0x12, 0x40, 0x00, 0x00, 0x00, 0x07,
  0x64, 0xa5, 0xf6, 0xbb, 0x26, 0x5b, 0x63, 0xc6, 0x52, 0x08, 0x7c, 0xff, 0xff, 0x80, 0x7f, 0xf0,
  0x01, 0x00, 0x00, 0xfd, 0xfa, 0x1f, 0xa1, 0x00, 0x7f, 0xff, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x87, 0x81, 0x01, 0x01, 0x00, 0x03, 0x01, 0x80, 0x16, 0x3f, 0x2b, 0x7b, 0xc9, 0x92, 0x53,
  0xf4, 0x50, 0x82, 0x08, 0x66, 0xdf, 0x39, 0x62, 0x82, 0x56, 0xb8, 0x4e, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x1d, 0xc6, 0x27, 0x0c, 0x84, 0x03, 0x52, 0x80, 0x16, 0x57, 0xd9, 0xd6, 0x4b, 0xb8, 0xa7,
  0xfe, 0x0b, 0xb8, 0x01, 0x01, 0x00, 0x01, 0x87, 0x81, 0x82, 0x14, 0x45, 0x35, 0x4a, 0x04, 0xad,
  0x1a, 0x94, 0x82, 0x17, 0x25, 0xca, 0x0f, 0x92, 0xf2, 0xb9, 0x1b, 0x47, 0x6c, 0xb1, 0x2c, 0xd3,
  0x95, 0xc1, 0xc3, 0xdd, 0x51, 0x85, 0x05, 0x21, 0x81, 0x3b, 0x80, 0x83, 0x9e, 0xbc, 0xdd, 0x84,
  0xdc, 0x32, 0x58, 0x6c, 0xd6, 0x36, 0xb4, 0x65, 0x31, 0xa0, 0x7f, 0x93, 0xc6, 0x70, 0x4b, 0xe6,
  0xa0, 0xaf, 0x41, 0x7b, 0xb8, 0x59, 0xf8, 0x4f, 0xce, 0x52, 0xf9, 0x8c, 0xd5, 0xc0, 0x60, 0xdf,
  0x8f, 0x9e, 0x15, 0x0a, 0x2b, 0x1f, 0x24, 0x26, 0x27, 0xa7, 0x95, 0x22, 0xbe, 0x1a, 0x05, 0x15,
  0x30, 0x61, 0x21, 0x65, 0x0f, 0x8b, 0xf7, 0x07, 0x8d, 0x84, 0xc6, 0x56
};
size_t g_sample_spdu_consistency_check_no_gentime_exptime_size = sizeof(g_sample_spdu_consistency_check_no_gentime_exptime);


/* 생성시각 포함, 만기시각 불포함 SPDU (rse-0 인증서로 서명) - Dot2_ConstructSPDU()로 생성
rec1value Ieee1609Dot2Data ::= {
  protocolVersion 3,
  content signedData : {
    hashId sha256,
    tbsData {
      payload {
        data {
          protocolVersion 3,
          content unsecuredData : '00142512400000000764A5F6BB265B63C652087CFFFF807FF0010000FDFA1FA1007FFF1000000000'H
        }
      },
      headerInfo {
        psid 135,
        generationTime 499525388000001
      }
    },
    signer certificate : {
      {
        version 3,
        type implicit,
        issuer sha256AndDigest : '163F2B7BC99253F4'H,
        toBeSigned {
          id binaryId : '66DF39628256B84E'H,
          cracaId '000000'H,
          crlSeries 0,
          validityPeriod {
            start 499525388,
            duration hours : 850
          },
          region circularRegion : {
            center {
              latitude 374856150,
              longitude 1270392830
            },
            radius 3000
          },
          appPermissions {
            {
              psid 135
            }
          },
          verifyKeyIndicator reconstructionValue : compressed-y-0 : '1445354A04AD1A94821725CA0F92F2B91B476CB12CD395C1C3DD51850521813B'H
        }
      }
    },
    signature ecdsaNistP256Signature : {
      rSig compressed-y-1 : '04758174DACB3CBBD01767408694E2194F52D5A8B289C5C872CCF07900D8B324'H,
      sSig 'D63D4A9D7CF684DEADC8DB2FE5C4A292C546A6F65A9011B4DDB2AA532B0BA324'H
    }
  }
}
 */
uint8_t g_sample_spdu_consistency_check_gentime_only[] = {
  0x03, 0x81, 0x00, 0x40, 0x03, 0x80, 0x28, 0x00, 0x14, 0x25, 0x12, 0x40, 0x00, 0x00, 0x00, 0x07,
  0x64, 0xa5, 0xf6, 0xbb, 0x26, 0x5b, 0x63, 0xc6, 0x52, 0x08, 0x7c, 0xff, 0xff, 0x80, 0x7f, 0xf0,
  0x01, 0x00, 0x00, 0xfd, 0xfa, 0x1f, 0xa1, 0x00, 0x7f, 0xff, 0x10, 0x00, 0x00, 0x00, 0x00, 0x40,
  0x01, 0x87, 0x00, 0x01, 0xc6, 0x50, 0xd1, 0x4e, 0xdb, 0x01, 0x81, 0x01, 0x01, 0x00, 0x03, 0x01,
  0x80, 0x16, 0x3f, 0x2b, 0x7b, 0xc9, 0x92, 0x53, 0xf4, 0x50, 0x82, 0x08, 0x66, 0xdf, 0x39, 0x62,
  0x82, 0x56, 0xb8, 0x4e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1d, 0xc6, 0x27, 0x0c, 0x84, 0x03, 0x52,
  0x80, 0x16, 0x57, 0xd9, 0xd6, 0x4b, 0xb8, 0xa7, 0xfe, 0x0b, 0xb8, 0x01, 0x01, 0x00, 0x01, 0x87,
  0x81, 0x82, 0x14, 0x45, 0x35, 0x4a, 0x04, 0xad, 0x1a, 0x94, 0x82, 0x17, 0x25, 0xca, 0x0f, 0x92,
  0xf2, 0xb9, 0x1b, 0x47, 0x6c, 0xb1, 0x2c, 0xd3, 0x95, 0xc1, 0xc3, 0xdd, 0x51, 0x85, 0x05, 0x21,
  0x81, 0x3b, 0x80, 0x83, 0x04, 0x75, 0x81, 0x74, 0xda, 0xcb, 0x3c, 0xbb, 0xd0, 0x17, 0x67, 0x40,
  0x86, 0x94, 0xe2, 0x19, 0x4f, 0x52, 0xd5, 0xa8, 0xb2, 0x89, 0xc5, 0xc8, 0x72, 0xcc, 0xf0, 0x79,
  0x00, 0xd8, 0xb3, 0x24, 0xd6, 0x3d, 0x4a, 0x9d, 0x7c, 0xf6, 0x84, 0xde, 0xad, 0xc8, 0xdb, 0x2f,
  0xe5, 0xc4, 0xa2, 0x92, 0xc5, 0x46, 0xa6, 0xf6, 0x5a, 0x90, 0x11, 0xb4, 0xdd, 0xb2, 0xaa, 0x53,
  0x2b, 0x0b, 0xa3, 0x24
};
size_t g_sample_spdu_consistency_check_gentime_only_size = sizeof(g_sample_spdu_consistency_check_gentime_only);


/* 생성시각 불포함, 만기시각 포함 SPDU (rse-0 인증서로 서명) - Dot2_ConstructSPDU()로 생성
rec1value Ieee1609Dot2Data ::= {
  protocolVersion 3,
  content signedData : {
    hashId sha256,
    tbsData {
      payload {
        data {
          protocolVersion 3,
          content unsecuredData : '00142512400000000764A5F6BB265B63C652087CFFFF807FF0010000FDFA1FA1007FFF1000000000'H
        }
      },
      headerInfo {
        psid 135,
        expiryTime 499525418000001
      }
    },
    signer certificate : {
      {
        version 3,
        type implicit,
        issuer sha256AndDigest : '163F2B7BC99253F4'H,
        toBeSigned {
          id binaryId : '66DF39628256B84E'H,
          cracaId '000000'H,
          crlSeries 0,
          validityPeriod {
            start 499525388,
            duration hours : 850
          },
          region circularRegion : {
            center {
              latitude 374856150,
              longitude 1270392830
            },
            radius 3000
          },
          appPermissions {
            {
              psid 135
            }
          },
          verifyKeyIndicator reconstructionValue : compressed-y-0 : '1445354A04AD1A94821725CA0F92F2B91B476CB12CD395C1C3DD51850521813B'H
        }
      }
    },
    signature ecdsaNistP256Signature : {
      rSig compressed-y-0 : 'FAC970C2521BE60F70747188EC48283F260FB0629E605B8557D4D8CD195146B4'H,
      sSig '029F11BF9322846C886E9BC415A836B78702735B403490084DA4AFED96F29181'H
    }
  }
}
 */
uint8_t g_sample_spdu_consistency_check_exptime_only[] = {
  0x03, 0x81, 0x00, 0x40, 0x03, 0x80, 0x28, 0x00, 0x14, 0x25, 0x12, 0x40, 0x00, 0x00, 0x00, 0x07,
  0x64, 0xa5, 0xf6, 0xbb, 0x26, 0x5b, 0x63, 0xc6, 0x52, 0x08, 0x7c, 0xff, 0xff, 0x80, 0x7f, 0xf0,
  0x01, 0x00, 0x00, 0xfd, 0xfa, 0x1f, 0xa1, 0x00, 0x7f, 0xff, 0x10, 0x00, 0x00, 0x00, 0x00, 0x20,
  0x01, 0x87, 0x00, 0x01, 0xc6, 0x50, 0xd3, 0x18, 0x9e, 0x81, 0x81, 0x01, 0x01, 0x00, 0x03, 0x01,
  0x80, 0x16, 0x3f, 0x2b, 0x7b, 0xc9, 0x92, 0x53, 0xf4, 0x50, 0x82, 0x08, 0x66, 0xdf, 0x39, 0x62,
  0x82, 0x56, 0xb8, 0x4e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1d, 0xc6, 0x27, 0x0c, 0x84, 0x03, 0x52,
  0x80, 0x16, 0x57, 0xd9, 0xd6, 0x4b, 0xb8, 0xa7, 0xfe, 0x0b, 0xb8, 0x01, 0x01, 0x00, 0x01, 0x87,
  0x81, 0x82, 0x14, 0x45, 0x35, 0x4a, 0x04, 0xad, 0x1a, 0x94, 0x82, 0x17, 0x25, 0xca, 0x0f, 0x92,
  0xf2, 0xb9, 0x1b, 0x47, 0x6c, 0xb1, 0x2c, 0xd3, 0x95, 0xc1, 0xc3, 0xdd, 0x51, 0x85, 0x05, 0x21,
  0x81, 0x3b, 0x80, 0x82, 0xfa, 0xc9, 0x70, 0xc2, 0x52, 0x1b, 0xe6, 0x0f, 0x70, 0x74, 0x71, 0x88,
  0xec, 0x48, 0x28, 0x3f, 0x26, 0x0f, 0xb0, 0x62, 0x9e, 0x60, 0x5b, 0x85, 0x57, 0xd4, 0xd8, 0xcd,
  0x19, 0x51, 0x46, 0xb4, 0x02, 0x9f, 0x11, 0xbf, 0x93, 0x22, 0x84, 0x6c, 0x88, 0x6e, 0x9b, 0xc4,
  0x15, 0xa8, 0x36, 0xb7, 0x87, 0x02, 0x73, 0x5b, 0x40, 0x34, 0x90, 0x08, 0x4d, 0xa4, 0xaf, 0xed,
  0x96, 0xf2, 0x91, 0x81
};
size_t g_sample_spdu_consistency_check_exptime_only_size = sizeof(g_sample_spdu_consistency_check_exptime_only);


/* 생성시각/만기시각 포함 SPDU (rse-0 인증서로 서명) - Dot2_ConstructSPDU()로 생성
rec1value Ieee1609Dot2Data ::= {
  protocolVersion 3,
  content signedData : {
    hashId sha256,
    tbsData {
      payload {
        data {
          protocolVersion 3,
          content unsecuredData : '00142512400000000764A5F6BB265B63C652087CFFFF807FF0010000FDFA1FA1007FFF1000000000'H
        }
      },
      headerInfo {
        psid 135,
        generationTime 499525388000001,
        expiryTime 499525418000001
      }
    },
    signer certificate : {
      {
        version 3,
        type implicit,
        issuer sha256AndDigest : '163F2B7BC99253F4'H,
        toBeSigned {
          id binaryId : '66DF39628256B84E'H,
          cracaId '000000'H,
          crlSeries 0,
          validityPeriod {
            start 499525388,
            duration hours : 850
          },
          region circularRegion : {
            center {
              latitude 374856150,
              longitude 1270392830
            },
            radius 3000
          },
          appPermissions {
            {
              psid 135
            }
          },
          verifyKeyIndicator reconstructionValue : compressed-y-0 : '1445354A04AD1A94821725CA0F92F2B91B476CB12CD395C1C3DD51850521813B'H
        }
      }
    },
    signature ecdsaNistP256Signature : {
      rSig compressed-y-1 : '9B4A46B9789C572AD73207A6D888EB3E2EC5D276331C839D0ED6ECC895F34817'H,
      sSig 'FAD6A4D4C4DF9AACAF61EFF21F74F9EB8F60BED74F66AB3014A5DA17BAE27DD5'H
    }
  }
}
 */
uint8_t g_sample_spdu_consistency_check_gentime_exptime[] = {
  0x03, 0x81, 0x00, 0x40, 0x03, 0x80, 0x28, 0x00, 0x14, 0x25, 0x12, 0x40, 0x00, 0x00, 0x00, 0x07,
  0x64, 0xa5, 0xf6, 0xbb, 0x26, 0x5b, 0x63, 0xc6, 0x52, 0x08, 0x7c, 0xff, 0xff, 0x80, 0x7f, 0xf0,
  0x01, 0x00, 0x00, 0xfd, 0xfa, 0x1f, 0xa1, 0x00, 0x7f, 0xff, 0x10, 0x00, 0x00, 0x00, 0x00, 0x60,
  0x01, 0x87, 0x00, 0x01, 0xc6, 0x50, 0xd1, 0x4e, 0xdb, 0x01, 0x00, 0x01, 0xc6, 0x50, 0xd3, 0x18,
  0x9e, 0x81, 0x81, 0x01, 0x01, 0x00, 0x03, 0x01, 0x80, 0x16, 0x3f, 0x2b, 0x7b, 0xc9, 0x92, 0x53,
  0xf4, 0x50, 0x82, 0x08, 0x66, 0xdf, 0x39, 0x62, 0x82, 0x56, 0xb8, 0x4e, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x1d, 0xc6, 0x27, 0x0c, 0x84, 0x03, 0x52, 0x80, 0x16, 0x57, 0xd9, 0xd6, 0x4b, 0xb8, 0xa7,
  0xfe, 0x0b, 0xb8, 0x01, 0x01, 0x00, 0x01, 0x87, 0x81, 0x82, 0x14, 0x45, 0x35, 0x4a, 0x04, 0xad,
  0x1a, 0x94, 0x82, 0x17, 0x25, 0xca, 0x0f, 0x92, 0xf2, 0xb9, 0x1b, 0x47, 0x6c, 0xb1, 0x2c, 0xd3,
  0x95, 0xc1, 0xc3, 0xdd, 0x51, 0x85, 0x05, 0x21, 0x81, 0x3b, 0x80, 0x83, 0x9b, 0x4a, 0x46, 0xb9,
  0x78, 0x9c, 0x57, 0x2a, 0xd7, 0x32, 0x07, 0xa6, 0xd8, 0x88, 0xeb, 0x3e, 0x2e, 0xc5, 0xd2, 0x76,
  0x33, 0x1c, 0x83, 0x9d, 0x0e, 0xd6, 0xec, 0xc8, 0x95, 0xf3, 0x48, 0x17, 0xfa, 0xd6, 0xa4, 0xd4,
  0xc4, 0xdf, 0x9a, 0xac, 0xaf, 0x61, 0xef, 0xf2, 0x1f, 0x74, 0xf9, 0xeb, 0x8f, 0x60, 0xbe, 0xd7,
  0x4f, 0x66, 0xab, 0x30, 0x14, 0xa5, 0xda, 0x17, 0xba, 0xe2, 0x7d, 0xd5
};
size_t g_sample_spdu_consistency_check_gentime_exptime_size = sizeof(g_sample_spdu_consistency_check_gentime_exptime);


/* 생성시각이 만기시각보다 미래인 SPDU (rse-0 인증서로 서명) - asn1.io에서 생성
   Dot2_ConstructSPDU() API로는 생성시각이 만기시각보다 미래인 SPDU를 생성하는 것이 불가능하다.
   asn1.io에서 생성하여 서명이 유효하지 않지만, 서명검증보다 Consistency check를 먼저 수행하므로 테스트하는데는 무관하다.
rec1value Ieee1609Dot2Data ::= {
  protocolVersion 3,
  content signedData : {
    hashId sha256,
    tbsData {
      payload {
        data {
          protocolVersion 3,
          content unsecuredData : '00142512400000000764A5F6BB265B63C652087CFFFF807FF0010000FDFA1FA1007FFF1000000000'H
        }
      },
      headerInfo {
        psid 135,
        generationTime 499525388000002,
        expiryTime 499525388000001
      }
    },
    signer certificate : {
      {
        version 3,
        type implicit,
        issuer sha256AndDigest : '163F2B7BC99253F4'H,
        toBeSigned {
          id binaryId : '66DF39628256B84E'H,
          cracaId '000000'H,
          crlSeries 0,
          validityPeriod {
            start 499525388,
            duration hours : 850
          },
          region circularRegion : {
            center {
              latitude 374856150,
              longitude 1270392830
            },
            radius 3000
          },
          appPermissions {
            {
              psid 135
            }
          },
          verifyKeyIndicator reconstructionValue : compressed-y-0 : '1445354A04AD1A94821725CA0F92F2B91B476CB12CD395C1C3DD51850521813B'H
        }
      }
    },
    signature ecdsaNistP256Signature : {
      rSig compressed-y-1 : '9B4A46B9789C572AD73207A6D888EB3E2EC5D276331C839D0ED6ECC895F34817'H,
      sSig 'FAD6A4D4C4DF9AACAF61EFF21F74F9EB8F60BED74F66AB3014A5DA17BAE27DD5'H
    }
  }
}
 */
uint8_t g_sample_spdu_consistency_check_gentime_is_future_than_exptime[] = {
  0x03, 0x81, 0x00, 0x40, 0x03, 0x80, 0x28, 0x00, 0x14, 0x25, 0x12, 0x40, 0x00, 0x00, 0x00, 0x07,
  0x64, 0xA5, 0xF6, 0xBB, 0x26, 0x5B, 0x63, 0xC6, 0x52, 0x08, 0x7C, 0xFF, 0xFF, 0x80, 0x7F, 0xF0,
  0x01, 0x00, 0x00, 0xFD, 0xFA, 0x1F, 0xA1, 0x00, 0x7F, 0xFF, 0x10, 0x00, 0x00, 0x00, 0x00, 0x60,
  0x01, 0x87, 0x00, 0x01, 0xC6, 0x50, 0xD1, 0x4E, 0xDB, 0x02, 0x00, 0x01, 0xC6, 0x50, 0xD1, 0x4E,
  0xDB, 0x01, 0x81, 0x01, 0x01, 0x00, 0x03, 0x01, 0x80, 0x16, 0x3F, 0x2B, 0x7B, 0xC9, 0x92, 0x53,
  0xF4, 0x50, 0x82, 0x08, 0x66, 0xDF, 0x39, 0x62, 0x82, 0x56, 0xB8, 0x4E, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x1D, 0xC6, 0x27, 0x0C, 0x84, 0x03, 0x52, 0x80, 0x16, 0x57, 0xD9, 0xD6, 0x4B, 0xB8, 0xA7,
  0xFE, 0x0B, 0xB8, 0x01, 0x01, 0x00, 0x01, 0x87, 0x81, 0x82, 0x14, 0x45, 0x35, 0x4A, 0x04, 0xAD,
  0x1A, 0x94, 0x82, 0x17, 0x25, 0xCA, 0x0F, 0x92, 0xF2, 0xB9, 0x1B, 0x47, 0x6C, 0xB1, 0x2C, 0xD3,
  0x95, 0xC1, 0xC3, 0xDD, 0x51, 0x85, 0x05, 0x21, 0x81, 0x3B, 0x80, 0x83, 0x9B, 0x4A, 0x46, 0xB9,
  0x78, 0x9C, 0x57, 0x2A, 0xD7, 0x32, 0x07, 0xA6, 0xD8, 0x88, 0xEB, 0x3E, 0x2E, 0xC5, 0xD2, 0x76,
  0x33, 0x1C, 0x83, 0x9D, 0x0E, 0xD6, 0xEC, 0xC8, 0x95, 0xF3, 0x48, 0x17, 0xFA, 0xD6, 0xA4, 0xD4,
  0xC4, 0xDF, 0x9A, 0xAC, 0xAF, 0x61, 0xEF, 0xF2, 0x1F, 0x74, 0xF9, 0xEB, 0x8F, 0x60, 0xBE, 0xD7,
  0x4F, 0x66, 0xAB, 0x30, 0x14, 0xA5, 0xDA, 0x17, 0xBA, 0xE2, 0x7D, 0xD5
};
size_t g_sample_spdu_consistency_check_gentime_is_future_than_exptime_size = sizeof(g_sample_spdu_consistency_check_gentime_is_future_than_exptime);


/* SPDU 만기시각이 rse-0 인증서 유효기간 시작시점보다 과거인 SPDU (rse-0 인증서로 서명) - asn1.io에서 생성
   Dot2_ConstructSPDU() API 사용 시, 시점에 맞는 CMH를 작동으로 찾아서 SPDU를 생성하므로, 서명 인증서의 유효기간을 벗어나는 SPDU를 생성할 수 없다.
   asn1.io에서 생성하여 서명이 유효하지 않지만, 서명검증보다 Consistency check를 먼저 수행하므로 테스트하는데는 무관하다.
rec1value Ieee1609Dot2Data ::= {
  protocolVersion 3,
  content signedData : {
    hashId sha256,
    tbsData {
      payload {
        data {
          protocolVersion 3,
          content unsecuredData : '00142512400000000764A5F6BB265B63C652087CFFFF807FF0010000FDFA1FA1007FFF1000000000'H
        }
      },
      headerInfo {
        psid 135,
        expiryTime 499525387999999 -- "rse-0 유효기간 시작시점 - 1"
      }
    },
    signer certificate : {
      {
        version 3,
        type implicit,
        issuer sha256AndDigest : '163F2B7BC99253F4'H,
        toBeSigned {
          id binaryId : '66DF39628256B84E'H,
          cracaId '000000'H,
          crlSeries 0,
          validityPeriod {
            start 499525388,
            duration hours : 850
          },
          region circularRegion : {
            center {
              latitude 374856150,
              longitude 1270392830
            },
            radius 3000
          },
          appPermissions {
            {
              psid 135
            }
          },
          verifyKeyIndicator reconstructionValue : compressed-y-0 : '1445354A04AD1A94821725CA0F92F2B91B476CB12CD395C1C3DD51850521813B'H
        }
      }
    },
    signature ecdsaNistP256Signature : {
      rSig compressed-y-1 : '9B4A46B9789C572AD73207A6D888EB3E2EC5D276331C839D0ED6ECC895F34817'H,
      sSig 'FAD6A4D4C4DF9AACAF61EFF21F74F9EB8F60BED74F66AB3014A5DA17BAE27DD5'H
    }
  }
}
 */
uint8_t g_sample_spdu_consistency_check_exptime_is_earlier_than_cert_valid_start[] = {
  0x03, 0x81, 0x00, 0x40, 0x03, 0x80, 0x28, 0x00, 0x14, 0x25, 0x12, 0x40, 0x00, 0x00, 0x00, 0x07,
  0x64, 0xA5, 0xF6, 0xBB, 0x26, 0x5B, 0x63, 0xC6, 0x52, 0x08, 0x7C, 0xFF, 0xFF, 0x80, 0x7F, 0xF0,
  0x01, 0x00, 0x00, 0xFD, 0xFA, 0x1F, 0xA1, 0x00, 0x7F, 0xFF, 0x10, 0x00, 0x00, 0x00, 0x00, 0x20,
  0x01, 0x87, 0x00, 0x01, 0xC6, 0x50, 0xD1, 0x4E, 0xDA, 0xFF, 0x81, 0x01, 0x01, 0x00, 0x03, 0x01,
  0x80, 0x16, 0x3F, 0x2B, 0x7B, 0xC9, 0x92, 0x53, 0xF4, 0x50, 0x82, 0x08, 0x66, 0xDF, 0x39, 0x62,
  0x82, 0x56, 0xB8, 0x4E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1D, 0xC6, 0x27, 0x0C, 0x84, 0x03, 0x52,
  0x80, 0x16, 0x57, 0xD9, 0xD6, 0x4B, 0xB8, 0xA7, 0xFE, 0x0B, 0xB8, 0x01, 0x01, 0x00, 0x01, 0x87,
  0x81, 0x82, 0x14, 0x45, 0x35, 0x4A, 0x04, 0xAD, 0x1A, 0x94, 0x82, 0x17, 0x25, 0xCA, 0x0F, 0x92,
  0xF2, 0xB9, 0x1B, 0x47, 0x6C, 0xB1, 0x2C, 0xD3, 0x95, 0xC1, 0xC3, 0xDD, 0x51, 0x85, 0x05, 0x21,
  0x81, 0x3B, 0x80, 0x83, 0x9B, 0x4A, 0x46, 0xB9, 0x78, 0x9C, 0x57, 0x2A, 0xD7, 0x32, 0x07, 0xA6,
  0xD8, 0x88, 0xEB, 0x3E, 0x2E, 0xC5, 0xD2, 0x76, 0x33, 0x1C, 0x83, 0x9D, 0x0E, 0xD6, 0xEC, 0xC8,
  0x95, 0xF3, 0x48, 0x17, 0xFA, 0xD6, 0xA4, 0xD4, 0xC4, 0xDF, 0x9A, 0xAC, 0xAF, 0x61, 0xEF, 0xF2,
  0x1F, 0x74, 0xF9, 0xEB, 0x8F, 0x60, 0xBE, 0xD7, 0x4F, 0x66, 0xAB, 0x30, 0x14, 0xA5, 0xDA, 0x17,
  0xBA, 0xE2, 0x7D, 0xD5
};
size_t g_sample_spdu_consistency_check_exptime_is_earlier_than_cert_valid_start_size = sizeof(g_sample_spdu_consistency_check_exptime_is_earlier_than_cert_valid_start);


/* SPDU 만기시각이 rse-0 인증서 유효기간 종료시점보다 미래인 SPDU (rse-0 인증서로 서명) - asn1.io에서 생성
   Dot2_ConstructSPDU() API 사용 시, 시점에 맞는 CMH를 작동으로 찾아서 SPDU를 생성하므로, 서명 인증서의 유효기간을 벗어나는 SPDU를 생성할 수 없다.
   asn1.io에서 생성하여 서명이 유효하지 않지만, 서명검증보다 Consistency check를 먼저 수행하므로 테스트하는데는 무관하다.
rec1value Ieee1609Dot2Data ::= {
  protocolVersion 3,
  content signedData : {
    hashId sha256,
    tbsData {
      payload {
        data {
          protocolVersion 3,
          content unsecuredData : '00142512400000000764A5F6BB265B63C652087CFFFF807FF0010000FDFA1FA1007FFF1000000000'H
        }
      },
      headerInfo {
        psid 135,
        expiryTime 502585388000001 -- "rse-0 유효기간 종료시점 + 1"
      }
    },
    signer certificate : {
      {
        version 3,
        type implicit,
        issuer sha256AndDigest : '163F2B7BC99253F4'H,
        toBeSigned {
          id binaryId : '66DF39628256B84E'H,
          cracaId '000000'H,
          crlSeries 0,
          validityPeriod {
            start 499525388,
            duration hours : 850
          },
          region circularRegion : {
            center {
              latitude 374856150,
              longitude 1270392830
            },
            radius 3000
          },
          appPermissions {
            {
              psid 135
            }
          },
          verifyKeyIndicator reconstructionValue : compressed-y-0 : '1445354A04AD1A94821725CA0F92F2B91B476CB12CD395C1C3DD51850521813B'H
        }
      }
    },
    signature ecdsaNistP256Signature : {
      rSig compressed-y-1 : '9B4A46B9789C572AD73207A6D888EB3E2EC5D276331C839D0ED6ECC895F34817'H,
      sSig 'FAD6A4D4C4DF9AACAF61EFF21F74F9EB8F60BED74F66AB3014A5DA17BAE27DD5'H
    }
  }
}
 */
uint8_t g_sample_spdu_consistency_check_exptime_is_later_than_cert_valid_end[] = {
  0x03, 0x81, 0x00, 0x40, 0x03, 0x80, 0x28, 0x00, 0x14, 0x25, 0x12, 0x40, 0x00, 0x00, 0x00, 0x07,
  0x64, 0xA5, 0xF6, 0xBB, 0x26, 0x5B, 0x63, 0xC6, 0x52, 0x08, 0x7C, 0xFF, 0xFF, 0x80, 0x7F, 0xF0,
  0x01, 0x00, 0x00, 0xFD, 0xFA, 0x1F, 0xA1, 0x00, 0x7F, 0xFF, 0x10, 0x00, 0x00, 0x00, 0x00, 0x20,
  0x01, 0x87, 0x00, 0x01, 0xC9, 0x19, 0x47, 0x85, 0x63, 0x01, 0x81, 0x01, 0x01, 0x00, 0x03, 0x01,
  0x80, 0x16, 0x3F, 0x2B, 0x7B, 0xC9, 0x92, 0x53, 0xF4, 0x50, 0x82, 0x08, 0x66, 0xDF, 0x39, 0x62,
  0x82, 0x56, 0xB8, 0x4E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1D, 0xC6, 0x27, 0x0C, 0x84, 0x03, 0x52,
  0x80, 0x16, 0x57, 0xD9, 0xD6, 0x4B, 0xB8, 0xA7, 0xFE, 0x0B, 0xB8, 0x01, 0x01, 0x00, 0x01, 0x87,
  0x81, 0x82, 0x14, 0x45, 0x35, 0x4A, 0x04, 0xAD, 0x1A, 0x94, 0x82, 0x17, 0x25, 0xCA, 0x0F, 0x92,
  0xF2, 0xB9, 0x1B, 0x47, 0x6C, 0xB1, 0x2C, 0xD3, 0x95, 0xC1, 0xC3, 0xDD, 0x51, 0x85, 0x05, 0x21,
  0x81, 0x3B, 0x80, 0x83, 0x9B, 0x4A, 0x46, 0xB9, 0x78, 0x9C, 0x57, 0x2A, 0xD7, 0x32, 0x07, 0xA6,
  0xD8, 0x88, 0xEB, 0x3E, 0x2E, 0xC5, 0xD2, 0x76, 0x33, 0x1C, 0x83, 0x9D, 0x0E, 0xD6, 0xEC, 0xC8,
  0x95, 0xF3, 0x48, 0x17, 0xFA, 0xD6, 0xA4, 0xD4, 0xC4, 0xDF, 0x9A, 0xAC, 0xAF, 0x61, 0xEF, 0xF2,
  0x1F, 0x74, 0xF9, 0xEB, 0x8F, 0x60, 0xBE, 0xD7, 0x4F, 0x66, 0xAB, 0x30, 0x14, 0xA5, 0xDA, 0x17,
  0xBA, 0xE2, 0x7D, 0xD5
};
size_t g_sample_spdu_consistency_check_exptime_is_later_than_cert_valid_end_size = sizeof(g_sample_spdu_consistency_check_exptime_is_later_than_cert_valid_end);


/* SPDU 생성시각이 rse-0 인증서 유효기간 시작시점보다 과거인 SPDU (rse-0 인증서로 서명) - asn1.io에서 생성
   Dot2_ConstructSPDU() API 사용 시, 시점에 맞는 CMH를 작동으로 찾아서 SPDU를 생성하므로, 서명 인증서의 유효기간을 벗어나는 SPDU를 생성할 수 없다.
   asn1.io에서 생성하여 서명이 유효하지 않지만, 서명검증보다 Consistency check를 먼저 수행하므로 테스트하는데는 무관하다.
rec1value Ieee1609Dot2Data ::= {
  protocolVersion 3,
  content signedData : {
    hashId sha256,
    tbsData {
      payload {
        data {
          protocolVersion 3,
          content unsecuredData : '00142512400000000764A5F6BB265B63C652087CFFFF807FF0010000FDFA1FA1007FFF1000000000'H
        }
      },
      headerInfo {
        psid 135,
        generationTime 499525387999999 -- "rse-0 유효기간 시작시점 - 1"
      }
    },
    signer certificate : {
      {
        version 3,
        type implicit,
        issuer sha256AndDigest : '163F2B7BC99253F4'H,
        toBeSigned {
          id binaryId : '66DF39628256B84E'H,
          cracaId '000000'H,
          crlSeries 0,
          validityPeriod {
            start 499525388,
            duration hours : 850
          },
          region circularRegion : {
            center {
              latitude 374856150,
              longitude 1270392830
            },
            radius 3000
          },
          appPermissions {
            {
              psid 135
            }
          },
          verifyKeyIndicator reconstructionValue : compressed-y-0 : '1445354A04AD1A94821725CA0F92F2B91B476CB12CD395C1C3DD51850521813B'H
        }
      }
    },
    signature ecdsaNistP256Signature : {
      rSig compressed-y-1 : '9B4A46B9789C572AD73207A6D888EB3E2EC5D276331C839D0ED6ECC895F34817'H,
      sSig 'FAD6A4D4C4DF9AACAF61EFF21F74F9EB8F60BED74F66AB3014A5DA17BAE27DD5'H
    }
  }
}
 */
uint8_t g_sample_spdu_consistency_check_gentime_is_earlier_than_cert_valid_start[] = {
  0x03, 0x81, 0x00, 0x40, 0x03, 0x80, 0x28, 0x00, 0x14, 0x25, 0x12, 0x40, 0x00, 0x00, 0x00, 0x07,
  0x64, 0xA5, 0xF6, 0xBB, 0x26, 0x5B, 0x63, 0xC6, 0x52, 0x08, 0x7C, 0xFF, 0xFF, 0x80, 0x7F, 0xF0,
  0x01, 0x00, 0x00, 0xFD, 0xFA, 0x1F, 0xA1, 0x00, 0x7F, 0xFF, 0x10, 0x00, 0x00, 0x00, 0x00, 0x40,
  0x01, 0x87, 0x00, 0x01, 0xC6, 0x50, 0xD1, 0x4E, 0xDA, 0xFF, 0x81, 0x01, 0x01, 0x00, 0x03, 0x01,
  0x80, 0x16, 0x3F, 0x2B, 0x7B, 0xC9, 0x92, 0x53, 0xF4, 0x50, 0x82, 0x08, 0x66, 0xDF, 0x39, 0x62,
  0x82, 0x56, 0xB8, 0x4E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1D, 0xC6, 0x27, 0x0C, 0x84, 0x03, 0x52,
  0x80, 0x16, 0x57, 0xD9, 0xD6, 0x4B, 0xB8, 0xA7, 0xFE, 0x0B, 0xB8, 0x01, 0x01, 0x00, 0x01, 0x87,
  0x81, 0x82, 0x14, 0x45, 0x35, 0x4A, 0x04, 0xAD, 0x1A, 0x94, 0x82, 0x17, 0x25, 0xCA, 0x0F, 0x92,
  0xF2, 0xB9, 0x1B, 0x47, 0x6C, 0xB1, 0x2C, 0xD3, 0x95, 0xC1, 0xC3, 0xDD, 0x51, 0x85, 0x05, 0x21,
  0x81, 0x3B, 0x80, 0x83, 0x9B, 0x4A, 0x46, 0xB9, 0x78, 0x9C, 0x57, 0x2A, 0xD7, 0x32, 0x07, 0xA6,
  0xD8, 0x88, 0xEB, 0x3E, 0x2E, 0xC5, 0xD2, 0x76, 0x33, 0x1C, 0x83, 0x9D, 0x0E, 0xD6, 0xEC, 0xC8,
  0x95, 0xF3, 0x48, 0x17, 0xFA, 0xD6, 0xA4, 0xD4, 0xC4, 0xDF, 0x9A, 0xAC, 0xAF, 0x61, 0xEF, 0xF2,
  0x1F, 0x74, 0xF9, 0xEB, 0x8F, 0x60, 0xBE, 0xD7, 0x4F, 0x66, 0xAB, 0x30, 0x14, 0xA5, 0xDA, 0x17,
  0xBA, 0xE2, 0x7D, 0xD5
};
size_t g_sample_spdu_consistency_check_gentime_is_earlier_than_cert_valid_start_size = sizeof(g_sample_spdu_consistency_check_gentime_is_earlier_than_cert_valid_start);


/* SPDU 생성시각이 rse-0 인증서 유효기간 종료시점보다 미래인 SPDU (rse-0 인증서로 서명) - asn1.io에서 생성
   Dot2_ConstructSPDU() API 사용 시, 시점에 맞는 CMH를 작동으로 찾아서 SPDU를 생성하므로, 서명 인증서의 유효기간을 벗어나는 SPDU를 생성할 수 없다.
   asn1.io에서 생성하여 서명이 유효하지 않지만, 서명검증보다 Consistency check를 먼저 수행하므로 테스트하는데는 무관하다.
rec1value Ieee1609Dot2Data ::= {
  protocolVersion 3,
  content signedData : {
    hashId sha256,
    tbsData {
      payload {
        data {
          protocolVersion 3,
          content unsecuredData : '00142512400000000764A5F6BB265B63C652087CFFFF807FF0010000FDFA1FA1007FFF1000000000'H
        }
      },
      headerInfo {
        psid 135,
        generationTime 502585388000001 -- "rse-0 유효기간 종료시점 + 1"
      }
    },
    signer certificate : {
      {
        version 3,
        type implicit,
        issuer sha256AndDigest : '163F2B7BC99253F4'H,
        toBeSigned {
          id binaryId : '66DF39628256B84E'H,
          cracaId '000000'H,
          crlSeries 0,
          validityPeriod {
            start 499525388,
            duration hours : 850
          },
          region circularRegion : {
            center {
              latitude 374856150,
              longitude 1270392830
            },
            radius 3000
          },
          appPermissions {
            {
              psid 135
            }
          },
          verifyKeyIndicator reconstructionValue : compressed-y-0 : '1445354A04AD1A94821725CA0F92F2B91B476CB12CD395C1C3DD51850521813B'H
        }
      }
    },
    signature ecdsaNistP256Signature : {
      rSig compressed-y-1 : '9B4A46B9789C572AD73207A6D888EB3E2EC5D276331C839D0ED6ECC895F34817'H,
      sSig 'FAD6A4D4C4DF9AACAF61EFF21F74F9EB8F60BED74F66AB3014A5DA17BAE27DD5'H
    }
  }
}
 */
uint8_t g_sample_spdu_consistency_check_gentime_is_later_than_cert_valid_end[] = {
  0x03, 0x81, 0x00, 0x40, 0x03, 0x80, 0x28, 0x00, 0x14, 0x25, 0x12, 0x40, 0x00, 0x00, 0x00, 0x07,
  0x64, 0xA5, 0xF6, 0xBB, 0x26, 0x5B, 0x63, 0xC6, 0x52, 0x08, 0x7C, 0xFF, 0xFF, 0x80, 0x7F, 0xF0,
  0x01, 0x00, 0x00, 0xFD, 0xFA, 0x1F, 0xA1, 0x00, 0x7F, 0xFF, 0x10, 0x00, 0x00, 0x00, 0x00, 0x40,
  0x01, 0x87, 0x00, 0x01, 0xC9, 0x19, 0x47, 0x85, 0x63, 0x01, 0x81, 0x01, 0x01, 0x00, 0x03, 0x01,
  0x80, 0x16, 0x3F, 0x2B, 0x7B, 0xC9, 0x92, 0x53, 0xF4, 0x50, 0x82, 0x08, 0x66, 0xDF, 0x39, 0x62,
  0x82, 0x56, 0xB8, 0x4E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1D, 0xC6, 0x27, 0x0C, 0x84, 0x03, 0x52,
  0x80, 0x16, 0x57, 0xD9, 0xD6, 0x4B, 0xB8, 0xA7, 0xFE, 0x0B, 0xB8, 0x01, 0x01, 0x00, 0x01, 0x87,
  0x81, 0x82, 0x14, 0x45, 0x35, 0x4A, 0x04, 0xAD, 0x1A, 0x94, 0x82, 0x17, 0x25, 0xCA, 0x0F, 0x92,
  0xF2, 0xB9, 0x1B, 0x47, 0x6C, 0xB1, 0x2C, 0xD3, 0x95, 0xC1, 0xC3, 0xDD, 0x51, 0x85, 0x05, 0x21,
  0x81, 0x3B, 0x80, 0x83, 0x9B, 0x4A, 0x46, 0xB9, 0x78, 0x9C, 0x57, 0x2A, 0xD7, 0x32, 0x07, 0xA6,
  0xD8, 0x88, 0xEB, 0x3E, 0x2E, 0xC5, 0xD2, 0x76, 0x33, 0x1C, 0x83, 0x9D, 0x0E, 0xD6, 0xEC, 0xC8,
  0x95, 0xF3, 0x48, 0x17, 0xFA, 0xD6, 0xA4, 0xD4, 0xC4, 0xDF, 0x9A, 0xAC, 0xAF, 0x61, 0xEF, 0xF2,
  0x1F, 0x74, 0xF9, 0xEB, 0x8F, 0x60, 0xBE, 0xD7, 0x4F, 0x66, 0xAB, 0x30, 0x14, 0xA5, 0xDA, 0x17,
  0xBA, 0xE2, 0x7D, 0xD5
};
size_t g_sample_spdu_consistency_check_gentime_is_later_than_cert_valid_end_size = sizeof(g_sample_spdu_consistency_check_gentime_is_later_than_cert_valid_end);


/* 생성좌표가 포함되지 않은 SPDU (rse-0 인증서로 서명) - Dot2_ConstructSPDU()로 생성
rec1value Ieee1609Dot2Data ::= {
  protocolVersion 3,
  content signedData : {
    hashId sha256,
    tbsData {
      payload {
        data {
          protocolVersion 3,
          content unsecuredData : '00142512400000000764A5F6BB265B63C652087CFFFF807FF0010000FDFA1FA1007FFF1000000000'H
        }
      },
      headerInfo {
        psid 135
      }
    },
    signer certificate : {
      {
        version 3,
        type implicit,
        issuer sha256AndDigest : '163F2B7BC99253F4'H,
        toBeSigned {
          id binaryId : '66DF39628256B84E'H,
          cracaId '000000'H,
          crlSeries 0,
          validityPeriod {
            start 499525388,
            duration hours : 850
          },
          region circularRegion : {
            center {
              latitude 374856150,
              longitude 1270392830
            },
            radius 3000
          },
          appPermissions {
            {
              psid 135
            }
          },
          verifyKeyIndicator reconstructionValue : compressed-y-0 : '1445354A04AD1A94821725CA0F92F2B91B476CB12CD395C1C3DD51850521813B'H
        }
      }
    },
    signature ecdsaNistP256Signature : {
      rSig compressed-y-1 : '9EBCDD84DC32586CD636B46531A07F93C6704BE6A0AF417BB859F84FCE52F98C'H,
      sSig 'D5C060DF8F9E150A2B1F242627A79522BE1A0515306121650F8BF7078D84C656'H
    }
  }
}
 */
uint8_t g_sample_spdu_consistency_check_no_gen_location[] = {
  0x03, 0x81, 0x00, 0x40, 0x03, 0x80, 0x28, 0x00, 0x14, 0x25, 0x12, 0x40, 0x00, 0x00, 0x00, 0x07,
  0x64, 0xa5, 0xf6, 0xbb, 0x26, 0x5b, 0x63, 0xc6, 0x52, 0x08, 0x7c, 0xff, 0xff, 0x80, 0x7f, 0xf0,
  0x01, 0x00, 0x00, 0xfd, 0xfa, 0x1f, 0xa1, 0x00, 0x7f, 0xff, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x87, 0x81, 0x01, 0x01, 0x00, 0x03, 0x01, 0x80, 0x16, 0x3f, 0x2b, 0x7b, 0xc9, 0x92, 0x53,
  0xf4, 0x50, 0x82, 0x08, 0x66, 0xdf, 0x39, 0x62, 0x82, 0x56, 0xb8, 0x4e, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x1d, 0xc6, 0x27, 0x0c, 0x84, 0x03, 0x52, 0x80, 0x16, 0x57, 0xd9, 0xd6, 0x4b, 0xb8, 0xa7,
  0xfe, 0x0b, 0xb8, 0x01, 0x01, 0x00, 0x01, 0x87, 0x81, 0x82, 0x14, 0x45, 0x35, 0x4a, 0x04, 0xad,
  0x1a, 0x94, 0x82, 0x17, 0x25, 0xca, 0x0f, 0x92, 0xf2, 0xb9, 0x1b, 0x47, 0x6c, 0xb1, 0x2c, 0xd3,
  0x95, 0xc1, 0xc3, 0xdd, 0x51, 0x85, 0x05, 0x21, 0x81, 0x3b, 0x80, 0x83, 0x9e, 0xbc, 0xdd, 0x84,
  0xdc, 0x32, 0x58, 0x6c, 0xd6, 0x36, 0xb4, 0x65, 0x31, 0xa0, 0x7f, 0x93, 0xc6, 0x70, 0x4b, 0xe6,
  0xa0, 0xaf, 0x41, 0x7b, 0xb8, 0x59, 0xf8, 0x4f, 0xce, 0x52, 0xf9, 0x8c, 0xd5, 0xc0, 0x60, 0xdf,
  0x8f, 0x9e, 0x15, 0x0a, 0x2b, 0x1f, 0x24, 0x26, 0x27, 0xa7, 0x95, 0x22, 0xbe, 0x1a, 0x05, 0x15,
  0x30, 0x61, 0x21, 0x65, 0x0f, 0x8b, 0xf7, 0x07, 0x8d, 0x84, 0xc6, 0x56
};
size_t g_sample_spdu_consistency_check_no_gen_location_size = sizeof(g_sample_spdu_consistency_check_no_gen_location);


/* 생성좌표가 rse-0 인증서 유효지역 내에 포함된 SPDU (rse-0 인증서로 서명) - Dot2_ConstructSPDU()로 생성
rec1value Ieee1609Dot2Data ::= {
  protocolVersion 3,
  content signedData : {
    hashId sha256,
    tbsData {
      payload {
        data {
          protocolVersion 3,
          content unsecuredData : '00142512400000000764A5F6BB265B63C652087CFFFF807FF0010000FDFA1FA1007FFF1000000000'H
        }
      },
      headerInfo {
        psid 135,
        generationLocation {
          latitude 374856150,
          longitude 1270392830,
          elevation 500
        }
      }
    },
    signer certificate : {
      {
        version 3,
        type implicit,
        issuer sha256AndDigest : '163F2B7BC99253F4'H,
        toBeSigned {
          id binaryId : '66DF39628256B84E'H,
          cracaId '000000'H,
          crlSeries 0,
          validityPeriod {
            start 499525388,
            duration hours : 850
          },
          region circularRegion : {
            center {
              latitude 374856150,
              longitude 1270392830
            },
            radius 3000
          },
          appPermissions {
            {
              psid 135
            }
          },
          verifyKeyIndicator reconstructionValue : compressed-y-0 : '1445354A04AD1A94821725CA0F92F2B91B476CB12CD395C1C3DD51850521813B'H
        }
      }
    },
    signature ecdsaNistP256Signature : {
      rSig x-only : '9CD0E5FC34CF2CA08FB90947123FEF668C8F7D4D1D2CA4424C05475E80452B7E'H,
      sSig '156DE978714C872A15D0BEBC883A303A02A5E172E688D4741FF5932410E8D3CD'H
    }
  }
}
 */
uint8_t g_sample_spdu_consistency_check_gen_location_in_cert_circular_region[] = {
  0x03, 0x81, 0x00, 0x40, 0x03, 0x80, 0x28, 0x00, 0x14, 0x25, 0x12, 0x40, 0x00, 0x00, 0x00, 0x07,
  0x64, 0xA5, 0xF6, 0xBB, 0x26, 0x5B, 0x63, 0xC6, 0x52, 0x08, 0x7C, 0xFF, 0xFF, 0x80, 0x7F, 0xF0,
  0x01, 0x00, 0x00, 0xFD, 0xFA, 0x1F, 0xA1, 0x00, 0x7F, 0xFF, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10,
  0x01, 0x87, 0x16, 0x57, 0xD9, 0xD6, 0x4B, 0xB8, 0xA7, 0xFE, 0x01, 0xF4, 0x81, 0x01, 0x01, 0x00,
  0x03, 0x01, 0x80, 0x16, 0x3F, 0x2B, 0x7B, 0xC9, 0x92, 0x53, 0xF4, 0x50, 0x82, 0x08, 0x66, 0xDF,
  0x39, 0x62, 0x82, 0x56, 0xB8, 0x4E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1D, 0xC6, 0x27, 0x0C, 0x84,
  0x03, 0x52, 0x80, 0x16, 0x57, 0xD9, 0xD6, 0x4B, 0xB8, 0xA7, 0xFE, 0x0B, 0xB8, 0x01, 0x01, 0x00,
  0x01, 0x87, 0x81, 0x82, 0x14, 0x45, 0x35, 0x4A, 0x04, 0xAD, 0x1A, 0x94, 0x82, 0x17, 0x25, 0xCA,
  0x0F, 0x92, 0xF2, 0xB9, 0x1B, 0x47, 0x6C, 0xB1, 0x2C, 0xD3, 0x95, 0xC1, 0xC3, 0xDD, 0x51, 0x85,
  0x05, 0x21, 0x81, 0x3B, 0x80, 0x80, 0x9C, 0xD0, 0xE5, 0xFC, 0x34, 0xCF, 0x2C, 0xA0, 0x8F, 0xB9,
  0x09, 0x47, 0x12, 0x3F, 0xEF, 0x66, 0x8C, 0x8F, 0x7D, 0x4D, 0x1D, 0x2C, 0xA4, 0x42, 0x4C, 0x05,
  0x47, 0x5E, 0x80, 0x45, 0x2B, 0x7E, 0x15, 0x6D, 0xE9, 0x78, 0x71, 0x4C, 0x87, 0x2A, 0x15, 0xD0,
  0xBE, 0xBC, 0x88, 0x3A, 0x30, 0x3A, 0x02, 0xA5, 0xE1, 0x72, 0xE6, 0x88, 0xD4, 0x74, 0x1F, 0xF5,
  0x93, 0x24, 0x10, 0xE8, 0xD3, 0xCD
};
size_t g_sample_spdu_consistency_check_gen_location_in_cert_circular_region_size = sizeof(g_sample_spdu_consistency_check_gen_location_in_cert_circular_region);


/* 생성좌표가 rse-0 인증서 유효지역 내에 포함되지 않은 SPDU (rse-0 인증서로 서명) - Dot2_ConstructSPDU()로 생성
rec1value Ieee1609Dot2Data ::= {
  protocolVersion 3,
  content signedData : {
    hashId sha256,
    tbsData {
      payload {
        data {
          protocolVersion 3,
          content unsecuredData : '00142512400000000764A5F6BB265B63C652087CFFFF807FF0010000FDFA1FA1007FFF1000000000'H
        }
      },
      headerInfo {
        psid 135,
        generationLocation {
          latitude 384856150,
          longitude 1280392830,
          elevation 500
        }
      }
    },
    signer certificate : {
      {
        version 3,
        type implicit,
        issuer sha256AndDigest : '163F2B7BC99253F4'H,
        toBeSigned {
          id binaryId : '66DF39628256B84E'H,
          cracaId '000000'H,
          crlSeries 0,
          validityPeriod {
            start 499525388,
            duration hours : 850
          },
          region circularRegion : {
            center {
              latitude 374856150,
              longitude 1270392830
            },
            radius 3000
          },
          appPermissions {
            {
              psid 135
            }
          },
          verifyKeyIndicator reconstructionValue : compressed-y-0 : '1445354A04AD1A94821725CA0F92F2B91B476CB12CD395C1C3DD51850521813B'H
        }
      }
    },
    signature ecdsaNistP256Signature : {
      rSig x-only : 'AB0F439987B42ABF6AA27B3CC6B1D351415D851D0B1651F99FA81E17DFEDF1E7'H,
      sSig '38C2FABF48737E7ED1F4F24C5538C788B12BF8BC7AD717123D286349D3318E82'H
    }
  }
}
 */
uint8_t g_sample_spdu_consistency_check_gen_location_out_of_cert_circular_region[] = {
  0x03, 0x81, 0x00, 0x40, 0x03, 0x80, 0x28, 0x00, 0x14, 0x25, 0x12, 0x40, 0x00, 0x00, 0x00, 0x07,
  0x64, 0xA5, 0xF6, 0xBB, 0x26, 0x5B, 0x63, 0xC6, 0x52, 0x08, 0x7C, 0xFF, 0xFF, 0x80, 0x7F, 0xF0,
  0x01, 0x00, 0x00, 0xFD, 0xFA, 0x1F, 0xA1, 0x00, 0x7F, 0xFF, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10,
  0x01, 0x87, 0x16, 0xF0, 0x70, 0x56, 0x4C, 0x51, 0x3E, 0x7E, 0x01, 0xF4, 0x81, 0x01, 0x01, 0x00,
  0x03, 0x01, 0x80, 0x16, 0x3F, 0x2B, 0x7B, 0xC9, 0x92, 0x53, 0xF4, 0x50, 0x82, 0x08, 0x66, 0xDF,
  0x39, 0x62, 0x82, 0x56, 0xB8, 0x4E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1D, 0xC6, 0x27, 0x0C, 0x84,
  0x03, 0x52, 0x80, 0x16, 0x57, 0xD9, 0xD6, 0x4B, 0xB8, 0xA7, 0xFE, 0x0B, 0xB8, 0x01, 0x01, 0x00,
  0x01, 0x87, 0x81, 0x82, 0x14, 0x45, 0x35, 0x4A, 0x04, 0xAD, 0x1A, 0x94, 0x82, 0x17, 0x25, 0xCA,
  0x0F, 0x92, 0xF2, 0xB9, 0x1B, 0x47, 0x6C, 0xB1, 0x2C, 0xD3, 0x95, 0xC1, 0xC3, 0xDD, 0x51, 0x85,
  0x05, 0x21, 0x81, 0x3B, 0x80, 0x80, 0xAB, 0x0F, 0x43, 0x99, 0x87, 0xB4, 0x2A, 0xBF, 0x6A, 0xA2,
  0x7B, 0x3C, 0xC6, 0xB1, 0xD3, 0x51, 0x41, 0x5D, 0x85, 0x1D, 0x0B, 0x16, 0x51, 0xF9, 0x9F, 0xA8,
  0x1E, 0x17, 0xDF, 0xED, 0xF1, 0xE7, 0x38, 0xC2, 0xFA, 0xBF, 0x48, 0x73, 0x7E, 0x7E, 0xD1, 0xF4,
  0xF2, 0x4C, 0x55, 0x38, 0xC7, 0x88, 0xB1, 0x2B, 0xF8, 0xBC, 0x7A, 0xD7, 0x17, 0x12, 0x3D, 0x28,
  0x63, 0x49, 0xD3, 0x31, 0x8E, 0x82
};
size_t g_sample_spdu_consistency_check_gen_location_out_of_cert_circular_region_size = sizeof(g_sample_spdu_consistency_check_gen_location_out_of_cert_circular_region);


/* 생성좌표가 rse-0 인증서 유효지역 내에 포함되지 않은 SPDU (obu-10a-0 인증서로 서명) - Dot2_ConstructSPDU()로 생성
rec1value Ieee1609Dot2Data ::= {
  protocolVersion 3,
  content signedData : {
    hashId sha256,
    tbsData {
      payload {
        data {
          protocolVersion 3,
          content unsecuredData : '00142512400000000764A5F6BB265B63C652087CFFFF807FF0010000FDFA1FA1007FFF1000000000'H
        }
      },
      headerInfo {
        psid 38,
        generationLocation {
          latitude 384856150,
          longitude 1280392830,
          elevation 0
        }
      }
    },
    signer certificate : {
      {
        version 3,
        type implicit,
        issuer sha256AndDigest : '163F2B7BC99253F4'H,
        toBeSigned {
          id linkageData : {
            iCert 266,
            linkage-value '13371EE98818946B54'H,
            group-linkage-value {
              jValue '0000000F'H,
              value '13371EE98818946B54'H
            }
          },
          cracaId 'F4F7A1'H,
          crlSeries 1,
          validityPeriod {
            start 508496403,
            duration hours : 169
          },
          region identifiedRegion : {
            countryOnly : 840,
            countryOnly : 410
          },
          appPermissions {
            {
              psid 32
            },
            {
              psid 38
            }
          },
          verifyKeyIndicator reconstructionValue : compressed-y-1 : '1730354E140D1DD437FA6A8BE8A843EEDDFDC4064875E0B0E8FBB94EA3260251'H
        }
      }
    },
    signature ecdsaNistP256Signature : {
      rSig x-only : '13F9FB47D115F4B421DD547EBCA3E5EA420DB9776DEB49377A132AA774BA7C1D'H,
      sSig 'A73600EC89BE129A44737B33D317F133F8E3BDD39E7E7D6FE3C2153229CB51F0'H
    }
  }
}
 */
uint8_t g_sample_spdu_consistency_check_gen_location_out_of_cert_identified_region[] = {
  0x03, 0x81, 0x00, 0x40, 0x03, 0x80, 0x28, 0x00, 0x14, 0x25, 0x12, 0x40, 0x00, 0x00, 0x00, 0x07,
  0x64, 0xA5, 0xF6, 0xBB, 0x26, 0x5B, 0x63, 0xC6, 0x52, 0x08, 0x7C, 0xFF, 0xFF, 0x80, 0x7F, 0xF0,
  0x01, 0x00, 0x00, 0xFD, 0xFA, 0x1F, 0xA1, 0x00, 0x7F, 0xFF, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10,
  0x01, 0x26, 0x16, 0xF0, 0x70, 0x56, 0x4C, 0x51, 0x3E, 0x7E, 0x00, 0x00, 0x81, 0x01, 0x01, 0x00,
  0x03, 0x01, 0x80, 0x16, 0x3F, 0x2B, 0x7B, 0xC9, 0x92, 0x53, 0xF4, 0x50, 0x80, 0x80, 0x01, 0x0A,
  0x13, 0x37, 0x1E, 0xE9, 0x88, 0x18, 0x94, 0x6B, 0x54, 0x00, 0x00, 0x00, 0x0F, 0x13, 0x37, 0x1E,
  0xE9, 0x88, 0x18, 0x94, 0x6B, 0x54, 0xF4, 0xF7, 0xA1, 0x00, 0x01, 0x1E, 0x4F, 0x0A, 0x13, 0x84,
  0x00, 0xA9, 0x83, 0x01, 0x02, 0x80, 0x03, 0x48, 0x80, 0x01, 0x9A, 0x01, 0x02, 0x00, 0x01, 0x20,
  0x00, 0x01, 0x26, 0x81, 0x83, 0x17, 0x30, 0x35, 0x4E, 0x14, 0x0D, 0x1D, 0xD4, 0x37, 0xFA, 0x6A,
  0x8B, 0xE8, 0xA8, 0x43, 0xEE, 0xDD, 0xFD, 0xC4, 0x06, 0x48, 0x75, 0xE0, 0xB0, 0xE8, 0xFB, 0xB9,
  0x4E, 0xA3, 0x26, 0x02, 0x51, 0x80, 0x80, 0x13, 0xF9, 0xFB, 0x47, 0xD1, 0x15, 0xF4, 0xB4, 0x21,
  0xDD, 0x54, 0x7E, 0xBC, 0xA3, 0xE5, 0xEA, 0x42, 0x0D, 0xB9, 0x77, 0x6D, 0xEB, 0x49, 0x37, 0x7A,
  0x13, 0x2A, 0xA7, 0x74, 0xBA, 0x7C, 0x1D, 0xA7, 0x36, 0x00, 0xEC, 0x89, 0xBE, 0x12, 0x9A, 0x44,
  0x73, 0x7B, 0x33, 0xD3, 0x17, 0xF1, 0x33, 0xF8, 0xE3, 0xBD, 0xD3, 0x9E, 0x7E, 0x7D, 0x6F, 0xE3,
  0xC2, 0x15, 0x32, 0x29, 0xCB, 0x51, 0xF0
};
size_t g_sample_spdu_consistency_check_gen_location_out_of_cert_identified_region_size = sizeof(g_sample_spdu_consistency_check_gen_location_out_of_cert_identified_region);
