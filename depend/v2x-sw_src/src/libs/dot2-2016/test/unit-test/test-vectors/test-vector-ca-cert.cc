/** 
 * @file
 * @brief 단위테스트에서 사용되는 샘플 CA 인증서 데이터를 정의한 파일
 * @date 2020-05-25
 * @author gyun
 */


// 시스템 헤더 파일
#include <stddef.h>
#include <stdint.h>

// 라이브러리 내부 헤더 파일
#include "dot2-internal.h"

// google test 헤더 파일
#include "gtest/gtest.h"

/* 샘플 rca 인증서 (Penta-security) - 최상위 인증서
{
   version = 3
   type = explicit
   issuer {
      self = sha256
   }
   toBeSigned {
      id {
         name = 'rca.pentasecurity.com'
      }
      cracaId = 0x000000
      crlSeries = 0
      validityPeriod {
         start = 468816349
         duration {
            years = 40
         }
      }
      appPermissions[0] {
         psid = 35
         ssp {
            opaque = 0x810001
         }
      }
      appPermissions[1] {
         psid = 256
         ssp {
            opaque = 0x00010001010100
         }
      }
      certIssuePermissions[0] {
         subjectPermissions {
            all
         }
         minChainLength = 3
         chainLengthRange = -1
         eeType = { 8, 0xc0 }
      }
      certIssuePermissions[1] {
         subjectPermissions {
            explicit[0] {
               psid = 35
            }
         }
         minChainLength = 1
         chainLengthRange = -1
         eeType = { 8, 0xc0 }
      }
      certIssuePermissions[2] {
         subjectPermissions {
            explicit[0] {
               psid = 38
            }
         }
         minChainLength = 1
         chainLengthRange = -1
         eeType = { 8, 0xc0 }
      }
      certIssuePermissions[3] {
         subjectPermissions {
            explicit[0] {
               psid = 256
            }
         }
         minChainLength = 1
         chainLengthRange = -1
         eeType = { 8, 0xc0 }
      }
      verifyKeyIndicator {
         verificationKey {
            ecdsaNistP256 {
               compressed-y-1 = 0xaad47cd904bc7b7bfa3cd4048d888925fc79274d85d54cacc844374d2013d96f
            }
         }
      }
   }
   signature_ {
      ecdsaNistP256Signature {
         rSig {
            x-only = 0xb1c894637fa99c85aab4da6542380933e4f0fe7950edc3d1f3216fdc06f6a0e9
         }
         sSig = 0x589419395a4b652083d1d818847b4abfc2cc5f5e044fe486587535d708c1cd6f
      }
   }
} */
uint8_t g_sample_rca_cert[] = {
  0x80, 0x03, 0x00, 0x81, 0x00, 0x18, 0x81, 0x15, 0x72, 0x63, 0x61, 0x2E, 0x70, 0x65, 0x6E, 0x74,
  0x61, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2E, 0x63, 0x6F, 0x6D, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x1B, 0xF1, 0x91, 0xDD, 0x86, 0x00, 0x28, 0x01, 0x02, 0x80, 0x01, 0x23, 0x80, 0x03,
  0x81, 0x00, 0x01, 0x80, 0x02, 0x01, 0x00, 0x80, 0x07, 0x00, 0x01, 0x00, 0x01, 0x01, 0x01, 0x00,
  0x01, 0x04, 0xE0, 0x81, 0x01, 0x03, 0x01, 0xFF, 0xC0, 0x60, 0x80, 0x01, 0x01, 0x00, 0x01, 0x23,
  0x01, 0xFF, 0xC0, 0x60, 0x80, 0x01, 0x01, 0x00, 0x01, 0x26, 0x01, 0xFF, 0xC0, 0x60, 0x80, 0x01,
  0x01, 0x00, 0x02, 0x01, 0x00, 0x01, 0xFF, 0xC0, 0x80, 0x80, 0x83, 0xAA, 0xD4, 0x7C, 0xD9, 0x04,
  0xBC, 0x7B, 0x7B, 0xFA, 0x3C, 0xD4, 0x04, 0x8D, 0x88, 0x89, 0x25, 0xFC, 0x79, 0x27, 0x4D, 0x85,
  0xD5, 0x4C, 0xAC, 0xC8, 0x44, 0x37, 0x4D, 0x20, 0x13, 0xD9, 0x6F, 0x80, 0x80, 0xB1, 0xC8, 0x94,
  0x63, 0x7F, 0xA9, 0x9C, 0x85, 0xAA, 0xB4, 0xDA, 0x65, 0x42, 0x38, 0x09, 0x33, 0xE4, 0xF0, 0xFE,
  0x79, 0x50, 0xED, 0xC3, 0xD1, 0xF3, 0x21, 0x6F, 0xDC, 0x06, 0xF6, 0xA0, 0xE9, 0x58, 0x94, 0x19,
  0x39, 0x5A, 0x4B, 0x65, 0x20, 0x83, 0xD1, 0xD8, 0x18, 0x84, 0x7B, 0x4A, 0xBF, 0xC2, 0xCC, 0x5F,
  0x5E, 0x04, 0x4F, 0xE4, 0x86, 0x58, 0x75, 0x35, 0xD7, 0x08, 0xC1, 0xCD, 0x6F
};
size_t g_sample_rca_cert_size = sizeof(g_sample_rca_cert);
uint8_t g_sample_rca_cert_uncompressed_verification_key[DOT2_EC_256_PUB_KEY_LEN] = {
  kDot2ECPointForm_Uncompressed,
  0xAA, 0xD4, 0x7C, 0xD9, 0x04, 0xBC, 0x7B, 0x7B, 0xFA, 0x3C, 0xD4, 0x04, 0x8D, 0x88, 0x89, 0x25,
  0xFC, 0x79, 0x27, 0x4D, 0x85, 0xD5, 0x4C, 0xAC, 0xC8, 0x44, 0x37, 0x4D, 0x20, 0x13, 0xD9, 0x6F,
  0xA7, 0xFF, 0x06, 0x57, 0xC5, 0x60, 0x84, 0x10, 0xD2, 0xC1, 0x34, 0x88, 0x1C, 0x02, 0x14, 0xEA,
  0xA1, 0xDE, 0xFB, 0x50, 0x2B, 0x24, 0x11, 0x2A, 0x35, 0x36, 0x95, 0x4B, 0xE0, 0xC3, 0x83, 0x3D
};
uint8_t g_sample_rca_cert_compressed_verification_key[DOT2_EC_256_COMPRESSED_PUB_KEY_LEN] = {
  kDot2ECPointForm_Compressed_y_1,
  0xaa, 0xd4, 0x7c, 0xd9, 0x04, 0xbc, 0x7b, 0x7b, 0xfa, 0x3c, 0xd4, 0x04, 0x8d, 0x88, 0x89, 0x25,
  0xfc, 0x79, 0x27, 0x4d, 0x85, 0xd5, 0x4c, 0xac, 0xc8, 0x44, 0x37, 0x4d, 0x20, 0x13, 0xd9, 0x6f
};
uint8_t g_sample_rca_cert_r_sig[DOT2_EC_256_KEY_LEN] = {
  0xb1, 0xc8, 0x94, 0x63, 0x7f, 0xa9, 0x9c, 0x85, 0xaa, 0xb4, 0xda, 0x65, 0x42, 0x38, 0x09, 0x33,
  0xe4, 0xf0, 0xfe, 0x79, 0x50, 0xed, 0xc3, 0xd1, 0xf3, 0x21, 0x6f, 0xdc, 0x06, 0xf6, 0xa0, 0xe9
};
uint8_t g_sample_rca_cert_s_sig[DOT2_EC_256_KEY_LEN] = {
  0x58, 0x94, 0x19, 0x39, 0x5a, 0x4b, 0x65, 0x20, 0x83, 0xd1, 0xd8, 0x18, 0x84, 0x7b, 0x4a, 0xbf,
  0xc2, 0xcc, 0x5f, 0x5e, 0x04, 0x4f, 0xe4, 0x86, 0x58, 0x75, 0x35, 0xd7, 0x08, 0xc1, 0xcd, 0x6f
};
uint8_t g_sample_rca_cert_h[32] = {
  0x73, 0xab, 0xe5, 0xb8, 0x55, 0x88, 0x33, 0xae, 0x11, 0xb1, 0xc8, 0x8e, 0xa0, 0xc9, 0xc5, 0xbe,
  0xdc, 0x4f, 0x74, 0x51, 0x0e, 0x15, 0xc1, 0x6a, 0x0d, 0xf9, 0xed, 0x50, 0x2b, 0x2d, 0x23, 0x5b
};
uint8_t g_sample_rca_cert_h8[8] = {
  0x0d, 0xf9, 0xed, 0x50, 0x2b, 0x2d, 0x23, 0x5b
};
uint8_t g_sample_rca_cert_h10[10] = {
  0xc1, 0x6a, 0x0d, 0xf9, 0xed, 0x50, 0x2b, 0x2d, 0x23, 0x5b
};
uint64_t g_sample_rca_valid_start = 468816349000000ULL;
uint64_t g_sample_rca_valid_end = 1730256349000000ULL;

/* 샘플 ica 인증서 (Penta-security)
{
   version = 3
   type = explicit
   issuer {
      sha256AndDigest = 0x0df9ed502b2d235b
   }
   toBeSigned {
      id {
         name = 'ica.pentasecurity.com'
      }
      cracaId = 0x2d235b
      crlSeries = 2
      validityPeriod {
         start = 468816349
         duration {
            years = 20
         }
      }
      region {
         identifiedRegion[0] {
            countryOnly = 410
         }
         identifiedRegion[1] {
            countryOnly = 123
         }
         identifiedRegion[2] {
            countryOnly = 484
         }
         identifiedRegion[3] {
            countryOnly = 840
         }
      }
      appPermissions[0] {
         psid = 35
         ssp {
            opaque = 0x830001
         }
      }
      certIssuePermissions[0] {
         subjectPermissions {
            all
         }
         minChainLength = 2
         chainLengthRange = 0
         eeType = { 8, 0xc0 }
      }
      certIssuePermissions[1] {
         subjectPermissions {
            explicit[0] {
               psid = 35
               sspRange {
                  all
               }
            }
            explicit[1] {
               psid = 256
               sspRange {
                  all
               }
            }
         }
         minChainLength = 1
         chainLengthRange = -1
         eeType = { 8, 0xc0 }
      }
      verifyKeyIndicator {
         verificationKey {
            ecdsaNistP256 {
               compressed-y-1 = 0xd168b09d668dda83fcac978a1d27253a3bc2fce6c4e3f2649b9fbd00d338c808
            }
         }
      }
   }
   signature_ {
      ecdsaNistP256Signature {
         rSig {
            x-only = 0xea2e01bf231c484c5de73d744834a1465804456f24eab07a4c83de8972f128c3
         }
         sSig = 0xd8b03ca5114046e0080b27eec087897dce37ae7deefdcd353d449961abb5af94
      }
   }
} */
uint8_t g_sample_ica_cert[] = {
  0x80, 0x03, 0x00, 0x80, 0x0D, 0xF9, 0xED, 0x50, 0x2B, 0x2D, 0x23, 0x5B, 0x58, 0x81, 0x15, 0x69,
  0x63, 0x61, 0x2E, 0x70, 0x65, 0x6E, 0x74, 0x61, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
  0x2E, 0x63, 0x6F, 0x6D, 0x2D, 0x23, 0x5B, 0x00, 0x02, 0x1B, 0xF1, 0x91, 0xDD, 0x86, 0x00, 0x14,
  0x83, 0x01, 0x04, 0x80, 0x01, 0x9A, 0x80, 0x00, 0x7B, 0x80, 0x01, 0xE4, 0x80, 0x03, 0x48, 0x01,
  0x01, 0x80, 0x01, 0x23, 0x80, 0x03, 0x83, 0x00, 0x01, 0x01, 0x02, 0xA0, 0x81, 0x01, 0x02, 0xC0,
  0x60, 0x80, 0x01, 0x02, 0x80, 0x01, 0x23, 0x81, 0x80, 0x02, 0x01, 0x00, 0x81, 0x01, 0xFF, 0xC0,
  0x80, 0x80, 0x83, 0xD1, 0x68, 0xB0, 0x9D, 0x66, 0x8D, 0xDA, 0x83, 0xFC, 0xAC, 0x97, 0x8A, 0x1D,
  0x27, 0x25, 0x3A, 0x3B, 0xC2, 0xFC, 0xE6, 0xC4, 0xE3, 0xF2, 0x64, 0x9B, 0x9F, 0xBD, 0x00, 0xD3,
  0x38, 0xC8, 0x08, 0x80, 0x80, 0xEA, 0x2E, 0x01, 0xBF, 0x23, 0x1C, 0x48, 0x4C, 0x5D, 0xE7, 0x3D,
  0x74, 0x48, 0x34, 0xA1, 0x46, 0x58, 0x04, 0x45, 0x6F, 0x24, 0xEA, 0xB0, 0x7A, 0x4C, 0x83, 0xDE,
  0x89, 0x72, 0xF1, 0x28, 0xC3, 0xD8, 0xB0, 0x3C, 0xA5, 0x11, 0x40, 0x46, 0xE0, 0x08, 0x0B, 0x27,
  0xEE, 0xC0, 0x87, 0x89, 0x7D, 0xCE, 0x37, 0xAE, 0x7D, 0xEE, 0xFD, 0xCD, 0x35, 0x3D, 0x44, 0x99,
  0x61, 0xAB, 0xB5, 0xAF, 0x94
};
size_t g_sample_ica_cert_size = sizeof(g_sample_ica_cert);
uint8_t g_sample_ica_cert_uncompressed_verification_key[DOT2_EC_256_PUB_KEY_LEN] = {
  kDot2ECPointForm_Uncompressed,
  0xD1, 0x68, 0xB0, 0x9D, 0x66, 0x8D, 0xDA, 0x83, 0xFC, 0xAC, 0x97, 0x8A, 0x1D, 0x27, 0x25, 0x3A,
  0x3B, 0xC2, 0xFC, 0xE6, 0xC4, 0xE3, 0xF2, 0x64, 0x9B, 0x9F, 0xBD, 0x00, 0xD3, 0x38, 0xC8, 0x08,
  0x04, 0x12, 0x4A, 0x9E, 0x54, 0x29, 0xB3, 0x51, 0x92, 0x33, 0xF2, 0xA0, 0xAC, 0x14, 0x57, 0xF4,
  0x7C, 0xDD, 0x86, 0xBC, 0xCA, 0xBB, 0x8D, 0x15, 0x49, 0xAC, 0xE5, 0x03, 0x9F, 0x85, 0x38, 0x53
};
uint8_t g_sample_ica_cert_compressed_verification_key[DOT2_EC_256_COMPRESSED_PUB_KEY_LEN] = {
  kDot2ECPointForm_Compressed_y_1,
  0xd1, 0x68, 0xb0, 0x9d, 0x66, 0x8d, 0xda, 0x83, 0xfc, 0xac, 0x97, 0x8a, 0x1d, 0x27, 0x25, 0x3a,
  0x3b, 0xc2, 0xfc, 0xe6, 0xc4, 0xe3, 0xf2, 0x64, 0x9b, 0x9f, 0xbd, 0x00, 0xd3, 0x38, 0xc8, 0x08
};
uint8_t g_sample_ica_cert_r_sig[DOT2_EC_256_KEY_LEN] = {
  0xea, 0x2e, 0x01, 0xbf, 0x23, 0x1c, 0x48, 0x4c, 0x5d, 0xe7, 0x3d, 0x74, 0x48, 0x34, 0xa1, 0x46,
  0x58, 0x04, 0x45, 0x6f, 0x24, 0xea, 0xb0, 0x7a, 0x4c, 0x83, 0xde, 0x89, 0x72, 0xf1, 0x28, 0xc3
};
uint8_t g_sample_ica_cert_s_sig[DOT2_EC_256_KEY_LEN] = {
  0xd8, 0xb0, 0x3c, 0xa5, 0x11, 0x40, 0x46, 0xe0, 0x08, 0x0b, 0x27, 0xee, 0xc0, 0x87, 0x89, 0x7d,
  0xce, 0x37, 0xae, 0x7d, 0xee, 0xfd, 0xcd, 0x35, 0x3d, 0x44, 0x99, 0x61, 0xab, 0xb5, 0xaf, 0x94
};
uint8_t g_sample_ica_cert_issuer_h8[8] = {0x0d,0xf9,0xed,0x50,0x2b,0x2d,0x23,0x5b};
uint8_t g_sample_ica_cert_h[32] = {
  0xEF, 0xD4, 0x05, 0xBA, 0x59, 0xF8, 0x7B, 0x9E, 0x4D, 0xF6, 0x1D, 0x06, 0x59, 0xA1, 0x80, 0x7D,
  0x49, 0xC2, 0xA3, 0xDE, 0x3E, 0xFD, 0x9A, 0x42, 0x28, 0x1C, 0x9C, 0x1E, 0x50, 0xF4, 0xF7, 0xA1
};
uint8_t g_sample_ica_cert_h8[8] = {
  0x28, 0x1c, 0x9c, 0x1e, 0x50, 0xf4, 0xf7, 0xa1
};
uint8_t g_sample_ica_cert_h10[10] = {
  0x9a, 0x42, 0x28, 0x1c, 0x9c, 0x1e, 0x50, 0xf4, 0xf7, 0xa1
};
uint64_t g_sample_ica_valid_start = 468816349000000ULL;
uint64_t g_sample_ica_valid_end = 1099536349000000ULL;


/* 샘플 eca 인증서 (Penta-security)
{
   version = 3
   type = explicit
   issuer {
      sha256AndDigest = 0x281c9c1e50f4f7a1
   }
   toBeSigned {
      id {
         name = 'eca.pentasecurity.com'
      }
      cracaId = 0xf4f7a1
      crlSeries = 2
      validityPeriod {
         start = 468816349
         duration {
            years = 3
         }
      }
      region {
         identifiedRegion[0] {
            countryOnly = 410
         }
         identifiedRegion[1] {
            countryOnly = 123
         }
         identifiedRegion[2] {
            countryOnly = 484
         }
         identifiedRegion[3] {
            countryOnly = 840
         }
      }
      appPermissions[0] {
         psid = 35
         ssp {
            opaque = 0x840001
         }
      }
      certIssuePermissions[0] {
         subjectPermissions {
            all
         }
         minChainLength = 1
         chainLengthRange = 0
         eeType = { 8, 0x40 }
      }
      encryptionKey {
         supportedSymmAlg = aes128Ccm
         publicKey {
            eciesNistP256 {
               compressed-y-0 = 0x01ba0b70b2c2545e90e69b0518d201a5c913e6a2f9e232c3b7144337cf14aaea
            }
         }
      }
      verifyKeyIndicator {
         verificationKey {
            ecdsaNistP256 {
               compressed-y-1 = 0x99d119fa4b42006d398489341fe16b59ca64f2151313ca9e9357192e13b75225
            }
         }
      }
   }
   signature_ {
      ecdsaNistP256Signature {
         rSig {
            x-only = 0xb90de70d3095f3dcaff5107d12e9c711216df9d8fcf2abbe905e123cb02bf69c
         }
         sSig = 0x523da94a46b3b95bd2234cbaf1916bc990fa513592bc077553889ddebd5f3a91
      }
   }
} */
uint8_t g_sample_eca_cert[] = {
  0x80, 0x03, 0x00, 0x80, 0x28, 0x1C, 0x9C, 0x1E, 0x50, 0xF4, 0xF7, 0xA1, 0x59, 0x81, 0x15, 0x65,
  0x63, 0x61, 0x2E, 0x70, 0x65, 0x6E, 0x74, 0x61, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
  0x2E, 0x63, 0x6F, 0x6D, 0xF4, 0xF7, 0xA1, 0x00, 0x02, 0x1B, 0xF1, 0x91, 0xDD, 0x86, 0x00, 0x03,
  0x83, 0x01, 0x04, 0x80, 0x01, 0x9A, 0x80, 0x00, 0x7B, 0x80, 0x01, 0xE4, 0x80, 0x03, 0x48, 0x01,
  0x01, 0x80, 0x01, 0x23, 0x80, 0x03, 0x84, 0x00, 0x01, 0x01, 0x01, 0x20, 0x81, 0x40, 0x00, 0x80,
  0x82, 0x01, 0xBA, 0x0B, 0x70, 0xB2, 0xC2, 0x54, 0x5E, 0x90, 0xE6, 0x9B, 0x05, 0x18, 0xD2, 0x01,
  0xA5, 0xC9, 0x13, 0xE6, 0xA2, 0xF9, 0xE2, 0x32, 0xC3, 0xB7, 0x14, 0x43, 0x37, 0xCF, 0x14, 0xAA,
  0xEA, 0x80, 0x80, 0x83, 0x99, 0xD1, 0x19, 0xFA, 0x4B, 0x42, 0x00, 0x6D, 0x39, 0x84, 0x89, 0x34,
  0x1F, 0xE1, 0x6B, 0x59, 0xCA, 0x64, 0xF2, 0x15, 0x13, 0x13, 0xCA, 0x9E, 0x93, 0x57, 0x19, 0x2E,
  0x13, 0xB7, 0x52, 0x25, 0x80, 0x80, 0xB9, 0x0D, 0xE7, 0x0D, 0x30, 0x95, 0xF3, 0xDC, 0xAF, 0xF5,
  0x10, 0x7D, 0x12, 0xE9, 0xC7, 0x11, 0x21, 0x6D, 0xF9, 0xD8, 0xFC, 0xF2, 0xAB, 0xBE, 0x90, 0x5E,
  0x12, 0x3C, 0xB0, 0x2B, 0xF6, 0x9C, 0x52, 0x3D, 0xA9, 0x4A, 0x46, 0xB3, 0xB9, 0x5B, 0xD2, 0x23,
  0x4C, 0xBA, 0xF1, 0x91, 0x6B, 0xC9, 0x90, 0xFA, 0x51, 0x35, 0x92, 0xBC, 0x07, 0x75, 0x53, 0x88,
  0x9D, 0xDE, 0xBD, 0x5F, 0x3A, 0x91
};
size_t g_sample_eca_cert_size = sizeof(g_sample_eca_cert);
uint8_t g_sample_eca_cert_uncompressed_verification_key[DOT2_EC_256_PUB_KEY_LEN] = {
  kDot2ECPointForm_Uncompressed,
  0x99, 0xD1, 0x19, 0xFA, 0x4B, 0x42, 0x00, 0x6D, 0x39, 0x84, 0x89, 0x34, 0x1F, 0xE1, 0x6B, 0x59,
  0xCA, 0x64, 0xF2, 0x15, 0x13, 0x13, 0xCA, 0x9E, 0x93, 0x57, 0x19, 0x2E, 0x13, 0xB7, 0x52, 0x25,
  0x21, 0x9B, 0x84, 0x52, 0x40, 0x33, 0x61, 0x50, 0x9C, 0x50, 0xBD, 0x22, 0x3B, 0xA3, 0xA0, 0x8A,
  0x7C, 0xCE, 0x52, 0x45, 0x3B, 0x49, 0x0C, 0x83, 0x56, 0x55, 0xB7, 0x5E, 0xFD, 0xD0, 0x21, 0x43
};
uint8_t g_sample_eca_cert_compressed_verification_key[DOT2_EC_256_COMPRESSED_PUB_KEY_LEN] = {
  kDot2ECPointForm_Compressed_y_1,
  0x99, 0xd1, 0x19, 0xfa, 0x4b, 0x42, 0x00, 0x6d, 0x39, 0x84, 0x89, 0x34, 0x1f, 0xe1, 0x6b, 0x59,
  0xca, 0x64, 0xf2, 0x15, 0x13, 0x13, 0xca, 0x9e, 0x93, 0x57, 0x19, 0x2e, 0x13, 0xb7, 0x52, 0x25
};
uint8_t g_sample_eca_cert_r_sig[DOT2_EC_256_KEY_LEN] = {
  0xb9, 0x0d, 0xe7, 0x0d, 0x30, 0x95, 0xf3, 0xdc, 0xaf, 0xf5, 0x10, 0x7d, 0x12, 0xe9, 0xc7, 0x11,
  0x21, 0x6d, 0xf9, 0xd8, 0xfc, 0xf2, 0xab, 0xbe, 0x90, 0x5e, 0x12, 0x3c, 0xb0, 0x2b, 0xf6, 0x9c
};
uint8_t g_sample_eca_cert_s_sig[DOT2_EC_256_KEY_LEN] = {
  0x52, 0x3d, 0xa9, 0x4a, 0x46, 0xb3, 0xb9, 0x5b, 0xd2, 0x23, 0x4c, 0xba, 0xf1, 0x91, 0x6b, 0xc9,
  0x90, 0xfa, 0x51, 0x35, 0x92, 0xbc, 0x07, 0x75, 0x53, 0x88, 0x9d, 0xde, 0xbd, 0x5f, 0x3a, 0x91
};
uint8_t g_sample_eca_cert_issuer_h8[8] = {0x28,0x1c,0x9c,0x1e,0x50,0xf4,0xf7,0xa1};
uint8_t g_sample_eca_cert_h[32] = {
  0x71, 0xCD, 0x5D, 0xCA, 0x48, 0x64, 0x1A, 0x6E, 0xAA, 0xB7, 0xAC, 0xBB, 0x99, 0xF6, 0x6B, 0x73,
  0x56, 0xD7, 0xE6, 0xB0, 0x7A, 0x44, 0x60, 0x46, 0x77, 0xC3, 0x20, 0x15, 0xD5, 0x32, 0x19, 0xF4
};
uint8_t g_sample_eca_cert_h8[8] = {
  0x77, 0xC3, 0x20, 0x15, 0xD5, 0x32, 0x19, 0xF4
};
uint8_t g_sample_eca_cert_h10[10] = {
  0x60, 0x46, 0x77, 0xC3, 0x20, 0x15, 0xD5, 0x32, 0x19, 0xF4
};


/* 샘플 pca 인증서 (Penta-security)
{
   version = 3
   type = explicit
   issuer {
      sha256AndDigest = 0x281c9c1e50f4f7a1
   }
   toBeSigned {
      id {
         name = 'pca.pentasecurity.com'
      }
      cracaId = 0xf4f7a1
      crlSeries = 2
      validityPeriod {
         start = 468816349
         duration {
            years = 3
         }
      }
      region {
         identifiedRegion[0] {
            countryOnly = 410
         }
         identifiedRegion[1] {
            countryOnly = 123
         }
         identifiedRegion[2] {
            countryOnly = 484
         }
         identifiedRegion[3] {
            countryOnly = 840
         }
      }
      appPermissions[0] {
         psid = 35
         ssp {
            opaque = 0x850001
         }
      }
      certIssuePermissions[0] {
         subjectPermissions {
            all
         }
         minChainLength = 1
         chainLengthRange = 0
         eeType = { 1, 1xxxxxxx }
      }
      encryptionKey {
         supportedSymmAlg = aes128Ccm
         publicKey {
            eciesNistP256 {
               compressed-y-1 = 0xfac45fdb8ca9cffa6aef06372cf93a3c0a8235dcfdd929ca09e345c25114554b
            }
         }
      }
      verifyKeyIndicator {
         verificationKey {
            ecdsaNistP256 {
               compressed-y-1 = 0xf7be7a6ca8f62aff8c8fd791043278994b81ffceb7a110039117061cf61be167
            }
         }
      }
   }
   signature_ {
      ecdsaNistP256Signature {
         rSig {
            x-only = 0x171bcf58ba61d3ecf57cac2521aefaa1badc2933b8b9175c750c554198f0414b
         }
         sSig = 0x368f125ad639ebae426bd1b05e4d9c96312cc085afabe60ecdb46b22956c78cb
      }
   }
} */
uint8_t g_sample_pca_cert[] = {
  0x80, 0x03, 0x00, 0x80, 0x28, 0x1C, 0x9C, 0x1E, 0x50, 0xF4, 0xF7, 0xA1, 0x59, 0x81, 0x15, 0x70,
  0x63, 0x61, 0x2E, 0x70, 0x65, 0x6E, 0x74, 0x61, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
  0x2E, 0x63, 0x6F, 0x6D, 0xF4, 0xF7, 0xA1, 0x00, 0x02, 0x1B, 0xF1, 0x91, 0xDD, 0x86, 0x00, 0x03,
  0x83, 0x01, 0x04, 0x80, 0x01, 0x9A, 0x80, 0x00, 0x7B, 0x80, 0x01, 0xE4, 0x80, 0x03, 0x48, 0x01,
  0x01, 0x80, 0x01, 0x23, 0x80, 0x03, 0x85, 0x00, 0x01, 0x01, 0x01, 0x00, 0x81, 0x00, 0x80, 0x83,
  0xFA, 0xC4, 0x5F, 0xDB, 0x8C, 0xA9, 0xCF, 0xFA, 0x6A, 0xEF, 0x06, 0x37, 0x2C, 0xF9, 0x3A, 0x3C,
  0x0A, 0x82, 0x35, 0xDC, 0xFD, 0xD9, 0x29, 0xCA, 0x09, 0xE3, 0x45, 0xC2, 0x51, 0x14, 0x55, 0x4B,
  0x80, 0x80, 0x83, 0xF7, 0xBE, 0x7A, 0x6C, 0xA8, 0xF6, 0x2A, 0xFF, 0x8C, 0x8F, 0xD7, 0x91, 0x04,
  0x32, 0x78, 0x99, 0x4B, 0x81, 0xFF, 0xCE, 0xB7, 0xA1, 0x10, 0x03, 0x91, 0x17, 0x06, 0x1C, 0xF6,
  0x1B, 0xE1, 0x67, 0x80, 0x80, 0x17, 0x1B, 0xCF, 0x58, 0xBA, 0x61, 0xD3, 0xEC, 0xF5, 0x7C, 0xAC,
  0x25, 0x21, 0xAE, 0xFA, 0xA1, 0xBA, 0xDC, 0x29, 0x33, 0xB8, 0xB9, 0x17, 0x5C, 0x75, 0x0C, 0x55,
  0x41, 0x98, 0xF0, 0x41, 0x4B, 0x36, 0x8F, 0x12, 0x5A, 0xD6, 0x39, 0xEB, 0xAE, 0x42, 0x6B, 0xD1,
  0xB0, 0x5E, 0x4D, 0x9C, 0x96, 0x31, 0x2C, 0xC0, 0x85, 0xAF, 0xAB, 0xE6, 0x0E, 0xCD, 0xB4, 0x6B,
  0x22, 0x95, 0x6C, 0x78, 0xCB
};
size_t g_sample_pca_cert_size = sizeof(g_sample_pca_cert);
uint8_t g_sample_pca_cert_uncompressed_verification_key[DOT2_EC_256_PUB_KEY_LEN] = {
  kDot2ECPointForm_Uncompressed,
  0xF7, 0xBE, 0x7A, 0x6C, 0xA8, 0xF6, 0x2A, 0xFF, 0x8C, 0x8F, 0xD7, 0x91, 0x04, 0x32, 0x78, 0x99,
  0x4B, 0x81, 0xFF, 0xCE, 0xB7, 0xA1, 0x10, 0x03, 0x91, 0x17, 0x06, 0x1C, 0xF6, 0x1B, 0xE1, 0x67,
  0x3F, 0x31, 0x84, 0x58, 0x6F, 0x20, 0x62, 0xA3, 0x5A, 0x73, 0xC0, 0x6A, 0x00, 0x5B, 0xD2, 0x9B,
  0x35, 0x88, 0x5D, 0x0E, 0x85, 0x4B, 0x25, 0xFD, 0x4D, 0x3E, 0x7C, 0xB9, 0x48, 0x6C, 0x3A, 0xDF
};
uint8_t g_sample_pca_cert_compressed_verification_key[DOT2_EC_256_COMPRESSED_PUB_KEY_LEN] = {
  kDot2ECPointForm_Compressed_y_1,
  0xf7, 0xbe, 0x7a, 0x6c, 0xa8, 0xf6, 0x2a, 0xff, 0x8c, 0x8f, 0xd7, 0x91, 0x04, 0x32, 0x78, 0x99,
  0x4b, 0x81, 0xff, 0xce, 0xb7, 0xa1, 0x10, 0x03, 0x91, 0x17, 0x06, 0x1c, 0xf6, 0x1b, 0xe1, 0x67
};
uint8_t g_sample_pca_cert_r_sig[DOT2_EC_256_KEY_LEN] = {
  0x17, 0x1b, 0xcf, 0x58, 0xba, 0x61, 0xd3, 0xec, 0xf5, 0x7c, 0xac, 0x25, 0x21, 0xae, 0xfa, 0xa1,
  0xba, 0xdc, 0x29, 0x33, 0xb8, 0xb9, 0x17, 0x5c, 0x75, 0x0c, 0x55, 0x41, 0x98, 0xf0, 0x41, 0x4b
};
uint8_t g_sample_pca_cert_s_sig[DOT2_EC_256_KEY_LEN] = {
  0x36, 0x8f, 0x12, 0x5a, 0xd6, 0x39, 0xeb, 0xae, 0x42, 0x6b, 0xd1, 0xb0, 0x5e, 0x4d, 0x9c, 0x96,
  0x31, 0x2c, 0xc0, 0x85, 0xaf, 0xab, 0xe6, 0x0e, 0xcd, 0xb4, 0x6b, 0x22, 0x95, 0x6c, 0x78, 0xcb
};
uint8_t g_sample_pca_cert_issuer_h8[8] = {0x28,0x1c,0x9c,0x1e,0x50,0xf4,0xf7,0xa1};
uint8_t g_sample_pca_cert_h[32] = {
  0xD6, 0x58, 0xE6, 0xFD, 0x4A, 0x0C, 0x12, 0x2B, 0xC2, 0x1C, 0xE0, 0x66, 0x46, 0x78, 0x2D, 0x40,
  0xC2, 0x1F, 0xD9, 0x2F, 0xD4, 0xE3, 0x35, 0x2F, 0x16, 0x3F, 0x2B, 0x7B, 0xC9, 0x92, 0x53, 0xF4
};
uint8_t g_sample_pca_cert_h8[8] = {
  0x16,0x3f,0x2b,0x7b,0xc9,0x92,0x53,0xf4
};
uint8_t g_sample_pca_cert_h10[10] = {
  0x35,0x2f,0x16,0x3f,0x2b,0x7b,0xc9,0x92,0x53,0xf4
};
uint64_t g_sample_pca_valid_start = 468816349000000ULL;
uint64_t g_sample_pca_valid_end = 563424349000000ULL;


/* 샘플 ra 인증서 (Penta-security)
{
   version = 3
   type = explicit
   issuer {
      sha256AndDigest = 0x281c9c1e50f4f7a1
   }
   toBeSigned {
      id {
         name = 'ra.pentasecurity.com'
      }
      cracaId = 0xf4f7a1
      crlSeries = 2
      validityPeriod {
         start = 468816349
         duration {
            years = 3
         }
      }
      region {
         identifiedRegion[0] {
            countryOnly = 410
         }
      }
      appPermissions[0] {
         psid = 35
         ssp {
            opaque = 0x8b0001
         }
      }
      certRequestPermissions[0] {
         subjectPermissions {
            all
         }
         minChainLength = 0
         chainLengthRange = 0
         eeType = { 1, 1xxxxxxx }
      }
      encryptionKey {
         supportedSymmAlg = aes128Ccm
         publicKey {
            eciesNistP256 {
               compressed-y-0 = 0x9f2d0f08b58fd72a782d40f88e06a1af8cf2dfdb2a090c01a0ce722fef904967
            }
         }
      }
      verifyKeyIndicator {
         verificationKey {
            ecdsaNistP256 {
               compressed-y-1 = 0xd59ce16c2505356185be12a8826d8d1398b89d40a3641ed4ec0d7125b75273e3
            }
         }
      }
   }
   signature_ {
      ecdsaNistP256Signature {
         rSig {
            x-only = 0x79156cc72c63b386f8f500202bd7d979f222157db6aac00523ad2751fa4c0df4
         }
         sSig = 0x4bad0bc4ac4e67d4a5ca042877f26ccb0e44c6f8be08eb779aee405ae14efdb9
      }
   }
} */
uint8_t g_sample_ra_cert[] = {
  0x80, 0x03, 0x00, 0x80, 0x28, 0x1C, 0x9C, 0x1E, 0x50, 0xF4, 0xF7, 0xA1, 0x55, 0x81, 0x14, 0x72,
  0x61, 0x2E, 0x70, 0x65, 0x6E, 0x74, 0x61, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2E,
  0x63, 0x6F, 0x6D, 0xF4, 0xF7, 0xA1, 0x00, 0x02, 0x1B, 0xF1, 0x91, 0xDD, 0x86, 0x00, 0x03, 0x83,
  0x01, 0x01, 0x80, 0x01, 0x9A, 0x01, 0x01, 0x80, 0x01, 0x23, 0x80, 0x03, 0x8B, 0x00, 0x01, 0x01,
  0x01, 0x80, 0x81, 0x01, 0x00, 0x00, 0x80, 0x82, 0x9F, 0x2D, 0x0F, 0x08, 0xB5, 0x8F, 0xD7, 0x2A,
  0x78, 0x2D, 0x40, 0xF8, 0x8E, 0x06, 0xA1, 0xAF, 0x8C, 0xF2, 0xDF, 0xDB, 0x2A, 0x09, 0x0C, 0x01,
  0xA0, 0xCE, 0x72, 0x2F, 0xEF, 0x90, 0x49, 0x67, 0x80, 0x80, 0x83, 0xD5, 0x9C, 0xE1, 0x6C, 0x25,
  0x05, 0x35, 0x61, 0x85, 0xBE, 0x12, 0xA8, 0x82, 0x6D, 0x8D, 0x13, 0x98, 0xB8, 0x9D, 0x40, 0xA3,
  0x64, 0x1E, 0xD4, 0xEC, 0x0D, 0x71, 0x25, 0xB7, 0x52, 0x73, 0xE3, 0x80, 0x80, 0x79, 0x15, 0x6C,
  0xC7, 0x2C, 0x63, 0xB3, 0x86, 0xF8, 0xF5, 0x00, 0x20, 0x2B, 0xD7, 0xD9, 0x79, 0xF2, 0x22, 0x15,
  0x7D, 0xB6, 0xAA, 0xC0, 0x05, 0x23, 0xAD, 0x27, 0x51, 0xFA, 0x4C, 0x0D, 0xF4, 0x4B, 0xAD, 0x0B,
  0xC4, 0xAC, 0x4E, 0x67, 0xD4, 0xA5, 0xCA, 0x04, 0x28, 0x77, 0xF2, 0x6C, 0xCB, 0x0E, 0x44, 0xC6,
  0xF8, 0xBE, 0x08, 0xEB, 0x77, 0x9A, 0xEE, 0x40, 0x5A, 0xE1, 0x4E, 0xFD, 0xB9
};
size_t g_sample_ra_cert_size = sizeof(g_sample_ra_cert);
uint8_t g_sample_ra_cert_uncompressed_verification_key[DOT2_EC_256_PUB_KEY_LEN] = {
  kDot2ECPointForm_Uncompressed,
  0xD5, 0x9C, 0xE1, 0x6C, 0x25, 0x05, 0x35, 0x61, 0x85, 0xBE, 0x12, 0xA8, 0x82, 0x6D, 0x8D, 0x13,
  0x98, 0xB8, 0x9D, 0x40, 0xA3, 0x64, 0x1E, 0xD4, 0xEC, 0x0D, 0x71, 0x25, 0xB7, 0x52, 0x73, 0xE3,
  0x85, 0x15, 0xC4, 0xB7, 0xC8, 0xBC, 0xA8, 0xA3, 0x44, 0xBC, 0x63, 0x7F, 0x86, 0x6E, 0xEE, 0x10,
  0x71, 0xE2, 0xFB, 0xC2, 0x6E, 0x48, 0x5E, 0x59, 0xDC, 0x7E, 0x8C, 0x4F, 0x34, 0x52, 0x57, 0x11
};
uint8_t g_sample_ra_cert_compressed_verification_key[DOT2_EC_256_COMPRESSED_PUB_KEY_LEN] = {
  kDot2ECPointForm_Compressed_y_1,
  0xd5, 0x9c, 0xe1, 0x6c, 0x25, 0x05, 0x35, 0x61, 0x85, 0xbe, 0x12, 0xa8, 0x82, 0x6d, 0x8d, 0x13,
  0x98, 0xb8, 0x9d, 0x40, 0xa3, 0x64, 0x1e, 0xd4, 0xec, 0x0d, 0x71, 0x25, 0xb7, 0x52, 0x73, 0xe3
};
uint8_t g_sample_ra_cert_r_sig[DOT2_EC_256_KEY_LEN] = {
  0x79, 0x15, 0x6c, 0xc7, 0x2c, 0x63, 0xb3, 0x86, 0xf8, 0xf5, 0x00, 0x20, 0x2b, 0xd7, 0xd9, 0x79,
  0xf2, 0x22, 0x15, 0x7d, 0xb6, 0xaa, 0xc0, 0x05, 0x23, 0xad, 0x27, 0x51, 0xfa, 0x4c, 0x0d, 0xf4
};
uint8_t g_sample_ra_cert_s_sig[DOT2_EC_256_KEY_LEN] = {
  0x4b, 0xad, 0x0b, 0xc4, 0xac, 0x4e, 0x67, 0xd4, 0xa5, 0xca, 0x04, 0x28, 0x77, 0xf2, 0x6c, 0xcb,
  0x0e, 0x44, 0xc6, 0xf8, 0xbe, 0x08, 0xeb, 0x77, 0x9a, 0xee, 0x40, 0x5a, 0xe1, 0x4e, 0xfd, 0xb9
};
uint8_t g_sample_ra_cert_issuer_h8[8] = {0x28,0x1c,0x9c,0x1e,0x50,0xf4,0xf7,0xa1};
uint8_t g_sample_ra_cert_h[32] = {
  0xAA, 0xF2, 0x5C, 0x28, 0xBC, 0x6C, 0xF9, 0xD9, 0x28, 0xE1, 0xEA, 0x21, 0x9E, 0x0C, 0xE9, 0x5B,
  0x32, 0x36, 0xC7, 0xAC, 0x2B, 0x55, 0x88, 0x18, 0xC7, 0x6F, 0xE2, 0x34, 0xF1, 0xCA, 0x51, 0x63
};
uint8_t g_sample_ra_cert_h8[8] = {
  0xC7, 0x6F, 0xE2, 0x34, 0xF1, 0xCA, 0x51, 0x63
};
uint8_t g_sample_ra_cert_h10[10] = {
  0x88, 0x18, 0xC7, 0x6F, 0xE2, 0x34, 0xF1, 0xCA, 0x51, 0x63
};
